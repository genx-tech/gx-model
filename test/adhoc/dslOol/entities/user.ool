import 'group'

type
  password : text maxLength(200)
  email : text maxLength(200) |~isEmail
  phone : text maxLength(20) |~matches(/^((\+|00)\d+)?\d+(-\d+)?$/)
  userStatus : enum values("inactive", "active", "disabled", "forbidden", "deleted")
  name : text maxLength(20)

const
  ABC = 1
  CDE = 'fjeifj'
   

entity user
  -- "User Credential"
  with
    autoId({"startFrom":100000})
    createTimestamp
    updateTimestamp
    logicalDeletion({"status":"deleted"})
    stateTracking("status")
    atLeastOneNotNull(["email","mobile"])

  has
    email -- "User Email"
    mobile : phone |~isMobilePhone(@latest.locale |>stringDasherize) |>normalizeMobile -- "User Mobile"
    password |>hashPassword(@latest.passwordSalt) -- "User Password"
    passwordSalt : text fixedLength(8) auto -- "User Password Salt"
    locale : text default("en_AU") -- "User Locale"
    status : userStatus default("inactive") -- "User Status"
    testToken : datetime default(@@now)

  associations
    hasMany profile as profiles
    hasMany group connectedBy userGroup as groups

  index
    email is unique
    mobile is unique

  data [
    {
      email: 'admin@email.com',
      mobile: '0412345678',
      password: '123456',
      isEmailVerified: true,
      isMobileVerified: true,
      status: 'active'
    }
  ]  

  restful 
    /user
      create
        allow [ 'admin' ]
      findOne
        allow anonymous
        nested
          /profiles [ 'profiles' ]
          /profile/:profileId [ 'profiles' ] { 'profiles.id': @params.profileId }
      findAll
        allow [ 'admin' ]
        presetOfOrder
          default {
            id: true
          }
      updateOne
        allow [ 'admin' ]      
        allow self  
        presetOptions {   
          retrieveUpdated: true
        }  
      updateMany
        allow [ 'admin' ]    
        presetOptions {   
          retrieveUpdated: true
        }
      deleteOne
        allow [ 'admin' ]       
      deleteMany
        allow [ 'admin' ] 

    /my-user-data -> /user
      findOne
        id @state.user.id
      updateOne
        id @state.user.id     

  interface
    validateUserCredential
      accept
        identity : text maxLength(200)
        password

      find a user by cases 
        when @identity ~ isEmail => 
          @user.email == @identity 
        when @identity ~ matches(/^(\+?\d{6,})$/) => @user.mobile == @identity 
        otherwise => throw BusinessError('invalid_identity')

      return @user unless
        when @user not exists => throw BusinessError('user_not_found')
        when @password |> hashPassword(@user.passwordSalt) != @user.password => throw BusinessError('invalid_password') 
