import common

type
  orderStatus : enum values("Accepted", "Pending", "Paid", "Refund", "Cancelled", "Expired")
  lineItemStatus : enum values("Quote", "Unpaid", "Paying", "Paid", "PayFailed", "NonPayable")

entity order
  with
    autoId
    createTimestamp
    updateTimestamp
    stateTracking('status')
    logicalDeletion

  has
    status : orderStatus default("Quote")
    expiryDate : datetime optional 
    netAmount : number optional 
    taxAmount : number optional 
    totalAmount : number optional 
    itemCount : integer default(0)

  associations          
    hasMany orderLineItem as lineItems       
    
entity orderLineItem
  with
    autoId
    stateTracking('status')
  has
    unitPrice : number
    adjustedUnitPrice : number optional
    adjustedReason : text maxLength(200) optional |~notNullIf(@latest.adjustedUnitPrice |>isSet)
    quantity : integer
    netAmount : number
    taxAmount : number
    subTotal : number
    status : lineItemStatus    
    expiryDate : datetime optional
    desc     

  associations    
    belongsTo serviceOrder    
    refersTo taxCode default('GST')  
  

/*
  triggers
    onCreate
      always
        call @entities.order.
        
    onCreateOrUpdate
      when any [ quantity, unitPrice, adjustedUnitPrice, taxCode ] ~ changed        
        netAmount |=multiply(@latest.quantity, @latest.adjustedUnitPrice |>ifNullSetTo(@latest.unitPrice)
        taxAmount |=multiply(@latest.netAmount, @entities.taxCode.cached[@latest.taxCode].value)
        subTotal |=@latest.netAmount + @latest.taxAmount      
        
    onUpdate      
      when status ~ changed
        from 'Quote' to 'Unpaid'
          expiryDate |=datetimeAdd(@@now, { days: @entities.settings.cached['EXPIRY_DAYS'].value })  
*/