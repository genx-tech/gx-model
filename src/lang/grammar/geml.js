/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var geml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,101,263,270],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,99,100,114,116,142,151,155,160,162,173,177,222,262,280,288,290,291,307,322,327,333,334],$Vb=[2,315],$Vc=[1,51],$Vd=[115,322],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,82,84,86,114],$Vo=[2,63],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,113,116,120,127,166,167,174,180,196],$VI=[2,104],$VJ=[1,110],$VK=[17,334],$VL=[1,114],$VM=[17,20,82,84,86,89,100,114,162,177,216,217,230,238,242,253,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$VN=[1,124],$VO=[1,130],$VP=[17,114],$VQ=[2,69],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,82,84,86,114,322],$VV=[1,143],$VW=[1,164],$VX=[1,158],$VY=[1,159],$VZ=[1,160],$V_=[1,161],$V$=[1,162],$V01=[1,163],$V11=[1,166],$V21=[1,165],$V31=[1,182],$V41=[307,328],$V51=[17,20,82,84,86,89,100,114,116,162,177,216,217,230,238,242,253,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$V61=[89,334],$V71=[1,188],$V81=[17,20,89,100,114,162,177,216,217,230,238,242,253,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$V91=[2,292],$Va1=[1,191],$Vb1=[2,113],$Vc1=[1,196],$Vd1=[1,202],$Ve1=[1,201],$Vf1=[20,40],$Vg1=[1,223],$Vh1=[2,240],$Vi1=[1,242],$Vj1=[1,243],$Vk1=[1,244],$Vl1=[1,245],$Vm1=[1,259],$Vn1=[1,261],$Vo1=[1,267],$Vp1=[1,268],$Vq1=[1,271],$Vr1=[17,100,173],$Vs1=[2,176],$Vt1=[1,298],$Vu1=[1,311],$Vv1=[1,312],$Vw1=[17,20,82,84,86,89,114,162,216,217,230,238,253,322,352,353],$Vx1=[1,316],$Vy1=[1,323],$Vz1=[1,318],$VA1=[1,317],$VB1=[1,314],$VC1=[1,315],$VD1=[1,319],$VE1=[1,320],$VF1=[1,321],$VG1=[1,322],$VH1=[1,324],$VI1=[1,325],$VJ1=[1,326],$VK1=[1,327],$VL1=[1,348],$VM1=[1,349],$VN1=[1,350],$VO1=[1,351],$VP1=[1,363],$VQ1=[1,364],$VR1=[1,365],$VS1=[20,292,296,297,308,311],$VT1=[1,377],$VU1=[1,374],$VV1=[1,376],$VW1=[1,375],$VX1=[1,372],$VY1=[1,373],$VZ1=[20,116,142,160,216,217,222,253,288,290,291,292,296,297,308,311],$V_1=[17,116],$V$1=[17,20,82,84,86,89,114,162,216,217,230,238,253,322],$V02=[87,91,115,309,310,322,323,324,325,326,327,333,338],$V12=[2,116],$V22=[17,115,322],$V32=[20,296,297,308,311],$V42=[59,87,91,115,309,310,322,323,324,325,326,327,333,338,341],$V52=[2,250],$V62=[20,115,322],$V72=[17,114,162,322],$V82=[1,474],$V92=[17,82,84,86,114,162,322],$Va2=[1,478],$Vb2=[20,297,308,311],$Vc2=[17,20,82,84,86,114,162,216,217,230,238,253,322],$Vd2=[17,114,322],$Ve2=[1,510],$Vf2=[1,513],$Vg2=[1,514],$Vh2=[1,529],$Vi2=[1,530],$Vj2=[20,308,311],$Vk2=[17,114,116,162,302,303,304,305,307,322],$Vl2=[1,563],$Vm2=[1,564],$Vn2=[1,562],$Vo2=[20,311],$Vp2=[1,578],$Vq2=[1,597],$Vr2=[20,238],$Vs2=[20,216,217,238,253],$Vt2=[20,184,187,189],$Vu2=[1,646],$Vv2=[17,307],$Vw2=[1,658],$Vx2=[20,160,194],$Vy2=[1,692],$Vz2=[1,695],$VA2=[20,234,235],$VB2=[1,724],$VC2=[17,20,160,234,235];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"identifier_or_general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"general_function_call":90,"REGEXP":91,"logical_expression":92,"entity_statement_header":93,"entity_statement_block":94,"entity_statement_option0":95,"entity_statement_header0":96,"entity_base_keywords":97,"identifier_or_string_list":98,"extends":99,"is":100,"entity":101,"entity_sub_items":102,"entity_sub_item":103,"with_features":104,"has_fields":105,"associations_statement":106,"key_statement":107,"index_statement":108,"data_statement":109,"code_statement":110,"interfaces_statement":111,"triggers_statement":112,"code":113,"--":114,"STRING":115,"with":116,"with_features_block":117,"with_features_option0":118,"feature_inject":119,"has":120,"has_fields_block":121,"has_fields_option0":122,"field_item":123,"field_item_body":124,"modifiable_field":125,"type_base_or_not":126,"associations":127,"associations_block":128,"associations_statement_option0":129,"association_item":130,"association_type_referee":131,"association_item_option0":132,"association_item_option1":133,"association_cases_block":134,"association_item_option2":135,"belongsTo":136,"association_item_option3":137,"association_item_option4":138,"refersTo":139,"association_item_option5":140,"association_item_option6":141,"of":142,"association_item_option7":143,"association_item_option8":144,"hasOne":145,"hasMany":146,"reference_to_field":147,"on":148,"association_type_referer":149,"association_through":150,"connectedBy":151,"identifier_string_or_dotname":152,"association_extra_condition":153,"association_connection":154,"being":155,"array_of_identifier_or_string":156,"association_condition":157,"conditional_expression":158,"association_cases":159,"when":160,"association_as":161,"as":162,"association_qualifiers":163,"optional":164,"default":165,"key":166,"index":167,"index_item":168,"index_statement_block":169,"index_statement_option0":170,"index_item_body":171,"index_item_option0":172,"unique":173,"data":174,"data_records":175,"data_statement_option0":176,"in":177,"inline_object":178,"inline_array":179,"triggers":180,"triggers_statement_block":181,"triggers_statement_option0":182,"triggers_operation":183,"onCreate":184,"triggers_operation_block":185,"triggers_operation_option0":186,"onCreateOrUpdate":187,"triggers_operation_option1":188,"onDelete":189,"triggers_operation_option2":190,"triggers_operation_item":191,"triggers_result_block":192,"triggers_operation_item_option0":193,"always":194,"triggers_operation_item_option1":195,"interface":196,"interfaces_statement_block":197,"interfaces_statement_option0":198,"interface_definition":199,"interface_definition_body":200,"interface_definition_option0":201,"accept_or_not":202,"implementation":203,"return_or_not":204,"accept_statement":205,"accept":206,"accept_param":207,"accept_block":208,"accept_statement_option0":209,"modifiable_param":210,"DOTNAME":211,"operation":212,"find_one_operation":213,"coding_block":214,"find_one_keywords":215,"findOne":216,"find":217,"article_keyword":218,"selection_inline_keywords":219,"case_statement":220,"cases_keywords":221,"by":222,"cases":223,"below":224,"case_condition_block":225,"case_statement_option0":226,"otherwise_statement":227,"case_statement_option1":228,"case_condition_item":229,"=>":230,"condition_as_result_expression":231,"otherwise_keywords":232,"stop_controll_flow_expression":233,"otherwise":234,"else":235,"return_expression":236,"throw_error_expression":237,"return":238,"modifiable_value":239,"throw":240,"gfc_param_list":241,"unless":242,"return_condition_block":243,"return_or_not_option0":244,"return_condition_item":245,"update_operation":246,"update":247,"where_expr":248,"create_operation":249,"create":250,"delete_operation":251,"delete":252,"do":253,"javascript":254,"assign_operation":255,"set":256,"identifier_or_member_access":257,"<-":258,"value":259,"variable_modifier_or_not":260,"entity_fields_selections":261,"->":262,"dataset":263,"dataset_statement_block":264,"dataset_statement_option0":265,"article_keyword_or_not":266,"dataset_join_with_item":267,"dataset_join_with_block":268,"dataset_join_with_item_option0":269,"view":270,"view_statement_block":271,"view_statement_option0":272,"view_main_entity":273,"view_selection_or_not":274,"group_by_or_not":275,"having_or_not":276,"order_by_or_not":277,"skip_or_not":278,"limit_or_not":279,"list":280,"view_selection":281,"a":282,"an":283,"the":284,"one":285,"selection_attributive_keywords":286,"which":287,"where":288,"selection_keywords":289,"selectedBy":290,"selected":291,"group":292,"identifier_string_or_dotname_list":293,"identifier_string_or_dotname_block":294,"group_by_or_not_option0":295,"having":296,"order":297,"order_by_list":298,"order_by_block":299,"order_by_or_not_option0":300,"order_by_clause":301,"ascend":302,"<":303,"descend":304,">":305,"order_by_list0":306,",":307,"offset":308,"INTEGER":309,"REFERENCE":310,"limit":311,"gfc_param0":312,"nfc_param_list":313,"nfc_param":314,"nfc_param_list0":315,"unary_expression":316,"binary_expression":317,"boolean_expression":318,"gfc_param_list0":319,"?":320,"identifier_string_or_dotname_list0":321,"NAME":322,"FLOAT":323,"BOOL":324,"SCRIPT":325,"SYMBOL":326,"{":327,"}":328,"kv_pairs":329,"kv_pair_item":330,"non_exist":331,"kv_pairs0":332,"[":333,"]":334,"identifier_or_string_list0":335,"simple_expression":336,"exists":337,"not":338,"null":339,"~":340,"all":341,">=":342,"<=":343,"==":344,"!=":345,"+":346,"-":347,"*":348,"/":349,"logical_expression_right":350,"logical_operators":351,"and":352,"or":353,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",91:"REGEXP",99:"extends",100:"is",101:"entity",113:"code",114:"--",115:"STRING",116:"with",120:"has",127:"associations",136:"belongsTo",139:"refersTo",142:"of",145:"hasOne",146:"hasMany",148:"on",151:"connectedBy",155:"being",160:"when",162:"as",164:"optional",165:"default",166:"key",167:"index",173:"unique",174:"data",177:"in",180:"triggers",184:"onCreate",187:"onCreateOrUpdate",189:"onDelete",192:"triggers_result_block",194:"always",196:"interface",206:"accept",211:"DOTNAME",216:"findOne",217:"find",222:"by",223:"cases",224:"below",230:"=>",234:"otherwise",235:"else",238:"return",240:"throw",242:"unless",247:"update",248:"where_expr",250:"create",252:"delete",253:"do",254:"javascript",256:"set",257:"identifier_or_member_access",258:"<-",260:"variable_modifier_or_not",262:"->",263:"dataset",270:"view",280:"list",282:"a",283:"an",284:"the",285:"one",287:"which",288:"where",290:"selectedBy",291:"selected",292:"group",296:"having",297:"order",302:"ascend",303:"<",304:"descend",305:">",307:",",308:"offset",309:"INTEGER",310:"REFERENCE",311:"limit",320:"?",322:"NAME",323:"FLOAT",324:"BOOL",325:"SCRIPT",326:"SYMBOL",327:"{",328:"}",333:"[",334:"]",337:"exists",338:"not",339:"null",340:"~",341:"all",342:">=",343:"<=",344:"==",345:"!=",346:"+",347:"-",348:"*",349:"/",352:"and",353:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,4],[81,2],[85,1],[85,1],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[93,1],[93,3],[97,1],[97,1],[96,2],[94,1],[94,2],[102,1],[102,2],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[110,3],[32,0],[32,3],[104,6],[117,2],[117,3],[105,6],[121,2],[121,3],[123,2],[50,0],[50,2],[124,1],[126,0],[126,1],[106,6],[128,2],[128,3],[130,6],[130,10],[130,7],[130,7],[130,9],[131,1],[131,1],[147,1],[149,1],[149,1],[150,2],[150,3],[150,1],[150,2],[150,1],[153,2],[134,5],[154,2],[154,3],[159,3],[159,4],[157,2],[161,2],[163,1],[163,4],[107,3],[107,3],[108,3],[108,6],[169,2],[169,3],[168,1],[168,3],[171,1],[171,1],[109,3],[109,4],[109,6],[175,1],[175,1],[112,6],[183,6],[183,6],[183,6],[181,1],[181,2],[185,1],[185,2],[191,7],[191,6],[111,6],[197,1],[197,2],[199,6],[200,3],[202,0],[202,1],[205,3],[205,6],[208,2],[208,3],[207,1],[207,5],[203,1],[203,2],[212,1],[212,1],[215,1],[215,2],[213,4],[213,3],[221,1],[221,2],[221,4],[220,6],[220,7],[229,4],[225,1],[225,2],[227,4],[227,4],[227,7],[232,1],[232,1],[233,1],[233,1],[231,2],[231,5],[236,2],[237,2],[237,2],[237,5],[204,0],[204,2],[204,7],[245,4],[245,4],[243,2],[243,3],[246,6],[249,5],[251,4],[214,3],[255,6],[261,1],[261,3],[14,7],[264,3],[268,1],[268,2],[267,2],[267,8],[13,7],[271,9],[273,3],[273,4],[274,0],[274,1],[281,3],[266,0],[266,1],[218,1],[218,1],[218,1],[218,1],[286,2],[286,1],[286,1],[286,1],[289,1],[289,1],[289,2],[219,1],[219,1],[275,0],[275,4],[275,7],[276,0],[276,3],[277,0],[277,4],[277,7],[299,2],[299,3],[301,1],[301,2],[301,2],[301,2],[301,2],[298,1],[298,2],[306,2],[306,3],[278,0],[278,3],[278,3],[279,0],[279,3],[279,3],[125,4],[239,1],[239,2],[210,1],[119,1],[119,1],[79,4],[313,1],[313,2],[315,2],[315,3],[314,1],[314,1],[88,1],[88,1],[88,1],[90,4],[241,1],[241,2],[319,2],[319,3],[319,1],[312,1],[312,1],[312,2],[312,1],[152,1],[152,1],[152,1],[294,2],[294,3],[293,1],[293,2],[321,2],[321,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[178,2],[178,3],[330,3],[330,2],[330,3],[331,0],[329,1],[329,2],[332,2],[332,3],[179,2],[179,3],[156,3],[98,1],[98,2],[335,2],[335,3],[259,1],[259,1],[158,1],[158,1],[158,1],[336,1],[336,1],[336,3],[316,2],[316,3],[316,3],[316,4],[316,4],[318,3],[318,4],[318,4],[317,3],[317,3],[317,3],[317,3],[317,3],[317,3],[317,3],[317,4],[317,3],[317,3],[317,3],[317,3],[92,2],[350,2],[351,1],[351,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[95,0],[95,1],[118,0],[118,1],[122,0],[122,1],[129,0],[129,1],[132,0],[132,1],[133,0],[133,1],[135,0],[135,1],[137,0],[137,1],[138,0],[138,1],[140,0],[140,1],[141,0],[141,1],[143,0],[143,1],[144,0],[144,1],[170,0],[170,1],[172,0],[172,1],[176,0],[176,1],[182,0],[182,1],[186,0],[186,1],[188,0],[188,1],[190,0],[190,1],[193,0],[193,1],[195,0],[195,1],[198,0],[198,1],[201,0],[201,1],[209,0],[209,1],[226,0],[226,1],[228,0],[228,1],[244,0],[244,1],[265,0],[265,1],[269,0],[269,1],[272,0],[272,1],[295,0],[295,1],[300,0],[300,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 107: case 119: case 140: case 150: case 180: case 218: case 263: case 309:
this.$ = [ $$[$0-1] ];
break;
case 31: case 108: case 120: case 151: case 181: case 219: case 264: case 310:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 89: case 90: case 138: case 228: case 335:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 91: case 112: case 173: case 334: case 336:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 165: case 167: case 184: case 198: case 229: case 270: case 272: case 287: case 289: case 299: case 311: case 313: case 340: case 342:
this.$ = [ $$[$0] ];
break;
case 72: case 166: case 168: case 185: case 199: case 230: case 271: case 273: case 288: case 290: case 300: case 314: case 341: case 343:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 75:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 76:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 77:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 78:
this.$ = [$$[$0]];
break;
case 79:
this.$ = state.normalizeValidator($$[$0]);
break;
case 80:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 82:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 83:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 85:
this.$ = [ $$[$0], {} ];
break;
case 86:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 93:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 103:
this.$ = { code: $$[$0-1] };
break;
case 105:
this.$ = { comment: $$[$0-1] };
break;
case 106:
this.$ = { features: $$[$0-2] };
break;
case 109:
this.$ = { fields: $$[$0-2] };
break;
case 110:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 111:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 114:
this.$ = { comment: $$[$0] };
break;
case 118:
this.$ = { associations: $$[$0-2] };
break;
case 121:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 122:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 123: case 124:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 125:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 131:
this.$ = { by: $$[$0] }    ;
break;
case 132:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 133:
this.$ = { remoteField: $$[$0] }     ;
break;
case 134:
this.$ = { remoteField: $$[$0] }      ;
break;
case 135:
this.$ = { with: $$[$0] };
break;
case 136:
this.$ = { with: $$[$0] }    ;
break;
case 137:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 139:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 141:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 142:
this.$ = $$[$0];;
break;
case 143:
this.$ = { srcField: $$[$0] };
break;
case 144:
this.$ = { optional: true };
break;
case 145:
this.$ = { default: $$[$0-1] };
break;
case 146: case 147:
this.$ = { key: $$[$0-1] };
break;
case 148:
this.$ = { indexes: [$$[$0-1]] };
break;
case 149:
this.$ = { indexes: $$[$0-2] };
break;
case 153:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 154: case 155:
this.$ = { fields: $$[$0] };
break;
case 156:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 157:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 158:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 161:
this.$ = { triggers: $$[$0-2] };
break;
case 162:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 163:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 164:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 169:
this.$ = { condition: $$[$0-5], do: $$[$0-2] };
break;
case 170:
this.$ = { do: $$[$0-2] };
break;
case 171:
this.$ = { interfaces: $$[$0-2] };
break;
case 172:
this.$ = Object.assign({}, $$[$0]);
break;
case 174:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 175:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 178:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 179:
this.$ = { accept: $$[$0-2] };
break;
case 183:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 190:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 191:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 195:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 196:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 197:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 200: case 201: case 231: case 328: case 338: case 339: case 351:
this.$ = $$[$0-1];
break;
case 202: case 208:
this.$ = $$[$0-2];
break;
case 209:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 210:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 211:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 212:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 214:
 this.$ = { return: $$[$0-1] }; 
break;
case 215:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 216: case 217:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 220:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 221:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 222:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 223:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 224:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 225:
this.$ = { entity: $$[$0] }     ;
break;
case 226:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 227:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 232:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 233:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 234:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 235:
this.$ = { dataset: $$[$0] };
break;
case 236:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 239:
this.$ = { condition: $$[$0-1] };
break;
case 256:
this.$ = { groupBy: $$[$0-1] };
break;
case 257:
this.$ = { groupBy: $$[$0-2] };
break;
case 259:
this.$ = { having: $$[$0-1] };
break;
case 261:
this.$ = { orderBy: $$[$0-1] };
break;
case 262:
this.$ = { orderBy: $$[$0-2] };
break;
case 265:
this.$ = { field: $$[$0], ascend: true };
break;
case 266: case 267:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 268: case 269:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 275: case 276:
this.$ = { offset: $$[$0-1] };
break;
case 278: case 279:
this.$ = { limit: $$[$0-1] };
break;
case 280:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 282:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 286: case 296:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 292:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 297:
this.$ = [ $$[$0] ]    ;
break;
case 298:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 301: case 337:
this.$ = [];
break;
case 304:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 312:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 327:
this.$ = {}    ;
break;
case 329: case 331:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 330:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 345:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 352:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 353:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 354:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 355:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 356:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 357:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 358:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 359:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 360:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 361:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 368:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 369:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 373:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 374:
this.$ = { operator: 'and' };
break;
case 375:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,263:$V5,270:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,263:$V5,270:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,115:$V8,322:$V9},{17:[1,30],23:29,26:31,322:$V9},{16:34,17:[1,33],26:26,44:32,115:$V8,322:$V9},{16:35,26:26,115:$V8,322:$V9},{17:[1,36]},{16:37,26:26,115:$V8,322:$V9},{16:38,26:26,115:$V8,322:$V9},{17:[2,85],97:39,99:[1,40],100:[1,41]},{16:42,26:26,115:$V8,322:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,316]),o([17,20,27,51,82,84,86,87,89,99,100,114,116,142,151,155,160,162,173,177,216,217,222,230,238,242,253,262,280,288,290,291,302,303,304,305,307,322,327,328,333,334,337,338,340,342,343,344,345,346,347,348,349,352,353],[2,317]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,83],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,98:56,115:$V8,322:$V9},o($Vd,[2,87]),o($Vd,[2,88]),o([17,99,100],[2,89]),o($V7,[2,13]),{16:59,19:58,26:26,115:$V8,322:$V9},o($V7,[2,17]),{23:61,24:60,26:31,322:$V9},{28:62,91:$Ve,115:$Vf,178:66,179:67,309:$Vg,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,115:$V8,322:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,322:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,115:$V8,322:$V9},{18:[1,107]},o($VH,$VI,{94:108,32:109,114:$VJ}),{18:[1,111]},{18:[1,112]},{17:[2,86]},o($VK,[2,340],{335:113,307:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,318]),o($VM,[2,319]),o($VM,[2,320]),o($VM,[2,321]),o($VM,[2,322]),o($VM,[2,323]),o($VM,[2,324]),o($VM,[2,325]),o($VM,[2,326]),{16:122,26:123,115:$V8,309:$VN,322:$V9,328:[1,119],329:120,330:121},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:127,241:126,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,334:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{49:136,80:137,81:138,82:$VR,84:$VS,86:$VT}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,322:$V9}),o($VU,[2,67],{87:$VV}),o($VU,[2,68]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o([20,37,40],$VI,{30:144,32:145,114:$VJ}),{20:[1,146]},{20:[2,90],102:147,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:$VW,116:$VX,120:$VY,127:$VZ,166:$V_,167:$V$,174:$V01,180:$V11,196:$V21},{115:[1,167]},{100:[1,170],271:168,273:169},{100:[1,172],264:171},o($VK,[2,341]),{16:173,26:26,115:$V8,322:$V9},o($V7,[2,376],{21:174,17:[1,175]}),{16:59,19:176,20:[2,15],26:26,115:$V8,322:$V9},o($V7,[2,378],{25:177,17:[1,178]}),{20:[2,20],23:61,24:179,26:31,322:$V9},o($VM,[2,327]),{328:[1,180]},{307:$V31,328:[2,333],332:181},{51:[1,183]},o($V41,[2,332],{331:184,51:$Vb}),{51:[1,185]},o($V51,[2,337]),{334:[1,186]},o($V61,[2,297],{319:187,307:$V71}),o($V81,[2,281],{81:138,80:189,82:$VR,84:$VS,86:$VT}),o($VM,[2,302]),o($VM,[2,303],{320:[1,190]}),o($VM,[2,305]),o($VM,[2,291]),o($VM,$V91,{87:$Va1}),o($V7,[2,388],{46:192,17:[1,193]}),{16:34,20:[2,35],26:26,44:75,45:194,115:$V8,322:$V9},{17:$Vb1,50:195,114:$Vc1},o($VP,[2,70]),o($V81,[2,71],{81:138,80:197,82:$VR,84:$VS,86:$VT}),{26:199,83:198,87:$Vd1,90:200,91:$Ve1,322:$V9},{26:205,85:203,90:204,322:$V9},{26:205,85:207,87:[1,206],90:204,322:$V9},o($Vn,[2,66]),{26:210,28:132,91:$Ve,115:$Vf,178:66,179:67,309:$Vg,313:208,314:209,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{20:[1,211]},o($Vf1,[2,382],{33:212,36:213,37:[1,214]}),o($V7,[2,390],{95:215,17:[1,216]}),{20:[2,91]},{20:[2,92],102:217,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:$VW,116:$VX,120:$VY,127:$VZ,166:$V_,167:$V$,174:$V01,180:$V11,196:$V21},o($VH,[2,94]),o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),{17:[1,218]},{17:[1,219]},{17:[1,220]},{16:221,26:26,115:$V8,156:222,322:$V9,333:$Vg1},{16:227,17:[1,225],26:26,115:$V8,156:228,168:224,171:226,322:$V9,333:$Vg1},{16:230,26:26,115:$V8,175:229,176:231,177:[2,420],178:232,179:233,322:$V9,327:$Vl,333:$Vm},{16:234,26:26,115:$V8,322:$V9},{17:[1,235]},{17:[1,236]},{17:[1,237]},{20:[1,238]},{17:[1,239]},o($Vd,$Vh1,{266:240,218:241,282:$Vi1,283:$Vj1,284:$Vk1,285:$Vl1}),{20:[1,246]},o($Vd,$Vh1,{218:241,266:247,282:$Vi1,283:$Vj1,284:$Vk1,285:$Vl1}),o($VK,[2,342],{335:248,307:$VL}),o($V7,[2,14]),o($V7,[2,377]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,379]),{20:[2,21]},o($VM,[2,328]),{328:[2,334]},{16:122,26:123,115:$V8,309:$VN,322:$V9,330:249},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:250,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V41,[2,330]),{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:251,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V51,[2,338]),o($V61,[2,298]),o($V61,[2,301],{178:66,179:67,312:128,314:129,90:131,28:132,26:133,239:252,91:$Ve,115:$Vf,309:$Vg,310:$VO,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm}),o($VM,[2,282]),o($VM,[2,304]),{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:127,241:253,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,33]),o($V7,[2,389]),{20:[2,36]},{17:[2,34]},{115:[1,254]},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,79],{87:$Va1}),o($VM,[2,80]),o($VM,[2,81]),{26:133,28:132,87:$Vm1,90:131,91:$Ve,92:255,115:$Vf,178:66,179:67,239:260,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:256,338:$Vn1},o($VM,[2,74]),o($VM,[2,77]),o($VM,[2,78],{87:$Va1}),{26:133,28:132,59:$Vo1,88:262,90:131,91:$Ve,115:$Vf,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:263,317:264,318:265,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,338:$Vn1,341:$Vp1},o($VM,[2,76]),{89:[1,269]},{89:[2,287],307:$Vq1,315:270},o([89,307],$V91),o($V7,[2,380],{31:272,17:[1,273]}),{20:[2,24],34:274,35:275,40:[1,276]},o($Vf1,[2,383]),{17:[1,277]},o($V7,[2,84]),o($V7,[2,391]),{20:[2,93]},{18:[1,278]},{18:[1,279]},{18:[1,280]},{17:[1,281]},{17:[1,282]},{16:57,26:26,98:283,115:$V8,322:$V9},{17:[1,284]},{18:[1,285]},{17:[2,152],100:[1,287],172:286,173:[2,418]},o($Vr1,[2,154]),o($Vr1,[2,155]),{17:[1,288]},{175:289,177:[2,421],178:232,179:233,327:$Vl,333:$Vm},{177:[1,290]},{17:[2,159]},{17:[2,160]},{17:[1,291]},{18:[1,292]},{18:[1,293]},o([20,37,40,113,116,120,127,166,167,174,180,196],[2,105]),o($V7,[2,450],{272:294,17:[1,295]}),o([20,116,142,160,222,288,290,291,292,296,297,308,311],$Vs1,{202:296,205:297,206:$Vt1}),{16:299,26:26,115:$V8,322:$V9},o($Vd,[2,241]),o($Vd,[2,242]),o($Vd,[2,243]),o($Vd,[2,244]),o($Vd,[2,245]),o($V7,[2,446],{265:300,17:[1,301]}),{16:304,26:26,115:$V8,261:303,267:302,322:$V9},o($VK,[2,343]),{307:$V31,328:[2,335],332:305},o($V41,[2,329]),o($V41,[2,331]),o($V61,[2,299],{319:306,307:$V71}),{89:[1,307]},{17:[2,114]},{89:[1,308]},{350:309,351:310,352:$Vu1,353:$Vv1},o($Vw1,[2,349]),o($Vw1,[2,350]),{26:133,28:132,87:$Vm1,90:131,91:$Ve,115:$Vf,178:66,179:67,239:260,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:313,338:$Vn1},{100:$Vx1,177:$Vy1,303:$Vz1,305:$VA1,337:$VB1,338:$VC1,342:$VD1,343:$VE1,344:$VF1,345:$VG1,346:$VH1,347:$VI1,348:$VJ1,349:$VK1},{87:[1,328]},{89:[1,329]},{89:[2,293]},{89:[2,294]},{89:[2,295]},{100:$Vx1,177:$Vy1,303:$Vz1,305:$VA1,337:$VB1,338:$VC1,340:[1,330],342:$VD1,343:$VE1,344:$VF1,345:$VG1,346:$VH1,347:$VI1,348:$VJ1,349:$VK1},{179:331,333:$Vm},{179:332,333:$Vm},o($VU,[2,286]),{89:[2,288]},{26:210,28:132,91:$Ve,115:$Vf,178:66,179:67,309:$Vg,314:333,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,22]),o($V7,[2,381]),{20:[2,23]},{20:[2,25]},{17:[1,334]},{18:[1,335]},{26:338,79:339,117:336,119:337,322:$V9},{16:344,26:26,115:$V8,121:340,123:341,124:342,125:343,322:$V9},{128:345,130:346,131:347,136:$VL1,139:$VM1,145:$VN1,146:$VO1},o($VH,[2,146]),o($VH,[2,147]),{334:[1,352]},o($VH,[2,148]),{16:227,26:26,115:$V8,156:228,168:354,169:353,171:226,322:$V9,333:$Vg1},{173:[1,355]},{173:[2,419]},o($VH,[2,156]),{17:[1,356]},{16:357,26:26,115:$V8,322:$V9},o($VH,[2,103]),{16:360,26:26,115:$V8,197:358,199:359,322:$V9},{181:361,183:362,184:$VP1,187:$VQ1,189:$VR1},o($V7,[2,233]),o($V7,[2,451]),o($VS1,[2,237],{274:366,281:367,219:368,289:369,286:370,116:$VT1,142:$VU1,160:$VV1,222:[1,371],288:$VW1,290:$VX1,291:$VY1}),o($VZ1,[2,177]),{16:381,17:[1,379],26:26,115:$V8,125:382,207:378,210:380,322:$V9},{17:[2,235],280:[1,383]},o($V7,[2,227]),o($V7,[2,447]),{20:[2,228]},{17:[1,384],116:[1,385]},o($V_1,[2,225],{262:[1,386]}),{328:[2,336]},o($V61,[2,300]),o($VM,[2,296]),o($VM,[2,82]),o($V$1,[2,372]),{26:133,28:132,87:$Vm1,90:131,91:$Ve,115:$Vf,178:66,179:67,239:260,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:387,338:$Vn1},o($V02,[2,374]),o($V02,[2,375]),{89:[1,388]},o($Vw1,[2,352]),{177:[1,390],337:[1,389]},{338:[1,392],339:[1,391]},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:393,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:394,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:395,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:396,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:397,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:398,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:399,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:400,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:401,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:402,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:403,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,87:$Vm1,90:131,91:$Ve,115:$Vf,178:66,179:67,239:260,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:404,338:$Vn1},o($VM,[2,75]),{26:199,83:405,87:$Vd1,90:200,91:$Ve1,322:$V9},{340:[1,406]},{340:[1,407]},{89:[2,289],307:$Vq1,315:408},{18:[1,409]},{16:411,26:26,38:410,115:$V8,322:$V9},{20:[1,412]},{17:[1,413]},{17:[2,284],87:$VV},{17:[2,285]},{20:[1,414]},{17:[1,415]},{17:$Vb1,50:416,114:$Vc1},o($VP,[2,115]),o($VU,$V12,{126:417,47:418,51:$Vc}),{20:[1,419]},{17:[1,420]},{16:421,17:[1,422],26:26,115:$V8,322:$V9},{16:423,26:26,115:$V8,322:$V9},{16:424,26:26,115:$V8,322:$V9},o($V22,[2,126]),o($V22,[2,127]),o([17,100,114,162,173,322],[2,339]),{20:[1,425]},{17:[1,426]},{17:[2,153]},o($VH,[2,157]),{175:427,178:232,179:233,327:$Vl,333:$Vm},{20:[1,428]},{16:360,20:[2,172],26:26,115:$V8,197:429,199:359,322:$V9},{17:[1,430]},{20:[1,431]},{20:[2,165],181:432,183:362,184:$VP1,187:$VQ1,189:$VR1},{17:[1,433]},{17:[1,434]},{17:[1,435]},o($V32,[2,255],{275:436,292:[1,437]}),o($VS1,[2,238]),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:438,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},o($V42,[2,253]),o($V42,[2,254]),o($V42,$V52),o($V42,[2,251]),{222:[1,442]},{287:[1,443]},o($V42,[2,247]),o($V42,[2,248]),o($V42,[2,249]),{17:[1,444]},{18:[1,445]},{17:[2,182]},o([17,82,84,86,322],$V12,{126:417,47:418,51:[1,446]}),{17:[2,283]},{17:[2,236]},o($V62,[2,231]),{51:[1,447]},{179:448,333:$Vm},o($V$1,[2,373]),o($Vw1,[2,351]),o($Vw1,[2,353]),{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:449,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vw1,[2,354]),{339:[1,450]},o($Vw1,[2,360]),o($Vw1,[2,361]),o($Vw1,[2,362]),o($Vw1,[2,363]),o($Vw1,[2,364]),o($Vw1,[2,365]),o($Vw1,[2,366]),o($Vw1,[2,368]),o($Vw1,[2,369]),o($Vw1,[2,370]),o($Vw1,[2,371]),{89:[1,451]},o($V$1,[2,357]),{26:199,83:452,87:$Vd1,90:200,91:$Ve1,322:$V9},{26:199,83:453,87:$Vd1,90:200,91:$Ve1,322:$V9},{89:[2,290]},{16:455,26:26,41:454,115:$V8,322:$V9},{20:[1,456]},{17:[1,457]},o($VH,[2,392],{118:458,17:[1,459]}),{20:[2,107],26:338,79:339,117:460,119:337,322:$V9},o($VH,[2,394],{122:461,17:[1,462]}),{16:344,20:[2,110],26:26,115:$V8,121:463,123:341,124:342,125:343,322:$V9},{17:[2,112]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:464,322:$V9}),o($VU,[2,117]),o($VH,[2,396],{129:465,17:[1,466]}),{20:[2,119],128:467,130:346,131:347,136:$VL1,139:$VM1,145:$VN1,146:$VO1},o($V72,[2,398],{132:468,150:469,154:471,157:473,116:$V82,151:[1,470],155:[1,472]}),{18:[1,475]},o($V92,[2,404],{137:476,153:477,116:$Va2}),o($V92,[2,408],{140:479,153:481,116:$Va2,142:[1,480]}),o($VH,[2,416],{170:482,17:[1,483]}),{16:227,20:[2,150],26:26,115:$V8,156:228,168:354,169:484,171:226,322:$V9,333:$Vg1},{17:[1,485]},o($VH,[2,434],{198:486,17:[1,487]}),{20:[2,173]},{18:[1,488]},o($VH,[2,422],{182:489,17:[1,490]}),{20:[2,166]},{18:[1,491]},{18:[1,492]},{18:[1,493]},o($Vb2,[2,258],{276:494,296:[1,495]}),{222:[1,496]},{17:[1,497]},o($Vc2,[2,346],{350:309,351:310,352:$Vu1,353:$Vv1}),o($Vc2,[2,347]),o($Vc2,[2,348]),o($V42,[2,252]),o($V42,[2,246]),o($VZ1,[2,178]),{16:381,26:26,115:$V8,125:382,207:499,208:498,210:380,322:$V9},{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,115:$V8,211:[1,500],322:$V9},{17:[1,501]},o($V_1,[2,226]),o($Vw1,[2,367]),o($Vw1,[2,355]),o($Vw1,[2,356]),o($V$1,[2,358]),o($V$1,[2,359]),{20:[1,502]},{17:[1,503]},o($Vf1,[2,384],{39:504,17:[1,505]}),{16:411,20:[2,27],26:26,38:506,115:$V8,322:$V9},o($VH,[2,106]),o($VH,[2,393]),{20:[2,108]},o($VH,[2,109]),o($VH,[2,395]),{20:[2,111]},o($VP,$VQ,{80:137,81:138,49:507,82:$VR,84:$VS,86:$VT}),o($VH,[2,118]),o($VH,[2,397]),{20:[2,120]},o($Vd2,[2,400],{133:508,161:509,162:$Ve2}),o($V72,[2,399]),{26:512,115:$Vf2,152:511,211:$Vg2,322:$V9},o($V72,[2,133]),{16:516,26:26,115:$V8,156:515,322:$V9,333:$Vg1},o($V72,[2,135]),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:517,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{16:518,26:26,115:$V8,322:$V9},o($VU,[2,406],{138:519,161:520,162:$Ve2}),o($V92,[2,405]),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:521,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},o($VU,[2,410],{141:522,161:523,162:$Ve2}),{16:524,26:26,115:$V8,322:$V9},o($V92,[2,409]),o($VH,[2,149]),o($VH,[2,417]),{20:[2,151]},o($VH,[2,158]),o($VH,[2,171]),o($VH,[2,435]),o([216,217,253],$Vs1,{205:297,200:525,202:526,206:$Vt1}),o($VH,[2,161]),o($VH,[2,423]),{160:$Vh2,185:527,191:528,194:$Vi2},{160:$Vh2,185:531,191:528,194:$Vi2},{160:$Vh2,185:532,191:528,194:$Vi2},o($Vj2,[2,260],{277:533,297:[1,534]}),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:535,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{17:[1,537],26:512,115:$Vf2,152:538,211:$Vg2,293:536,322:$V9},o($VS1,[2,239]),{20:[1,539]},{17:[1,540]},o([17,82,84,86],$Vo,{77:77,78:78,26:79,79:80,48:541,322:$V9}),{18:[1,542]},{17:[1,544],20:[2,386],42:543},{16:455,20:[2,30],26:26,41:545,115:$V8,322:$V9},o($Vf1,[2,26]),o($Vf1,[2,385]),{20:[2,28]},o($VP,[2,280]),o($VP,$Vo,{77:77,78:78,26:79,79:80,48:546,322:$V9}),o($Vd2,[2,401]),{16:547,26:26,115:$V8,322:$V9},o($V72,[2,131],{153:548,116:$Va2}),o($Vk2,[2,306]),o($Vk2,[2,307]),o($Vk2,[2,308]),o($V72,[2,134]),o($V72,[2,138],{157:549,116:$V82}),o($V72,[2,142]),{51:[1,551],134:550},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:552,322:$V9}),o($VU,[2,407]),o($V92,[2,136]),o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:553,322:$V9}),o($VU,[2,411]),o($V92,[2,412],{143:554,153:555,116:$Va2}),{20:[1,556]},{203:557,212:558,213:559,214:560,215:561,216:$Vl2,217:$Vm2,253:$Vn2},{20:[1,565]},{20:[2,167],160:$Vh2,185:566,191:528,194:$Vi2},{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:567,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{17:[1,568]},{20:[1,569]},{20:[1,570]},o($Vo2,[2,274],{278:571,308:[1,572]}),{222:[1,573]},{17:[1,574]},{17:[1,575]},{18:[1,576]},{17:[2,311],307:$Vp2,321:577},o($VZ1,[2,438],{209:579,17:[1,580]}),{16:381,20:[2,180],26:26,115:$V8,125:382,207:499,208:581,210:380,322:$V9},{17:$VQ,49:582,80:137,81:138,82:$VR,84:$VS,86:$VT},{16:304,26:26,115:$V8,261:303,267:584,268:583,322:$V9},{20:[2,29]},{20:[2,387]},{20:[2,31]},{17:$Vb1,50:585,114:$Vc1},o($VU,[2,143]),o($V72,[2,132]),o($V72,[2,139]),o($Vd2,[2,402],{135:586,161:587,162:$Ve2}),{17:[1,588]},o($VP,$VQ,{80:137,81:138,49:589,82:$VR,84:$VS,86:$VT}),o($VP,$VQ,{80:137,81:138,49:590,82:$VR,84:$VS,86:$VT}),o($VU,[2,414],{144:591,161:592,162:$Ve2}),o($V92,[2,413]),o($V62,[2,436],{201:593,17:[1,594]}),{20:[2,213],204:595,236:596,238:$Vq2},o($Vr2,[2,184],{212:558,213:559,214:560,215:561,203:598,216:$Vl2,217:$Vm2,253:$Vn2}),o($Vs2,[2,186]),o($Vs2,[2,187]),{16:599,26:26,115:$V8,322:$V9},{254:[1,600]},o($Vd,[2,188]),{218:601,282:$Vi1,283:$Vj1,284:$Vk1,285:$Vl1},o($Vt2,[2,424],{186:602,17:[1,603]}),{20:[2,168]},{17:[1,604]},{18:[1,605]},o($Vt2,[2,426],{188:606,17:[1,607]}),o($Vt2,[2,428],{190:608,17:[1,609]}),{20:[2,277],279:610,311:[1,611]},{309:[1,612],310:[1,613]},{17:[1,615],26:512,115:$Vf2,152:617,211:$Vg2,298:614,301:616,322:$V9},o($Vb2,[2,259]),o($V32,[2,256]),{26:512,115:$Vf2,152:619,211:$Vg2,294:618,322:$V9},{17:[2,312]},{26:512,115:$Vf2,152:620,211:$Vg2,322:$V9},o($VZ1,[2,179]),o($VZ1,[2,439]),{20:[2,181]},{17:[2,183]},{20:[1,621]},{16:304,20:[2,229],26:26,115:$V8,261:303,267:584,268:622,322:$V9},{17:[2,121]},o($VP,$Vo,{77:77,78:78,26:79,79:80,48:623,322:$V9}),o($Vd2,[2,403]),{18:[1,624]},{17:$Vb1,50:625,114:$Vc1},{17:$Vb1,50:626,114:$Vc1},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:627,322:$V9}),o($VU,[2,415]),o($V62,[2,174]),o($V62,[2,437]),{20:[2,175]},{17:[1,628],242:[1,629]},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:630,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vr2,[2,185]),{51:[1,635],116:$VT1,142:$VU1,160:$VV1,219:631,220:632,221:633,222:[1,634],286:370,288:$VW1,289:369,290:$VX1,291:$VY1},{17:[1,636]},o($Vd,[2,189]),o($Vt2,[2,162]),o($Vt2,[2,425]),{18:[1,637]},{192:[1,638]},o($Vt2,[2,163]),o($Vt2,[2,427]),o($Vt2,[2,164]),o($Vt2,[2,429]),{20:[2,234]},{309:[1,639],310:[1,640]},{17:[1,641]},{17:[1,642]},{17:[1,643]},{18:[1,644]},{17:[2,270],306:645,307:$Vu2},o($Vv2,[2,265],{302:[1,647],303:[1,648],304:[1,649],305:[1,650]}),{20:[1,651]},{17:[1,652]},{17:[2,313],307:$Vp2,321:653},o($V62,[2,448],{269:654,17:[1,655]}),{20:[2,230]},{17:$Vb1,50:656,114:$Vc1},{159:657,160:$Vw2},{17:[2,123]},{17:[2,124]},o($VP,$VQ,{80:137,81:138,49:659,82:$VR,84:$VS,86:$VT}),{20:[2,214]},{17:[1,660]},o([17,242],[2,209]),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:661,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},o($Vs2,[2,191]),{17:[1,662]},o($V42,$V52,{223:[1,663]}),{17:[2,192]},o($Vs2,[2,223]),{192:[1,664]},{20:[1,665]},{17:[1,666]},{17:[1,667]},o($Vo2,[2,275]),o($Vo2,[2,276]),o($Vj2,[2,261]),{26:512,115:$Vf2,152:617,211:$Vg2,299:668,301:669,322:$V9},{17:[2,271]},{26:512,115:$Vf2,152:617,211:$Vg2,301:670,322:$V9},o($Vv2,[2,266]),o($Vv2,[2,267]),o($Vv2,[2,268]),o($Vv2,[2,269]),o($V32,[2,452],{295:671,17:[1,672]}),{20:[2,309],26:512,115:$Vf2,152:619,211:$Vg2,294:673,322:$V9},{17:[2,314]},o($V62,[2,232]),o($V62,[2,449]),{17:[1,674]},{20:[1,675]},{154:676,155:[1,677]},{17:$Vb1,50:678,114:$Vc1},{18:[1,679]},o($Vs2,[2,190]),{18:[1,680]},{17:[2,193],162:[1,681]},{20:[1,682]},o($Vx2,[2,432],{195:683,17:[1,684]}),{20:[2,278]},{20:[2,279]},{20:[1,685]},{17:[1,686]},{17:[2,272],306:687,307:$Vu2},o($V32,[2,257]),o($V32,[2,453]),{20:[2,310]},{20:[1,688]},o($V72,[2,137]),{17:[1,689]},{16:516,26:26,115:$V8,322:$V9},{17:[2,125]},{160:$Vy2,243:690,245:691},{160:$Vz2,225:693,229:694},{224:[1,696]},o($Vx2,[2,430],{193:697,17:[1,698]}),o($Vx2,[2,170]),o($Vx2,[2,433]),o($Vj2,[2,454],{300:699,17:[1,700]}),{20:[2,263],26:512,115:$Vf2,152:617,211:$Vg2,299:701,301:669,322:$V9},{17:[2,273]},{17:[2,122]},{20:[2,140],159:702,160:$Vw2},{20:[1,703]},{17:[1,704]},{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:705,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{20:[1,706],227:707,232:708,234:[1,709],235:[1,710]},o($VA2,[2,198],{229:694,225:711,160:$Vz2}),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:712,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{17:[2,194]},o($Vx2,[2,169]),o($Vx2,[2,431]),o($Vj2,[2,262]),o($Vj2,[2,455]),{20:[2,264]},{20:[2,141]},{17:[1,714],20:[2,444],244:713},{20:[2,218],160:$Vy2,243:715,245:691},{230:[1,716]},o($Vs2,[2,440],{226:717,17:[1,718]}),{20:[1,719]},{230:[1,720]},{230:[2,203]},{230:[2,204]},o($VA2,[2,199]),{230:[1,721]},{20:[2,215]},{20:[2,445]},{20:[2,219]},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,237:723,239:722,240:$VB2,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vs2,[2,195]),o($Vs2,[2,441]),o($Vs2,[2,442],{228:725,17:[1,726]}),{17:[1,729],26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:730,178:66,179:67,231:727,233:728,236:731,237:732,238:$Vq2,239:266,240:$VB2,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{17:[1,734],26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:730,178:66,179:67,231:733,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{17:[2,216]},{17:[2,217]},{26:736,115:[1,735],322:$V9},o($Vs2,[2,196]),o($Vs2,[2,443]),{17:[1,737]},{17:[1,738]},{18:[1,739]},{17:[1,740]},{17:[2,205]},{17:[2,206]},o([20,160,234,235],[2,197]),{18:[1,741]},{17:[2,210]},{17:[2,211],87:[1,742]},{20:[2,200]},{20:[2,201]},{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:744,178:66,179:67,233:743,236:731,237:732,238:$Vq2,239:266,240:$VB2,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},o($VC2,[2,207]),{26:133,28:132,59:$Vo1,87:$Vm1,90:131,91:$Ve,92:440,115:$Vf,158:744,178:66,179:67,239:266,309:$Vg,310:$VO,312:128,314:129,316:257,317:258,318:441,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:439,338:$Vn1,341:$Vp1},{26:133,28:132,90:131,91:$Ve,115:$Vf,178:66,179:67,239:127,241:745,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{17:[1,746]},{17:[1,747]},{89:[1,748]},{20:[1,749]},{20:[1,750]},{17:[2,212]},{20:[2,202]},o($VC2,[2,208])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,86],62:[2,19],147:[2,91],176:[2,16],179:[2,21],181:[2,334],194:[2,36],195:[2,34],217:[2,93],232:[2,159],233:[2,160],254:[2,114],263:[2,293],264:[2,294],265:[2,295],270:[2,288],274:[2,23],275:[2,25],287:[2,419],302:[2,228],305:[2,336],339:[2,285],355:[2,153],380:[2,182],382:[2,283],383:[2,236],408:[2,290],416:[2,112],429:[2,173],432:[2,166],460:[2,108],463:[2,111],467:[2,120],484:[2,151],506:[2,28],543:[2,29],544:[2,387],545:[2,31],566:[2,168],577:[2,312],581:[2,181],582:[2,183],585:[2,121],595:[2,175],610:[2,234],622:[2,230],625:[2,123],626:[2,124],628:[2,214],635:[2,192],645:[2,271],653:[2,314],666:[2,278],667:[2,279],673:[2,310],678:[2,125],687:[2,273],688:[2,122],696:[2,194],701:[2,264],702:[2,141],709:[2,203],710:[2,204],713:[2,215],714:[2,445],715:[2,219],722:[2,216],723:[2,217],731:[2,205],732:[2,206],735:[2,210],737:[2,200],738:[2,201],748:[2,212],749:[2,202]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //const TOP_LEVEL_KEYWORDS = 

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'code', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),        

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',        
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 325;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 115;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 115;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 115;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 91;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 323;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 309;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 309;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 211;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 326;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 310;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 324;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 322;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = geml;
exports.Parser = geml.Parser;
exports.parse = function () { return geml.parse.apply(geml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}