/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var geml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,101,265,272],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,99,100,116,118,144,153,157,162,164,175,179,224,264,282,290,292,293,309,324,329,335,336],$Vb=[2,318],$Vc=[1,51],$Vd=[117,324],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,82,84,86,116],$Vo=[2,63],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,114,115,118,122,129,168,169,176,182,198],$VI=[2,107],$VJ=[1,110],$VK=[17,336],$VL=[1,114],$VM=[17,20,82,84,86,89,100,116,164,179,218,219,232,240,244,255,305,307,309,324,330,336,339,340,342,344,345,346,347,348,349,350,351,354,355],$VN=[1,124],$VO=[1,130],$VP=[17,116],$VQ=[2,69],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,82,84,86,116,324],$VV=[1,143],$VW=[1,167],$VX=[1,165],$VY=[1,159],$VZ=[1,160],$V_=[1,161],$V$=[1,162],$V01=[1,163],$V11=[1,164],$V21=[1,168],$V31=[1,166],$V41=[1,184],$V51=[309,330],$V61=[17,20,82,84,86,89,100,116,118,164,179,218,219,232,240,244,255,305,307,309,324,330,336,339,340,342,344,345,346,347,348,349,350,351,354,355],$V71=[89,336],$V81=[1,190],$V91=[17,20,89,100,116,164,179,218,219,232,240,244,255,305,307,309,324,330,336,339,340,342,344,345,346,347,348,349,350,351,354,355],$Va1=[2,295],$Vb1=[1,193],$Vc1=[2,116],$Vd1=[1,198],$Ve1=[1,204],$Vf1=[1,203],$Vg1=[20,40],$Vh1=[1,226],$Vi1=[2,243],$Vj1=[1,246],$Vk1=[1,247],$Vl1=[1,248],$Vm1=[1,249],$Vn1=[1,263],$Vo1=[1,265],$Vp1=[1,271],$Vq1=[1,272],$Vr1=[1,275],$Vs1=[17,100,175],$Vt1=[2,179],$Vu1=[1,303],$Vv1=[1,316],$Vw1=[1,317],$Vx1=[17,20,82,84,86,89,116,164,218,219,232,240,255,324,354,355],$Vy1=[1,321],$Vz1=[1,328],$VA1=[1,323],$VB1=[1,322],$VC1=[1,319],$VD1=[1,320],$VE1=[1,324],$VF1=[1,325],$VG1=[1,326],$VH1=[1,327],$VI1=[1,329],$VJ1=[1,330],$VK1=[1,331],$VL1=[1,332],$VM1=[1,353],$VN1=[1,354],$VO1=[1,355],$VP1=[1,356],$VQ1=[1,368],$VR1=[1,369],$VS1=[1,370],$VT1=[20,294,298,299,310,313],$VU1=[1,382],$VV1=[1,379],$VW1=[1,381],$VX1=[1,380],$VY1=[1,377],$VZ1=[1,378],$V_1=[20,118,144,162,218,219,224,255,290,292,293,294,298,299,310,313],$V$1=[17,118],$V02=[17,20,82,84,86,89,116,164,218,219,232,240,255,324],$V12=[87,91,117,311,312,324,325,326,327,328,329,335,340],$V22=[2,119],$V32=[17,117,324],$V42=[20,298,299,310,313],$V52=[59,87,91,117,311,312,324,325,326,327,328,329,335,340,343],$V62=[2,253],$V72=[20,117,324],$V82=[17,116,164,324],$V92=[1,479],$Va2=[17,82,84,86,116,164,324],$Vb2=[1,483],$Vc2=[20,299,310,313],$Vd2=[17,20,82,84,86,116,164,218,219,232,240,255,324],$Ve2=[17,116,324],$Vf2=[1,515],$Vg2=[1,518],$Vh2=[1,519],$Vi2=[1,534],$Vj2=[1,535],$Vk2=[20,310,313],$Vl2=[17,116,118,164,304,305,306,307,309,324],$Vm2=[1,568],$Vn2=[1,569],$Vo2=[1,567],$Vp2=[20,313],$Vq2=[1,583],$Vr2=[1,602],$Vs2=[20,240],$Vt2=[20,218,219,240,255],$Vu2=[20,186,189,191],$Vv2=[1,651],$Vw2=[17,309],$Vx2=[1,663],$Vy2=[20,162,196],$Vz2=[1,697],$VA2=[1,700],$VB2=[20,236,237],$VC2=[1,729],$VD2=[17,20,162,236,237];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"identifier_or_general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"general_function_call":90,"REGEXP":91,"logical_expression":92,"entity_statement_header":93,"entity_statement_block":94,"entity_statement_option0":95,"entity_statement_header0":96,"entity_base_keywords":97,"identifier_or_string_list":98,"extends":99,"is":100,"entity":101,"entity_sub_items":102,"entity_sub_item":103,"with_features":104,"has_fields":105,"associations_statement":106,"key_statement":107,"index_statement":108,"data_statement":109,"code_statement":110,"interfaces_statement":111,"mixin_statement":112,"triggers_statement":113,"mixes":114,"code":115,"--":116,"STRING":117,"with":118,"with_features_block":119,"with_features_option0":120,"feature_inject":121,"has":122,"has_fields_block":123,"has_fields_option0":124,"field_item":125,"field_item_body":126,"modifiable_field":127,"type_base_or_not":128,"associations":129,"associations_block":130,"associations_statement_option0":131,"association_item":132,"association_type_referee":133,"association_item_option0":134,"association_item_option1":135,"association_cases_block":136,"association_item_option2":137,"belongsTo":138,"association_item_option3":139,"association_item_option4":140,"refersTo":141,"association_item_option5":142,"association_item_option6":143,"of":144,"association_item_option7":145,"association_item_option8":146,"hasOne":147,"hasMany":148,"reference_to_field":149,"on":150,"association_type_referer":151,"association_through":152,"connectedBy":153,"identifier_string_or_dotname":154,"association_extra_condition":155,"association_connection":156,"being":157,"array_of_identifier_or_string":158,"association_condition":159,"conditional_expression":160,"association_cases":161,"when":162,"association_as":163,"as":164,"association_qualifiers":165,"optional":166,"default":167,"key":168,"index":169,"index_item":170,"index_statement_block":171,"index_statement_option0":172,"index_item_body":173,"index_item_option0":174,"unique":175,"data":176,"data_records":177,"data_statement_option0":178,"in":179,"inline_object":180,"inline_array":181,"triggers":182,"triggers_statement_block":183,"triggers_statement_option0":184,"triggers_operation":185,"onCreate":186,"triggers_operation_block":187,"triggers_operation_option0":188,"onCreateOrUpdate":189,"triggers_operation_option1":190,"onDelete":191,"triggers_operation_option2":192,"triggers_operation_item":193,"triggers_result_block":194,"triggers_operation_item_option0":195,"always":196,"triggers_operation_item_option1":197,"interface":198,"interfaces_statement_block":199,"interfaces_statement_option0":200,"interface_definition":201,"interface_definition_body":202,"interface_definition_option0":203,"accept_or_not":204,"implementation":205,"return_or_not":206,"accept_statement":207,"accept":208,"accept_param":209,"accept_block":210,"accept_statement_option0":211,"modifiable_param":212,"DOTNAME":213,"operation":214,"find_one_operation":215,"coding_block":216,"find_one_keywords":217,"findOne":218,"find":219,"article_keyword":220,"selection_inline_keywords":221,"case_statement":222,"cases_keywords":223,"by":224,"cases":225,"below":226,"case_condition_block":227,"case_statement_option0":228,"otherwise_statement":229,"case_statement_option1":230,"case_condition_item":231,"=>":232,"condition_as_result_expression":233,"otherwise_keywords":234,"stop_controll_flow_expression":235,"otherwise":236,"else":237,"return_expression":238,"throw_error_expression":239,"return":240,"modifiable_value":241,"throw":242,"gfc_param_list":243,"unless":244,"return_condition_block":245,"return_or_not_option0":246,"return_condition_item":247,"update_operation":248,"update":249,"where_expr":250,"create_operation":251,"create":252,"delete_operation":253,"delete":254,"do":255,"javascript":256,"assign_operation":257,"set":258,"identifier_or_member_access":259,"<-":260,"value":261,"variable_modifier_or_not":262,"entity_fields_selections":263,"->":264,"dataset":265,"dataset_statement_block":266,"dataset_statement_option0":267,"article_keyword_or_not":268,"dataset_join_with_item":269,"dataset_join_with_block":270,"dataset_join_with_item_option0":271,"view":272,"view_statement_block":273,"view_statement_option0":274,"view_main_entity":275,"view_selection_or_not":276,"group_by_or_not":277,"having_or_not":278,"order_by_or_not":279,"skip_or_not":280,"limit_or_not":281,"list":282,"view_selection":283,"a":284,"an":285,"the":286,"one":287,"selection_attributive_keywords":288,"which":289,"where":290,"selection_keywords":291,"selectedBy":292,"selected":293,"group":294,"identifier_string_or_dotname_list":295,"identifier_string_or_dotname_block":296,"group_by_or_not_option0":297,"having":298,"order":299,"order_by_list":300,"order_by_block":301,"order_by_or_not_option0":302,"order_by_clause":303,"ascend":304,"<":305,"descend":306,">":307,"order_by_list0":308,",":309,"offset":310,"INTEGER":311,"REFERENCE":312,"limit":313,"gfc_param0":314,"nfc_param_list":315,"nfc_param":316,"nfc_param_list0":317,"unary_expression":318,"binary_expression":319,"boolean_expression":320,"gfc_param_list0":321,"?":322,"identifier_string_or_dotname_list0":323,"NAME":324,"FLOAT":325,"BOOL":326,"SCRIPT":327,"SYMBOL":328,"{":329,"}":330,"kv_pairs":331,"kv_pair_item":332,"non_exist":333,"kv_pairs0":334,"[":335,"]":336,"identifier_or_string_list0":337,"simple_expression":338,"exists":339,"not":340,"null":341,"~":342,"all":343,">=":344,"<=":345,"==":346,"!=":347,"+":348,"-":349,"*":350,"/":351,"logical_expression_right":352,"logical_operators":353,"and":354,"or":355,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",91:"REGEXP",99:"extends",100:"is",101:"entity",114:"mixes",115:"code",116:"--",117:"STRING",118:"with",122:"has",129:"associations",138:"belongsTo",141:"refersTo",144:"of",147:"hasOne",148:"hasMany",150:"on",153:"connectedBy",157:"being",162:"when",164:"as",166:"optional",167:"default",168:"key",169:"index",175:"unique",176:"data",179:"in",182:"triggers",186:"onCreate",189:"onCreateOrUpdate",191:"onDelete",194:"triggers_result_block",196:"always",198:"interface",208:"accept",213:"DOTNAME",218:"findOne",219:"find",224:"by",225:"cases",226:"below",232:"=>",236:"otherwise",237:"else",240:"return",242:"throw",244:"unless",249:"update",250:"where_expr",252:"create",254:"delete",255:"do",256:"javascript",258:"set",259:"identifier_or_member_access",260:"<-",262:"variable_modifier_or_not",264:"->",265:"dataset",272:"view",282:"list",284:"a",285:"an",286:"the",287:"one",289:"which",290:"where",292:"selectedBy",293:"selected",294:"group",298:"having",299:"order",304:"ascend",305:"<",306:"descend",307:">",309:",",310:"offset",311:"INTEGER",312:"REFERENCE",313:"limit",322:"?",324:"NAME",325:"FLOAT",326:"BOOL",327:"SCRIPT",328:"SYMBOL",329:"{",330:"}",335:"[",336:"]",339:"exists",340:"not",341:"null",342:"~",343:"all",344:">=",345:"<=",346:"==",347:"!=",348:"+",349:"-",350:"*",351:"/",354:"and",355:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,4],[81,2],[81,2],[85,1],[85,1],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[93,1],[93,3],[97,1],[97,1],[96,2],[94,1],[94,2],[102,1],[102,2],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[112,3],[110,3],[32,0],[32,3],[104,6],[119,2],[119,3],[105,6],[123,2],[123,3],[125,2],[50,0],[50,2],[126,1],[128,0],[128,1],[106,6],[130,2],[130,3],[132,6],[132,10],[132,7],[132,7],[132,9],[133,1],[133,1],[149,1],[151,1],[151,1],[152,2],[152,3],[152,1],[152,2],[152,1],[155,2],[136,5],[156,2],[156,3],[161,3],[161,4],[159,2],[163,2],[165,1],[165,4],[107,3],[107,3],[108,3],[108,6],[171,2],[171,3],[170,1],[170,3],[173,1],[173,1],[109,3],[109,4],[109,6],[177,1],[177,1],[113,6],[185,6],[185,6],[185,6],[183,1],[183,2],[187,1],[187,2],[193,7],[193,6],[111,6],[199,1],[199,2],[201,6],[202,3],[204,0],[204,1],[207,3],[207,6],[210,2],[210,3],[209,1],[209,5],[205,1],[205,2],[214,1],[214,1],[217,1],[217,2],[215,4],[215,3],[223,1],[223,2],[223,4],[222,6],[222,7],[231,4],[227,1],[227,2],[229,4],[229,4],[229,7],[234,1],[234,1],[235,1],[235,1],[233,2],[233,5],[238,2],[239,2],[239,2],[239,5],[206,0],[206,2],[206,7],[247,4],[247,4],[245,2],[245,3],[248,6],[251,5],[253,4],[216,3],[257,6],[263,1],[263,3],[14,7],[266,3],[270,1],[270,2],[269,2],[269,8],[13,7],[273,9],[275,3],[275,4],[276,0],[276,1],[283,3],[268,0],[268,1],[220,1],[220,1],[220,1],[220,1],[288,2],[288,1],[288,1],[288,1],[291,1],[291,1],[291,2],[221,1],[221,1],[277,0],[277,4],[277,7],[278,0],[278,3],[279,0],[279,4],[279,7],[301,2],[301,3],[303,1],[303,2],[303,2],[303,2],[303,2],[300,1],[300,2],[308,2],[308,3],[280,0],[280,3],[280,3],[281,0],[281,3],[281,3],[127,4],[241,1],[241,2],[212,1],[121,1],[121,1],[79,4],[315,1],[315,2],[317,2],[317,3],[316,1],[316,1],[88,1],[88,1],[88,1],[90,4],[243,1],[243,2],[321,2],[321,3],[321,1],[314,1],[314,1],[314,2],[314,1],[154,1],[154,1],[154,1],[296,2],[296,3],[295,1],[295,2],[323,2],[323,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[180,2],[180,3],[332,3],[332,2],[332,3],[333,0],[331,1],[331,2],[334,2],[334,3],[181,2],[181,3],[158,3],[98,1],[98,2],[337,2],[337,3],[261,1],[261,1],[160,1],[160,1],[160,1],[338,1],[338,1],[338,3],[318,2],[318,3],[318,3],[318,4],[318,4],[320,3],[320,4],[320,4],[319,3],[319,3],[319,3],[319,3],[319,3],[319,3],[319,3],[319,4],[319,3],[319,3],[319,3],[319,3],[92,2],[352,2],[353,1],[353,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[95,0],[95,1],[120,0],[120,1],[124,0],[124,1],[131,0],[131,1],[134,0],[134,1],[135,0],[135,1],[137,0],[137,1],[139,0],[139,1],[140,0],[140,1],[142,0],[142,1],[143,0],[143,1],[145,0],[145,1],[146,0],[146,1],[172,0],[172,1],[174,0],[174,1],[178,0],[178,1],[184,0],[184,1],[188,0],[188,1],[190,0],[190,1],[192,0],[192,1],[195,0],[195,1],[197,0],[197,1],[200,0],[200,1],[203,0],[203,1],[211,0],[211,1],[228,0],[228,1],[230,0],[230,1],[246,0],[246,1],[267,0],[267,1],[271,0],[271,1],[274,0],[274,1],[297,0],[297,1],[302,0],[302,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 110: case 122: case 143: case 153: case 183: case 221: case 266: case 312:
this.$ = [ $$[$0-1] ];
break;
case 31: case 111: case 123: case 154: case 184: case 222: case 267: case 313:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 90: case 91: case 141: case 231: case 338:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 92: case 115: case 176: case 337: case 339:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 168: case 170: case 187: case 201: case 232: case 273: case 275: case 290: case 292: case 302: case 314: case 316: case 343: case 345:
this.$ = [ $$[$0] ];
break;
case 72: case 169: case 171: case 188: case 202: case 233: case 274: case 276: case 291: case 293: case 303: case 317: case 344: case 346:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 75:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 76:
this.$ = state.normalizeActivator($$[$0]);
break;
case 77:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args)        ;
break;
case 78:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 79:
this.$ = [$$[$0]];
break;
case 80:
this.$ = state.normalizeValidator($$[$0]);
break;
case 81:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 82:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 83:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 84:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 85:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 86:
this.$ = [ $$[$0], {} ];
break;
case 87:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 94:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 105:
this.$ = { mixins: $$[$0-1] };
break;
case 106:
this.$ = { code: $$[$0-1] };
break;
case 108:
this.$ = { comment: $$[$0-1] };
break;
case 109:
this.$ = { features: $$[$0-2] };
break;
case 112:
this.$ = { fields: $$[$0-2] };
break;
case 113:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 114:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 117:
this.$ = { comment: $$[$0] };
break;
case 121:
this.$ = { associations: $$[$0-2] };
break;
case 124:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 125:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 126: case 127:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 128:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 134:
this.$ = { by: $$[$0] }    ;
break;
case 135:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 136:
this.$ = { remoteField: $$[$0] }     ;
break;
case 137:
this.$ = { remoteField: $$[$0] }      ;
break;
case 138:
this.$ = { with: $$[$0] };
break;
case 139:
this.$ = { with: $$[$0] }    ;
break;
case 140:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 142:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 144:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 145:
this.$ = $$[$0];;
break;
case 146:
this.$ = { srcField: $$[$0] };
break;
case 147:
this.$ = { optional: true };
break;
case 148:
this.$ = { default: $$[$0-1] };
break;
case 149: case 150:
this.$ = { key: $$[$0-1] };
break;
case 151:
this.$ = { indexes: [$$[$0-1]] };
break;
case 152:
this.$ = { indexes: $$[$0-2] };
break;
case 156:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 157: case 158:
this.$ = { fields: $$[$0] };
break;
case 159:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 160:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 161:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 164:
this.$ = { triggers: $$[$0-2] };
break;
case 165:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 166:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 167:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 172:
this.$ = { condition: $$[$0-5], do: $$[$0-2] };
break;
case 173:
this.$ = { do: $$[$0-2] };
break;
case 174:
this.$ = { interfaces: $$[$0-2] };
break;
case 175:
this.$ = Object.assign({}, $$[$0]);
break;
case 177:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 178:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 181:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 182:
this.$ = { accept: $$[$0-2] };
break;
case 186:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 193:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 194:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 198:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 199:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 200:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 203: case 204: case 234: case 331: case 341: case 342: case 354:
this.$ = $$[$0-1];
break;
case 205: case 211:
this.$ = $$[$0-2];
break;
case 212:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 213:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 214:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 215:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 217:
 this.$ = { return: $$[$0-1] }; 
break;
case 218:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 219: case 220:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 223:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 224:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 225:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 226:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 227:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 228:
this.$ = { entity: $$[$0] }     ;
break;
case 229:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 230:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 235:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 236:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 237:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 238:
this.$ = { dataset: $$[$0] };
break;
case 239:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 242:
this.$ = { condition: $$[$0-1] };
break;
case 259:
this.$ = { groupBy: $$[$0-1] };
break;
case 260:
this.$ = { groupBy: $$[$0-2] };
break;
case 262:
this.$ = { having: $$[$0-1] };
break;
case 264:
this.$ = { orderBy: $$[$0-1] };
break;
case 265:
this.$ = { orderBy: $$[$0-2] };
break;
case 268:
this.$ = { field: $$[$0], ascend: true };
break;
case 269: case 270:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 271: case 272:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 278: case 279:
this.$ = { offset: $$[$0-1] };
break;
case 281: case 282:
this.$ = { limit: $$[$0-1] };
break;
case 283:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 285:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 289: case 299:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 295:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 300:
this.$ = [ $$[$0] ]    ;
break;
case 301:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 304: case 340:
this.$ = [];
break;
case 307:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 315:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 330:
this.$ = {};
break;
case 332: case 334:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 333:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 348:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 355:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 356:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 357:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 358:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 359:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 360:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 361:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 362:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 363:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 369:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 371:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 373:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 374:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 375:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 376:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 377:
this.$ = { operator: 'and' };
break;
case 378:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,265:$V5,272:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,265:$V5,272:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,117:$V8,324:$V9},{17:[1,30],23:29,26:31,324:$V9},{16:34,17:[1,33],26:26,44:32,117:$V8,324:$V9},{16:35,26:26,117:$V8,324:$V9},{17:[1,36]},{16:37,26:26,117:$V8,324:$V9},{16:38,26:26,117:$V8,324:$V9},{17:[2,86],97:39,99:[1,40],100:[1,41]},{16:42,26:26,117:$V8,324:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,319]),o([17,20,27,51,82,84,86,87,89,99,100,116,118,144,153,157,162,164,175,179,218,219,224,232,240,244,255,264,282,290,292,293,304,305,306,307,309,324,329,330,335,336,339,340,342,344,345,346,347,348,349,350,351,354,355],[2,320]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,84],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,98:56,117:$V8,324:$V9},o($Vd,[2,88]),o($Vd,[2,89]),o([17,99,100],[2,90]),o($V7,[2,13]),{16:59,19:58,26:26,117:$V8,324:$V9},o($V7,[2,17]),{23:61,24:60,26:31,324:$V9},{28:62,91:$Ve,117:$Vf,180:66,181:67,311:$Vg,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,117:$V8,324:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,324:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,117:$V8,324:$V9},{18:[1,107]},o($VH,$VI,{94:108,32:109,116:$VJ}),{18:[1,111]},{18:[1,112]},{17:[2,87]},o($VK,[2,343],{337:113,309:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,321]),o($VM,[2,322]),o($VM,[2,323]),o($VM,[2,324]),o($VM,[2,325]),o($VM,[2,326]),o($VM,[2,327]),o($VM,[2,328]),o($VM,[2,329]),{16:122,26:123,117:$V8,311:$VN,324:$V9,330:[1,119],331:120,332:121},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:127,243:126,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,336:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{49:136,80:137,81:138,82:$VR,84:$VS,86:$VT}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,324:$V9}),o($VU,[2,67],{87:$VV}),o($VU,[2,68]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o([20,37,40],$VI,{30:144,32:145,116:$VJ}),{20:[1,146]},{20:[2,91],102:147,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:158,114:$VW,115:$VX,118:$VY,122:$VZ,129:$V_,168:$V$,169:$V01,176:$V11,182:$V21,198:$V31},{117:[1,169]},{100:[1,172],273:170,275:171},{100:[1,174],266:173},o($VK,[2,344]),{16:175,26:26,117:$V8,324:$V9},o($V7,[2,379],{21:176,17:[1,177]}),{16:59,19:178,20:[2,15],26:26,117:$V8,324:$V9},o($V7,[2,381],{25:179,17:[1,180]}),{20:[2,20],23:61,24:181,26:31,324:$V9},o($VM,[2,330]),{330:[1,182]},{309:$V41,330:[2,336],334:183},{51:[1,185]},o($V51,[2,335],{333:186,51:$Vb}),{51:[1,187]},o($V61,[2,340]),{336:[1,188]},o($V71,[2,300],{321:189,309:$V81}),o($V91,[2,284],{81:138,80:191,82:$VR,84:$VS,86:$VT}),o($VM,[2,305]),o($VM,[2,306],{322:[1,192]}),o($VM,[2,308]),o($VM,[2,294]),o($VM,$Va1,{87:$Vb1}),o($V7,[2,391],{46:194,17:[1,195]}),{16:34,20:[2,35],26:26,44:75,45:196,117:$V8,324:$V9},{17:$Vc1,50:197,116:$Vd1},o($VP,[2,70]),o($V91,[2,71],{81:138,80:199,82:$VR,84:$VS,86:$VT}),{26:201,83:200,87:$Ve1,90:202,91:$Vf1,324:$V9},{26:207,85:205,90:206,324:$V9},{26:209,87:[1,208],90:210,324:$V9},o($Vn,[2,66]),{26:213,28:132,91:$Ve,117:$Vf,180:66,181:67,311:$Vg,315:211,316:212,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{20:[1,214]},o($Vg1,[2,385],{33:215,36:216,37:[1,217]}),o($V7,[2,393],{95:218,17:[1,219]}),{20:[2,92]},{20:[2,93],102:220,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:158,114:$VW,115:$VX,118:$VY,122:$VZ,129:$V_,168:$V$,169:$V01,176:$V11,182:$V21,198:$V31},o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),{17:[1,221]},{17:[1,222]},{17:[1,223]},{16:224,26:26,117:$V8,158:225,324:$V9,335:$Vh1},{16:230,17:[1,228],26:26,117:$V8,158:231,170:227,173:229,324:$V9,335:$Vh1},{16:233,26:26,117:$V8,177:232,178:234,179:[2,423],180:235,181:236,324:$V9,329:$Vl,335:$Vm},{16:237,26:26,117:$V8,324:$V9},{17:[1,238]},{16:57,26:26,98:239,117:$V8,324:$V9},{17:[1,240]},{17:[1,241]},{20:[1,242]},{17:[1,243]},o($Vd,$Vi1,{268:244,220:245,284:$Vj1,285:$Vk1,286:$Vl1,287:$Vm1}),{20:[1,250]},o($Vd,$Vi1,{220:245,268:251,284:$Vj1,285:$Vk1,286:$Vl1,287:$Vm1}),o($VK,[2,345],{337:252,309:$VL}),o($V7,[2,14]),o($V7,[2,380]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,382]),{20:[2,21]},o($VM,[2,331]),{330:[2,337]},{16:122,26:123,117:$V8,311:$VN,324:$V9,332:253},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:254,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($V51,[2,333]),{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:255,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($V61,[2,341]),o($V71,[2,301]),o($V71,[2,304],{180:66,181:67,314:128,316:129,90:131,28:132,26:133,241:256,91:$Ve,117:$Vf,311:$Vg,312:$VO,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm}),o($VM,[2,285]),o($VM,[2,307]),{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:127,243:257,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($V7,[2,33]),o($V7,[2,392]),{20:[2,36]},{17:[2,34]},{117:[1,258]},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,80],{87:$Vb1}),o($VM,[2,81]),o($VM,[2,82]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,92:259,117:$Vf,180:66,181:67,241:264,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:260,340:$Vo1},o($VM,[2,74]),o($VM,[2,78]),o($VM,[2,79],{87:$Vb1}),{26:133,28:132,59:$Vp1,88:266,90:131,91:$Ve,117:$Vf,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:267,319:268,320:269,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,340:$Vo1,343:$Vq1},o($VM,[2,76],{87:$Vb1}),o($VM,[2,77]),{89:[1,273]},{89:[2,290],309:$Vr1,317:274},o([89,309],$Va1),o($V7,[2,383],{31:276,17:[1,277]}),{20:[2,24],34:278,35:279,40:[1,280]},o($Vg1,[2,386]),{17:[1,281]},o($V7,[2,85]),o($V7,[2,394]),{20:[2,94]},{18:[1,282]},{18:[1,283]},{18:[1,284]},{17:[1,285]},{17:[1,286]},{16:57,26:26,98:287,117:$V8,324:$V9},{17:[1,288]},{18:[1,289]},{17:[2,155],100:[1,291],174:290,175:[2,421]},o($Vs1,[2,157]),o($Vs1,[2,158]),{17:[1,292]},{177:293,179:[2,424],180:235,181:236,329:$Vl,335:$Vm},{179:[1,294]},{17:[2,162]},{17:[2,163]},{17:[1,295]},{18:[1,296]},{17:[1,297]},{18:[1,298]},o([20,37,40,114,115,118,122,129,168,169,176,182,198],[2,108]),o($V7,[2,453],{274:299,17:[1,300]}),o([20,118,144,162,224,290,292,293,294,298,299,310,313],$Vt1,{204:301,207:302,208:$Vu1}),{16:304,26:26,117:$V8,324:$V9},o($Vd,[2,244]),o($Vd,[2,245]),o($Vd,[2,246]),o($Vd,[2,247]),o($Vd,[2,248]),o($V7,[2,449],{267:305,17:[1,306]}),{16:309,26:26,117:$V8,263:308,269:307,324:$V9},o($VK,[2,346]),{309:$V41,330:[2,338],334:310},o($V51,[2,332]),o($V51,[2,334]),o($V71,[2,302],{321:311,309:$V81}),{89:[1,312]},{17:[2,117]},{89:[1,313]},{352:314,353:315,354:$Vv1,355:$Vw1},o($Vx1,[2,352]),o($Vx1,[2,353]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,117:$Vf,180:66,181:67,241:264,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:318,340:$Vo1},{100:$Vy1,179:$Vz1,305:$VA1,307:$VB1,339:$VC1,340:$VD1,344:$VE1,345:$VF1,346:$VG1,347:$VH1,348:$VI1,349:$VJ1,350:$VK1,351:$VL1},{87:[1,333]},{89:[1,334]},{89:[2,296]},{89:[2,297]},{89:[2,298]},{100:$Vy1,179:$Vz1,305:$VA1,307:$VB1,339:$VC1,340:$VD1,342:[1,335],344:$VE1,345:$VF1,346:$VG1,347:$VH1,348:$VI1,349:$VJ1,350:$VK1,351:$VL1},{181:336,335:$Vm},{181:337,335:$Vm},o($VU,[2,289]),{89:[2,291]},{26:213,28:132,91:$Ve,117:$Vf,180:66,181:67,311:$Vg,316:338,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($V7,[2,22]),o($V7,[2,384]),{20:[2,23]},{20:[2,25]},{17:[1,339]},{18:[1,340]},{26:343,79:344,119:341,121:342,324:$V9},{16:349,26:26,117:$V8,123:345,125:346,126:347,127:348,324:$V9},{130:350,132:351,133:352,138:$VM1,141:$VN1,147:$VO1,148:$VP1},o($VH,[2,149]),o($VH,[2,150]),{336:[1,357]},o($VH,[2,151]),{16:230,26:26,117:$V8,158:231,170:359,171:358,173:229,324:$V9,335:$Vh1},{175:[1,360]},{175:[2,422]},o($VH,[2,159]),{17:[1,361]},{16:362,26:26,117:$V8,324:$V9},o($VH,[2,106]),{16:365,26:26,117:$V8,199:363,201:364,324:$V9},o($VH,[2,105]),{183:366,185:367,186:$VQ1,189:$VR1,191:$VS1},o($V7,[2,236]),o($V7,[2,454]),o($VT1,[2,240],{276:371,283:372,221:373,291:374,288:375,118:$VU1,144:$VV1,162:$VW1,224:[1,376],290:$VX1,292:$VY1,293:$VZ1}),o($V_1,[2,180]),{16:386,17:[1,384],26:26,117:$V8,127:387,209:383,212:385,324:$V9},{17:[2,238],282:[1,388]},o($V7,[2,230]),o($V7,[2,450]),{20:[2,231]},{17:[1,389],118:[1,390]},o($V$1,[2,228],{264:[1,391]}),{330:[2,339]},o($V71,[2,303]),o($VM,[2,299]),o($VM,[2,83]),o($V02,[2,375]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,117:$Vf,180:66,181:67,241:264,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:392,340:$Vo1},o($V12,[2,377]),o($V12,[2,378]),{89:[1,393]},o($Vx1,[2,355]),{179:[1,395],339:[1,394]},{340:[1,397],341:[1,396]},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:398,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:399,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:400,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:401,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:402,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:403,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:404,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:405,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:406,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:407,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:408,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{26:133,28:132,87:$Vn1,90:131,91:$Ve,117:$Vf,180:66,181:67,241:264,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:409,340:$Vo1},o($VM,[2,75]),{26:201,83:410,87:$Ve1,90:202,91:$Vf1,324:$V9},{342:[1,411]},{342:[1,412]},{89:[2,292],309:$Vr1,317:413},{18:[1,414]},{16:416,26:26,38:415,117:$V8,324:$V9},{20:[1,417]},{17:[1,418]},{17:[2,287],87:$VV},{17:[2,288]},{20:[1,419]},{17:[1,420]},{17:$Vc1,50:421,116:$Vd1},o($VP,[2,118]),o($VU,$V22,{128:422,47:423,51:$Vc}),{20:[1,424]},{17:[1,425]},{16:426,17:[1,427],26:26,117:$V8,324:$V9},{16:428,26:26,117:$V8,324:$V9},{16:429,26:26,117:$V8,324:$V9},o($V32,[2,129]),o($V32,[2,130]),o([17,100,116,164,175,324],[2,342]),{20:[1,430]},{17:[1,431]},{17:[2,156]},o($VH,[2,160]),{177:432,180:235,181:236,329:$Vl,335:$Vm},{20:[1,433]},{16:365,20:[2,175],26:26,117:$V8,199:434,201:364,324:$V9},{17:[1,435]},{20:[1,436]},{20:[2,168],183:437,185:367,186:$VQ1,189:$VR1,191:$VS1},{17:[1,438]},{17:[1,439]},{17:[1,440]},o($V42,[2,258],{277:441,294:[1,442]}),o($VT1,[2,241]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:443,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},o($V52,[2,256]),o($V52,[2,257]),o($V52,$V62),o($V52,[2,254]),{224:[1,447]},{289:[1,448]},o($V52,[2,250]),o($V52,[2,251]),o($V52,[2,252]),{17:[1,449]},{18:[1,450]},{17:[2,185]},o([17,82,84,86,324],$V22,{128:422,47:423,51:[1,451]}),{17:[2,286]},{17:[2,239]},o($V72,[2,234]),{51:[1,452]},{181:453,335:$Vm},o($V02,[2,376]),o($Vx1,[2,354]),o($Vx1,[2,356]),{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:454,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($Vx1,[2,357]),{341:[1,455]},o($Vx1,[2,363]),o($Vx1,[2,364]),o($Vx1,[2,365]),o($Vx1,[2,366]),o($Vx1,[2,367]),o($Vx1,[2,368]),o($Vx1,[2,369]),o($Vx1,[2,371]),o($Vx1,[2,372]),o($Vx1,[2,373]),o($Vx1,[2,374]),{89:[1,456]},o($V02,[2,360]),{26:201,83:457,87:$Ve1,90:202,91:$Vf1,324:$V9},{26:201,83:458,87:$Ve1,90:202,91:$Vf1,324:$V9},{89:[2,293]},{16:460,26:26,41:459,117:$V8,324:$V9},{20:[1,461]},{17:[1,462]},o($VH,[2,395],{120:463,17:[1,464]}),{20:[2,110],26:343,79:344,119:465,121:342,324:$V9},o($VH,[2,397],{124:466,17:[1,467]}),{16:349,20:[2,113],26:26,117:$V8,123:468,125:346,126:347,127:348,324:$V9},{17:[2,115]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:469,324:$V9}),o($VU,[2,120]),o($VH,[2,399],{131:470,17:[1,471]}),{20:[2,122],130:472,132:351,133:352,138:$VM1,141:$VN1,147:$VO1,148:$VP1},o($V82,[2,401],{134:473,152:474,156:476,159:478,118:$V92,153:[1,475],157:[1,477]}),{18:[1,480]},o($Va2,[2,407],{139:481,155:482,118:$Vb2}),o($Va2,[2,411],{142:484,155:486,118:$Vb2,144:[1,485]}),o($VH,[2,419],{172:487,17:[1,488]}),{16:230,20:[2,153],26:26,117:$V8,158:231,170:359,171:489,173:229,324:$V9,335:$Vh1},{17:[1,490]},o($VH,[2,437],{200:491,17:[1,492]}),{20:[2,176]},{18:[1,493]},o($VH,[2,425],{184:494,17:[1,495]}),{20:[2,169]},{18:[1,496]},{18:[1,497]},{18:[1,498]},o($Vc2,[2,261],{278:499,298:[1,500]}),{224:[1,501]},{17:[1,502]},o($Vd2,[2,349],{352:314,353:315,354:$Vv1,355:$Vw1}),o($Vd2,[2,350]),o($Vd2,[2,351]),o($V52,[2,255]),o($V52,[2,249]),o($V_1,[2,181]),{16:386,26:26,117:$V8,127:387,209:504,210:503,212:385,324:$V9},{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,117:$V8,213:[1,505],324:$V9},{17:[1,506]},o($V$1,[2,229]),o($Vx1,[2,370]),o($Vx1,[2,358]),o($Vx1,[2,359]),o($V02,[2,361]),o($V02,[2,362]),{20:[1,507]},{17:[1,508]},o($Vg1,[2,387],{39:509,17:[1,510]}),{16:416,20:[2,27],26:26,38:511,117:$V8,324:$V9},o($VH,[2,109]),o($VH,[2,396]),{20:[2,111]},o($VH,[2,112]),o($VH,[2,398]),{20:[2,114]},o($VP,$VQ,{80:137,81:138,49:512,82:$VR,84:$VS,86:$VT}),o($VH,[2,121]),o($VH,[2,400]),{20:[2,123]},o($Ve2,[2,403],{135:513,163:514,164:$Vf2}),o($V82,[2,402]),{26:517,117:$Vg2,154:516,213:$Vh2,324:$V9},o($V82,[2,136]),{16:521,26:26,117:$V8,158:520,324:$V9,335:$Vh1},o($V82,[2,138]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:522,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{16:523,26:26,117:$V8,324:$V9},o($VU,[2,409],{140:524,163:525,164:$Vf2}),o($Va2,[2,408]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:526,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},o($VU,[2,413],{143:527,163:528,164:$Vf2}),{16:529,26:26,117:$V8,324:$V9},o($Va2,[2,412]),o($VH,[2,152]),o($VH,[2,420]),{20:[2,154]},o($VH,[2,161]),o($VH,[2,174]),o($VH,[2,438]),o([218,219,255],$Vt1,{207:302,202:530,204:531,208:$Vu1}),o($VH,[2,164]),o($VH,[2,426]),{162:$Vi2,187:532,193:533,196:$Vj2},{162:$Vi2,187:536,193:533,196:$Vj2},{162:$Vi2,187:537,193:533,196:$Vj2},o($Vk2,[2,263],{279:538,299:[1,539]}),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:540,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{17:[1,542],26:517,117:$Vg2,154:543,213:$Vh2,295:541,324:$V9},o($VT1,[2,242]),{20:[1,544]},{17:[1,545]},o([17,82,84,86],$Vo,{77:77,78:78,26:79,79:80,48:546,324:$V9}),{18:[1,547]},{17:[1,549],20:[2,389],42:548},{16:460,20:[2,30],26:26,41:550,117:$V8,324:$V9},o($Vg1,[2,26]),o($Vg1,[2,388]),{20:[2,28]},o($VP,[2,283]),o($VP,$Vo,{77:77,78:78,26:79,79:80,48:551,324:$V9}),o($Ve2,[2,404]),{16:552,26:26,117:$V8,324:$V9},o($V82,[2,134],{155:553,118:$Vb2}),o($Vl2,[2,309]),o($Vl2,[2,310]),o($Vl2,[2,311]),o($V82,[2,137]),o($V82,[2,141],{159:554,118:$V92}),o($V82,[2,145]),{51:[1,556],136:555},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:557,324:$V9}),o($VU,[2,410]),o($Va2,[2,139]),o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:558,324:$V9}),o($VU,[2,414]),o($Va2,[2,415],{145:559,155:560,118:$Vb2}),{20:[1,561]},{205:562,214:563,215:564,216:565,217:566,218:$Vm2,219:$Vn2,255:$Vo2},{20:[1,570]},{20:[2,170],162:$Vi2,187:571,193:533,196:$Vj2},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:572,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{17:[1,573]},{20:[1,574]},{20:[1,575]},o($Vp2,[2,277],{280:576,310:[1,577]}),{224:[1,578]},{17:[1,579]},{17:[1,580]},{18:[1,581]},{17:[2,314],309:$Vq2,323:582},o($V_1,[2,441],{211:584,17:[1,585]}),{16:386,20:[2,183],26:26,117:$V8,127:387,209:504,210:586,212:385,324:$V9},{17:$VQ,49:587,80:137,81:138,82:$VR,84:$VS,86:$VT},{16:309,26:26,117:$V8,263:308,269:589,270:588,324:$V9},{20:[2,29]},{20:[2,390]},{20:[2,31]},{17:$Vc1,50:590,116:$Vd1},o($VU,[2,146]),o($V82,[2,135]),o($V82,[2,142]),o($Ve2,[2,405],{137:591,163:592,164:$Vf2}),{17:[1,593]},o($VP,$VQ,{80:137,81:138,49:594,82:$VR,84:$VS,86:$VT}),o($VP,$VQ,{80:137,81:138,49:595,82:$VR,84:$VS,86:$VT}),o($VU,[2,417],{146:596,163:597,164:$Vf2}),o($Va2,[2,416]),o($V72,[2,439],{203:598,17:[1,599]}),{20:[2,216],206:600,238:601,240:$Vr2},o($Vs2,[2,187],{214:563,215:564,216:565,217:566,205:603,218:$Vm2,219:$Vn2,255:$Vo2}),o($Vt2,[2,189]),o($Vt2,[2,190]),{16:604,26:26,117:$V8,324:$V9},{256:[1,605]},o($Vd,[2,191]),{220:606,284:$Vj1,285:$Vk1,286:$Vl1,287:$Vm1},o($Vu2,[2,427],{188:607,17:[1,608]}),{20:[2,171]},{17:[1,609]},{18:[1,610]},o($Vu2,[2,429],{190:611,17:[1,612]}),o($Vu2,[2,431],{192:613,17:[1,614]}),{20:[2,280],281:615,313:[1,616]},{311:[1,617],312:[1,618]},{17:[1,620],26:517,117:$Vg2,154:622,213:$Vh2,300:619,303:621,324:$V9},o($Vc2,[2,262]),o($V42,[2,259]),{26:517,117:$Vg2,154:624,213:$Vh2,296:623,324:$V9},{17:[2,315]},{26:517,117:$Vg2,154:625,213:$Vh2,324:$V9},o($V_1,[2,182]),o($V_1,[2,442]),{20:[2,184]},{17:[2,186]},{20:[1,626]},{16:309,20:[2,232],26:26,117:$V8,263:308,269:589,270:627,324:$V9},{17:[2,124]},o($VP,$Vo,{77:77,78:78,26:79,79:80,48:628,324:$V9}),o($Ve2,[2,406]),{18:[1,629]},{17:$Vc1,50:630,116:$Vd1},{17:$Vc1,50:631,116:$Vd1},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:632,324:$V9}),o($VU,[2,418]),o($V72,[2,177]),o($V72,[2,440]),{20:[2,178]},{17:[1,633],244:[1,634]},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:635,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($Vs2,[2,188]),{51:[1,640],118:$VU1,144:$VV1,162:$VW1,221:636,222:637,223:638,224:[1,639],288:375,290:$VX1,291:374,292:$VY1,293:$VZ1},{17:[1,641]},o($Vd,[2,192]),o($Vu2,[2,165]),o($Vu2,[2,428]),{18:[1,642]},{194:[1,643]},o($Vu2,[2,166]),o($Vu2,[2,430]),o($Vu2,[2,167]),o($Vu2,[2,432]),{20:[2,237]},{311:[1,644],312:[1,645]},{17:[1,646]},{17:[1,647]},{17:[1,648]},{18:[1,649]},{17:[2,273],308:650,309:$Vv2},o($Vw2,[2,268],{304:[1,652],305:[1,653],306:[1,654],307:[1,655]}),{20:[1,656]},{17:[1,657]},{17:[2,316],309:$Vq2,323:658},o($V72,[2,451],{271:659,17:[1,660]}),{20:[2,233]},{17:$Vc1,50:661,116:$Vd1},{161:662,162:$Vx2},{17:[2,126]},{17:[2,127]},o($VP,$VQ,{80:137,81:138,49:664,82:$VR,84:$VS,86:$VT}),{20:[2,217]},{17:[1,665]},o([17,244],[2,212]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:666,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},o($Vt2,[2,194]),{17:[1,667]},o($V52,$V62,{225:[1,668]}),{17:[2,195]},o($Vt2,[2,226]),{194:[1,669]},{20:[1,670]},{17:[1,671]},{17:[1,672]},o($Vp2,[2,278]),o($Vp2,[2,279]),o($Vk2,[2,264]),{26:517,117:$Vg2,154:622,213:$Vh2,301:673,303:674,324:$V9},{17:[2,274]},{26:517,117:$Vg2,154:622,213:$Vh2,303:675,324:$V9},o($Vw2,[2,269]),o($Vw2,[2,270]),o($Vw2,[2,271]),o($Vw2,[2,272]),o($V42,[2,455],{297:676,17:[1,677]}),{20:[2,312],26:517,117:$Vg2,154:624,213:$Vh2,296:678,324:$V9},{17:[2,317]},o($V72,[2,235]),o($V72,[2,452]),{17:[1,679]},{20:[1,680]},{156:681,157:[1,682]},{17:$Vc1,50:683,116:$Vd1},{18:[1,684]},o($Vt2,[2,193]),{18:[1,685]},{17:[2,196],164:[1,686]},{20:[1,687]},o($Vy2,[2,435],{197:688,17:[1,689]}),{20:[2,281]},{20:[2,282]},{20:[1,690]},{17:[1,691]},{17:[2,275],308:692,309:$Vv2},o($V42,[2,260]),o($V42,[2,456]),{20:[2,313]},{20:[1,693]},o($V82,[2,140]),{17:[1,694]},{16:521,26:26,117:$V8,324:$V9},{17:[2,128]},{162:$Vz2,245:695,247:696},{162:$VA2,227:698,231:699},{226:[1,701]},o($Vy2,[2,433],{195:702,17:[1,703]}),o($Vy2,[2,173]),o($Vy2,[2,436]),o($Vk2,[2,457],{302:704,17:[1,705]}),{20:[2,266],26:517,117:$Vg2,154:622,213:$Vh2,301:706,303:674,324:$V9},{17:[2,276]},{17:[2,125]},{20:[2,143],161:707,162:$Vx2},{20:[1,708]},{17:[1,709]},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:710,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{20:[1,711],229:712,234:713,236:[1,714],237:[1,715]},o($VB2,[2,201],{231:699,227:716,162:$VA2}),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:717,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{17:[2,197]},o($Vy2,[2,172]),o($Vy2,[2,434]),o($Vk2,[2,265]),o($Vk2,[2,458]),{20:[2,267]},{20:[2,144]},{17:[1,719],20:[2,447],246:718},{20:[2,221],162:$Vz2,245:720,247:696},{232:[1,721]},o($Vt2,[2,443],{228:722,17:[1,723]}),{20:[1,724]},{232:[1,725]},{232:[2,206]},{232:[2,207]},o($VB2,[2,202]),{232:[1,726]},{20:[2,218]},{20:[2,448]},{20:[2,222]},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,239:728,241:727,242:$VC2,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},o($Vt2,[2,198]),o($Vt2,[2,444]),o($Vt2,[2,445],{230:730,17:[1,731]}),{17:[1,734],26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:735,180:66,181:67,233:732,235:733,238:736,239:737,240:$Vr2,241:270,242:$VC2,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{17:[1,739],26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:735,180:66,181:67,233:738,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{17:[2,219]},{17:[2,220]},{26:741,117:[1,740],324:$V9},o($Vt2,[2,199]),o($Vt2,[2,446]),{17:[1,742]},{17:[1,743]},{18:[1,744]},{17:[1,745]},{17:[2,208]},{17:[2,209]},o([20,162,236,237],[2,200]),{18:[1,746]},{17:[2,213]},{17:[2,214],87:[1,747]},{20:[2,203]},{20:[2,204]},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:749,180:66,181:67,235:748,238:736,239:737,240:$Vr2,241:270,242:$VC2,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},o($VD2,[2,210]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:445,117:$Vf,160:749,180:66,181:67,241:270,311:$Vg,312:$VO,314:128,316:129,318:261,319:262,320:446,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm,338:444,340:$Vo1,343:$Vq1},{26:133,28:132,90:131,91:$Ve,117:$Vf,180:66,181:67,241:127,243:750,311:$Vg,312:$VO,314:128,316:129,324:$V9,325:$Vh,326:$Vi,327:$Vj,328:$Vk,329:$Vl,335:$Vm},{17:[1,751]},{17:[1,752]},{89:[1,753]},{20:[1,754]},{20:[1,755]},{17:[2,215]},{20:[2,205]},o($VD2,[2,211])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,87],62:[2,19],147:[2,92],178:[2,16],181:[2,21],183:[2,337],196:[2,36],197:[2,34],220:[2,94],235:[2,162],236:[2,163],258:[2,117],267:[2,296],268:[2,297],269:[2,298],274:[2,291],278:[2,23],279:[2,25],291:[2,422],307:[2,231],310:[2,339],344:[2,288],360:[2,156],385:[2,185],387:[2,286],388:[2,239],413:[2,293],421:[2,115],434:[2,176],437:[2,169],465:[2,111],468:[2,114],472:[2,123],489:[2,154],511:[2,28],548:[2,29],549:[2,390],550:[2,31],571:[2,171],582:[2,315],586:[2,184],587:[2,186],590:[2,124],600:[2,178],615:[2,237],627:[2,233],630:[2,126],631:[2,127],633:[2,217],640:[2,195],650:[2,274],658:[2,317],671:[2,281],672:[2,282],678:[2,313],683:[2,128],692:[2,276],693:[2,125],701:[2,197],706:[2,267],707:[2,144],714:[2,206],715:[2,207],718:[2,218],719:[2,448],720:[2,222],727:[2,219],728:[2,220],736:[2,208],737:[2,209],740:[2,213],742:[2,203],743:[2,204],753:[2,215],754:[2,205]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //const TOP_LEVEL_KEYWORDS = 

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes', 'code', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),        

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',        
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.code': 'entity.code', 

        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.mixes', 1 ],
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 327;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 117;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 117;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 117;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 91;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 325;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 311;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 311;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 213;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 328;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 312;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 326;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 324;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = geml;
exports.Parser = geml.Parser;
exports.parse = function () { return geml.parse.apply(geml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}