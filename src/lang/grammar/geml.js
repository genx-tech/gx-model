/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var geml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,17],$V4=[1,15],$V5=[1,18],$V6=[1,21],$V7=[5,15,22,29,40,45,95,105],$V8=[1,27],$V9=[1,28],$Va=[17,53,84,86,88,103,104,119,121,147,154,158,163,165,167,176,188,233,280,282,283,302,319,324,330,331],$Vb=[2,314],$Vc=[1,51],$Vd=[120,319],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,84,86,88,119],$Vo=[2,64],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,118,121,125,132,169,170,177,185,191,207],$VI=[2,108],$VJ=[1,112],$VK=[17,331],$VL=[1,114],$VM=[17,20,84,86,88,91,104,119,165,188,227,228,241,249,253,264,298,300,302,319,325,331,334,335,337,339,340,341,342,343,344,345,346,349,350],$VN=[1,124],$VO=[1,130],$VP=[17,119],$VQ=[2,70],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,84,86,88,119,319],$VV=[1,143],$VW=[20,37,42],$VX=[1,168],$VY=[1,161],$VZ=[1,162],$V_=[1,163],$V$=[1,164],$V01=[1,165],$V11=[1,166],$V21=[1,167],$V31=[1,170],$V41=[1,169],$V51=[1,181],$V61=[302,325],$V71=[91,331],$V81=[1,187],$V91=[17,20,91,104,119,165,188,227,228,241,249,253,264,298,300,302,319,325,331,334,335,337,339,340,341,342,343,344,345,346,349,350],$Va1=[2,291],$Vb1=[1,190],$Vc1=[2,117],$Vd1=[1,195],$Ve1=[1,201],$Vf1=[1,200],$Vg1=[20,42],$Vh1=[1,228],$Vi1=[1,250],$Vj1=[1,252],$Vk1=[1,258],$Vl1=[1,259],$Vm1=[1,262],$Vn1=[17,104,176],$Vo1=[1,295],$Vp1=[1,296],$Vq1=[17,20,84,86,88,91,119,165,227,228,241,249,264,319,349,350],$Vr1=[1,300],$Vs1=[1,307],$Vt1=[1,302],$Vu1=[1,301],$Vv1=[1,298],$Vw1=[1,299],$Vx1=[1,303],$Vy1=[1,304],$Vz1=[1,305],$VA1=[1,306],$VB1=[1,308],$VC1=[1,309],$VD1=[1,310],$VE1=[1,311],$VF1=[1,332],$VG1=[1,333],$VH1=[1,334],$VI1=[1,335],$VJ1=[1,350],$VK1=[1,351],$VL1=[1,352],$VM1=[17,20,84,86,88,91,119,165,227,228,241,249,264,319],$VN1=[89,93,120,305,306,319,320,321,322,323,324,330,335],$VO1=[2,120],$VP1=[17,120,319],$VQ1=[17,119,165,319],$VR1=[1,430],$VS1=[17,84,86,88,119,165,319],$VT1=[1,434],$VU1=[17,119,319],$VV1=[1,462],$VW1=[227,228,264],$VX1=[1,491],$VY1=[1,492],$VZ1=[17,119,121,165,319],$V_1=[17,20,84,86,88,119,165,227,228,241,249,264,319],$V$1=[17,121],$V02=[1,519],$V12=[1,520],$V22=[1,518],$V32=[20,120,319],$V42=[1,548],$V52=[20,249],$V62=[20,227,228,249,264],$V72=[20,195,198,200],$V82=[1,597],$V92=[61,89,93,120,305,306,319,320,321,322,323,324,330,335,338],$Va2=[20,163,205],$Vb2=[1,629],$Vc2=[1,632],$Vd2=[20,245,246],$Ve2=[1,658],$Vf2=[17,20,163,245,246];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"overrides_statement":12,"override_statement":13,"entity_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"overrides":40,"overrides_statement_option0":41,"views":42,"schema_views_block":43,"schema_views_option0":44,"type":45,"type_statement_item":46,"type_statement_block":47,"type_statement_option0":48,"type_base":49,"type_info_or_not":50,"type_modifiers_or_not":51,"field_comment_or_not":52,":":53,"types":54,"int_keyword":55,"number_keyword":56,"text_keyword":57,"bool_keyword":58,"binary_keyword":59,"datetime_keyword":60,"any":61,"enum":62,"array":63,"object":64,"int":65,"integer":66,"number":67,"float":68,"decimal":69,"text":70,"string":71,"bool":72,"boolean":73,"blob":74,"binary":75,"buffer":76,"datetime":77,"timestamp":78,"type_infos":79,"type_info":80,"narrow_function_call":81,"type_modifiers":82,"type_modifier":83,"|~":84,"type_modifier_validators":85,"|>":86,"identifier_or_general_function_call":87,"|=":88,"(":89,"literal_and_value_expression":90,")":91,"general_function_call":92,"REGEXP":93,"logical_expression":94,"override":95,"entity_statement_header":96,"entity_statement_block":97,"override_statement_option0":98,"entity_statement_option0":99,"entity_statement_header0":100,"entity_base_keywords":101,"identifier_or_string_list":102,"extends":103,"is":104,"entity":105,"entity_sub_items":106,"entity_sub_item":107,"with_features":108,"has_fields":109,"associations_statement":110,"key_statement":111,"index_statement":112,"input_statement":113,"data_statement":114,"code_statement":115,"interfaces_statement":116,"triggers_statement":117,"code":118,"--":119,"STRING":120,"with":121,"with_features_block":122,"with_features_option0":123,"feature_inject":124,"has":125,"has_fields_block":126,"has_fields_option0":127,"field_item":128,"field_item_body":129,"modifiable_field":130,"type_base_or_not":131,"associations":132,"associations_block":133,"associations_statement_option0":134,"association_item":135,"association_type_referee":136,"association_item_option0":137,"association_item_option1":138,"association_cases_block":139,"association_item_option2":140,"belongsTo":141,"association_item_option3":142,"association_item_option4":143,"refersTo":144,"association_item_option5":145,"association_item_option6":146,"of":147,"association_item_option7":148,"association_item_option8":149,"hasOne":150,"hasMany":151,"association_type_referer":152,"association_through":153,"connectedBy":154,"identifier_string_or_dotname":155,"association_extra_condition":156,"association_connection":157,"being":158,"array_of_identifier_or_string":159,"association_condition":160,"conditional_expression":161,"association_cases":162,"when":163,"association_as":164,"as":165,"association_qualifiers":166,"optional":167,"default":168,"key":169,"index":170,"index_item":171,"index_statement_block":172,"index_statement_option0":173,"index_item_body":174,"index_item_option0":175,"unique":176,"input":177,"input_statement_block":178,"input_statement_option0":179,"input_statement_def":180,"input_block":181,"input_block_item":182,"input_block_item_base":183,"input_block_item_with_spec":184,"data":185,"data_records":186,"data_statement_option0":187,"in":188,"inline_object":189,"inline_array":190,"triggers":191,"triggers_statement_block":192,"triggers_statement_option0":193,"triggers_operation":194,"onCreate":195,"triggers_operation_block":196,"triggers_operation_option0":197,"onCreateOrUpdate":198,"triggers_operation_option1":199,"onDelete":200,"triggers_operation_option2":201,"triggers_operation_item":202,"triggers_result_block":203,"triggers_operation_item_option0":204,"always":205,"triggers_operation_item_option1":206,"interface":207,"interfaces_statement_block":208,"interfaces_statement_option0":209,"interface_definition":210,"interface_definition_body":211,"interface_definition_option0":212,"accept_or_not":213,"implementation":214,"return_or_not":215,"accept_statement":216,"accept":217,"accept_param":218,"accept_block":219,"accept_statement_option0":220,"modifiable_param":221,"DOTNAME":222,"operation":223,"find_one_operation":224,"coding_block":225,"find_one_keywords":226,"findOne":227,"find":228,"article_keyword":229,"selection_inline_keywords":230,"case_statement":231,"cases_keywords":232,"by":233,"cases":234,"below":235,"case_condition_block":236,"case_statement_option0":237,"otherwise_statement":238,"case_statement_option1":239,"case_condition_item":240,"=>":241,"condition_as_result_expression":242,"otherwise_keywords":243,"stop_controll_flow_expression":244,"otherwise":245,"else":246,"return_expression":247,"throw_error_expression":248,"return":249,"modifiable_value":250,"throw":251,"gfc_param_list":252,"unless":253,"return_condition_block":254,"return_or_not_option0":255,"return_condition_item":256,"update_operation":257,"update":258,"where_expr":259,"create_operation":260,"create":261,"delete_operation":262,"delete":263,"do":264,"javascript":265,"assign_operation":266,"set":267,"identifier_or_member_access":268,"<-":269,"value":270,"variable_modifier_or_not":271,"entity_fields_selections":272,"->":273,"a":274,"an":275,"the":276,"one":277,"selection_attributive_keywords":278,"which":279,"where":280,"selection_keywords":281,"selectedBy":282,"selected":283,"group_by_or_not":284,"group":285,"identifier_string_or_dotname_list":286,"identifier_string_or_dotname_block":287,"group_by_or_not_option0":288,"having_or_not":289,"having":290,"order_by_or_not":291,"order":292,"order_by_list":293,"order_by_block":294,"order_by_or_not_option0":295,"order_by_clause":296,"ascend":297,"<":298,"descend":299,">":300,"order_by_list0":301,",":302,"skip_or_not":303,"offset":304,"INTEGER":305,"REFERENCE":306,"limit_or_not":307,"limit":308,"gfc_param0":309,"nfc_param_list":310,"nfc_param":311,"nfc_param_list0":312,"unary_expression":313,"binary_expression":314,"boolean_expression":315,"gfc_param_list0":316,"?":317,"identifier_string_or_dotname_list0":318,"NAME":319,"FLOAT":320,"BOOL":321,"SCRIPT":322,"SYMBOL":323,"{":324,"}":325,"kv_pairs":326,"kv_pair_item":327,"non_exist":328,"kv_pairs0":329,"[":330,"]":331,"identifier_or_string_list0":332,"simple_expression":333,"exists":334,"not":335,"null":336,"~":337,"all":338,">=":339,"<=":340,"==":341,"!=":342,"+":343,"-":344,"*":345,"/":346,"logical_expression_right":347,"logical_operators":348,"and":349,"or":350,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"overrides",42:"views",45:"type",53:":",61:"any",62:"enum",63:"array",64:"object",65:"int",66:"integer",67:"number",68:"float",69:"decimal",70:"text",71:"string",72:"bool",73:"boolean",74:"blob",75:"binary",76:"buffer",77:"datetime",78:"timestamp",84:"|~",86:"|>",88:"|=",89:"(",91:")",93:"REGEXP",95:"override",103:"extends",104:"is",105:"entity",118:"code",119:"--",120:"STRING",121:"with",125:"has",132:"associations",141:"belongsTo",144:"refersTo",147:"of",150:"hasOne",151:"hasMany",154:"connectedBy",158:"being",163:"when",165:"as",167:"optional",168:"default",169:"key",170:"index",176:"unique",177:"input",185:"data",188:"in",191:"triggers",195:"onCreate",198:"onCreateOrUpdate",200:"onDelete",203:"triggers_result_block",205:"always",207:"interface",217:"accept",222:"DOTNAME",227:"findOne",228:"find",233:"by",234:"cases",235:"below",241:"=>",245:"otherwise",246:"else",249:"return",251:"throw",253:"unless",258:"update",259:"where_expr",261:"create",263:"delete",264:"do",265:"javascript",267:"set",268:"identifier_or_member_access",269:"<-",271:"variable_modifier_or_not",273:"->",274:"a",275:"an",276:"the",277:"one",279:"which",280:"where",282:"selectedBy",283:"selected",285:"group",290:"having",292:"order",297:"ascend",298:"<",299:"descend",300:">",302:",",304:"offset",305:"INTEGER",306:"REFERENCE",308:"limit",317:"?",319:"NAME",320:"FLOAT",321:"BOOL",322:"SCRIPT",323:"SYMBOL",324:"{",325:"}",330:"[",331:"]",334:"exists",335:"not",336:"null",337:"~",338:"all",339:">=",340:"<=",341:"==",342:"!=",343:"+",344:"-",345:"*",346:"/",349:"and",350:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[12,7],[35,6],[43,2],[43,3],[10,3],[10,6],[46,5],[47,2],[47,3],[49,2],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[56,1],[57,1],[57,1],[58,1],[58,1],[59,1],[59,1],[59,1],[60,1],[60,1],[50,0],[50,1],[79,1],[79,2],[80,1],[80,1],[51,0],[51,1],[82,1],[82,2],[83,2],[83,2],[83,4],[83,2],[87,1],[87,1],[85,1],[85,1],[85,1],[85,3],[13,3],[13,7],[14,2],[14,6],[96,1],[96,3],[101,1],[101,1],[100,2],[97,1],[97,2],[106,1],[106,2],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[107,1],[115,3],[32,0],[32,3],[108,6],[122,2],[122,3],[109,6],[126,2],[126,3],[128,2],[52,0],[52,2],[129,1],[131,0],[131,1],[110,6],[133,2],[133,3],[135,6],[135,10],[135,7],[135,7],[135,9],[136,1],[136,1],[152,1],[152,1],[153,2],[153,3],[153,1],[153,2],[153,1],[156,2],[139,5],[157,2],[157,3],[162,3],[162,4],[160,2],[164,2],[166,1],[166,4],[111,3],[112,3],[112,6],[172,2],[172,3],[171,1],[171,3],[174,1],[174,1],[113,6],[178,6],[178,6],[180,1],[180,3],[181,2],[181,3],[182,1],[182,1],[183,1],[183,2],[184,3],[114,3],[114,4],[114,6],[186,1],[186,1],[117,6],[194,6],[194,6],[194,6],[192,1],[192,2],[196,1],[196,2],[202,7],[202,6],[116,6],[208,1],[208,2],[210,6],[211,3],[213,0],[213,1],[216,3],[216,6],[219,2],[219,3],[218,1],[218,5],[214,1],[214,2],[223,1],[223,1],[226,1],[226,2],[224,4],[224,3],[232,1],[232,2],[232,4],[231,6],[231,7],[240,4],[236,1],[236,2],[238,4],[238,4],[238,7],[243,1],[243,1],[244,1],[244,1],[242,2],[242,5],[247,2],[248,2],[248,2],[248,5],[215,0],[215,2],[215,7],[256,4],[256,4],[254,2],[254,3],[257,6],[260,5],[262,4],[225,3],[266,6],[272,1],[272,3],[229,1],[229,1],[229,1],[229,1],[278,2],[278,1],[278,1],[278,1],[281,1],[281,1],[281,2],[230,1],[230,1],[284,0],[284,4],[284,7],[289,0],[289,3],[291,0],[291,4],[291,7],[294,2],[294,3],[296,1],[296,2],[296,2],[296,2],[296,2],[293,1],[293,2],[301,2],[301,3],[303,0],[303,3],[303,3],[307,0],[307,3],[307,3],[130,4],[250,1],[250,2],[221,1],[124,1],[124,1],[81,4],[310,1],[310,2],[312,2],[312,3],[311,1],[311,1],[90,1],[90,1],[90,1],[92,4],[252,1],[252,2],[316,2],[316,3],[316,1],[309,1],[309,1],[309,2],[309,1],[155,1],[155,1],[155,1],[287,2],[287,3],[286,1],[286,2],[318,2],[318,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[189,2],[189,3],[327,3],[327,2],[327,3],[328,0],[326,1],[326,2],[329,2],[329,3],[190,2],[190,3],[159,3],[102,1],[102,2],[332,2],[332,3],[270,1],[270,1],[161,1],[161,1],[161,1],[333,1],[333,1],[333,3],[313,2],[313,3],[313,3],[313,4],[313,4],[315,3],[315,4],[315,4],[314,3],[314,3],[314,3],[314,3],[314,3],[314,3],[314,3],[314,4],[314,3],[314,3],[314,3],[314,3],[94,2],[347,2],[348,1],[348,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[41,0],[41,1],[44,0],[44,1],[48,0],[48,1],[98,0],[98,1],[99,0],[99,1],[123,0],[123,1],[127,0],[127,1],[134,0],[134,1],[137,0],[137,1],[138,0],[138,1],[140,0],[140,1],[142,0],[142,1],[143,0],[143,1],[145,0],[145,1],[146,0],[146,1],[148,0],[148,1],[149,0],[149,1],[173,0],[173,1],[175,0],[175,1],[179,0],[179,1],[187,0],[187,1],[193,0],[193,1],[197,0],[197,1],[199,0],[199,1],[201,0],[201,1],[204,0],[204,1],[206,0],[206,1],[209,0],[209,1],[212,0],[212,1],[220,0],[220,1],[237,0],[237,1],[239,0],[239,1],[255,0],[255,1],[288,0],[288,1],[295,0],[295,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = state.defineOverrides($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 30:
this.$ = { views: $$[$0-2] };
break;
case 31: case 111: case 123: case 143: case 152: case 163: case 194: case 232: case 262: case 308:
this.$ = [ $$[$0-1] ];
break;
case 32: case 112: case 124: case 153: case 164: case 195: case 233: case 263: case 309:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 35:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 38: case 74: case 92: case 93: case 141: case 334:
this.$ = $$[$0];
break;
case 39:
this.$ = { type: 'integer' };
break;
case 40:
this.$ = { type: 'number' }    ;
break;
case 41:
this.$ = { type: 'text' };
break;
case 42:
this.$ = { type: 'boolean' };
break;
case 43:
this.$ = { type: 'binary' };
break;
case 44:
this.$ = { type: 'datetime' };
break;
case 45:
this.$ = { type: 'any' };
break;
case 46:
this.$ = { type: 'enum' };
break;
case 47:
this.$ = { type: 'array' };
break;
case 48:
this.$ = { type: 'object' };
break;
case 49:
this.$ = { type: $$[$0] };
break;
case 67: case 94: case 116: case 187: case 333: case 335:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 68:
this.$ = { [$$[$0]]: true };
break;
case 69:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 71:
this.$ = { modifiers: $$[$0] };
break;
case 72: case 179: case 181: case 198: case 212: case 269: case 271: case 286: case 288: case 298: case 310: case 312: case 339: case 341:
this.$ = [ $$[$0] ];
break;
case 73: case 180: case 182: case 199: case 213: case 270: case 272: case 287: case 289: case 299: case 313: case 340: case 342:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 75:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 76:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 77:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 78:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 79:
this.$ = [$$[$0]];
break;
case 80:
this.$ = state.normalizeValidator($$[$0]);
break;
case 81:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 82:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 83:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 84:
this.$ = state.defineEntityOverride($$[$0-2][0], $$[$0-2][1], _$[$0-2].first_line);
break;
case 85:
this.$ = state.defineEntityOverride($$[$0-6][0], Object.assign({}, $$[$0-6][1], $$[$0-3]), _$[$0-6].first_line);
break;
case 86:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 87:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 88:
this.$ = [ $$[$0], {} ];
break;
case 89:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 96:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 107:
this.$ = { code: $$[$0-1] };
break;
case 109:
this.$ = { comment: $$[$0-1] };
break;
case 110:
this.$ = { features: $$[$0-2] };
break;
case 113:
this.$ = { fields: $$[$0-2] };
break;
case 114:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 115:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 118:
this.$ = { comment: $$[$0] };
break;
case 122:
this.$ = { associations: $$[$0-2] };
break;
case 125:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 126:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 127: case 128:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 129:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 134:
this.$ = { by: $$[$0] }    ;
break;
case 135:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 136:
this.$ = { remoteField: $$[$0] }     ;
break;
case 137:
this.$ = { remoteField: $$[$0] }      ;
break;
case 138:
this.$ = { with: $$[$0] };
break;
case 139:
this.$ = { with: $$[$0] }    ;
break;
case 140:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 142:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 144:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 145:
this.$ = $$[$0];;
break;
case 146:
this.$ = { srcField: $$[$0] };
break;
case 147:
this.$ = { optional: true };
break;
case 148:
this.$ = { default: $$[$0-1] };
break;
case 149:
this.$ = { key: $$[$0-1] };
break;
case 150:
this.$ = { indexes: [$$[$0-1]] };
break;
case 151:
this.$ = { indexes: $$[$0-2] };
break;
case 155:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 156: case 157:
this.$ = { fields: $$[$0] };
break;
case 158:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 159:
this.$ = { [$$[$0-5].name]: $$[$0-2] }     ;
break;
case 160:
this.$ = { [$$[$0-5].name]: $$[$0-2], ...$$[$0] }     ;
break;
case 161: case 167:
this.$ = { name: $$[$0] };
break;
case 162:
this.$ = { name: $$[$0-2], extends: $$[$0] };
break;
case 168:
this.$ = { name: $$[$0-1], optional: true };
break;
case 169:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 170:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 171:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 172:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 175:
this.$ = { triggers: $$[$0-2] };
break;
case 176:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 177:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 178:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 183:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 184:
this.$ = { do: $$[$0-2] };
break;
case 185:
this.$ = { interfaces: $$[$0-2] };
break;
case 186:
this.$ = Object.assign({}, $$[$0]);
break;
case 188:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 189:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 192:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 193:
this.$ = { accept: $$[$0-2] };
break;
case 197:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 204:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 205:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 209:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 210:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 211:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 214: case 215: case 327: case 337: case 338: case 350:
this.$ = $$[$0-1];
break;
case 216: case 222:
this.$ = $$[$0-2];
break;
case 223:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 224:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 225:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 226:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 228:
 this.$ = { return: $$[$0-1] }; 
break;
case 229:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 230: case 231:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 234:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 235:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 236:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 237:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 238:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 239:
this.$ = { entity: $$[$0] }     ;
break;
case 240:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 255:
this.$ = { groupBy: $$[$0-1] };
break;
case 256:
this.$ = { groupBy: $$[$0-2] };
break;
case 258:
this.$ = { having: $$[$0-1] };
break;
case 260:
this.$ = { orderBy: $$[$0-1] };
break;
case 261:
this.$ = { orderBy: $$[$0-2] };
break;
case 264:
this.$ = { field: $$[$0], ascend: true };
break;
case 265: case 266:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 267: case 268:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 274: case 275:
this.$ = { offset: $$[$0-1] };
break;
case 277: case 278:
this.$ = { limit: $$[$0-1] };
break;
case 279:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 281:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 285: case 295:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 291:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 296:
this.$ = [ $$[$0] ]    ;
break;
case 297:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 300: case 336:
this.$ = [];
break;
case 303:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 311:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 326:
this.$ = {}    ;
break;
case 328: case 330:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 329:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 344:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 351:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 352:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 353:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 354:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 355:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 356:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 357:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 358:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 359:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 360:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 361:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 367:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 369:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 372:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 373:
this.$ = { operator: 'and' };
break;
case 374:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,95:$V5,96:19,100:20,105:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,40:$V3,45:$V4,95:$V5,96:19,100:20,105:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,120:$V8,319:$V9},{17:[1,30],23:29,26:31,319:$V9},{16:34,17:[1,33],26:26,46:32,120:$V8,319:$V9},{16:35,26:26,120:$V8,319:$V9},{16:36,26:26,120:$V8,319:$V9},{96:37,100:20,105:$V6},{17:[1,38]},{17:[2,88],101:39,103:[1,40],104:[1,41]},{16:42,26:26,120:$V8,319:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,315]),o([17,20,27,53,84,86,88,89,91,103,104,119,121,147,154,158,163,165,167,176,188,227,228,233,241,249,253,264,280,282,283,298,300,302,319,324,325,330,331,334,335,337,339,340,341,342,343,344,345,346,349,350],[2,316]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{49:50,53:$Vc},{17:[1,52]},{17:[1,53]},{17:[1,54]},o($V7,[2,86],{18:[1,55]}),{16:57,26:26,102:56,120:$V8,319:$V9},o($Vd,[2,90]),o($Vd,[2,91]),o([17,103,104],[2,92]),o($V7,[2,13]),{16:59,19:58,26:26,120:$V8,319:$V9},o($V7,[2,17]),{23:61,24:60,26:31,319:$V9},{28:62,93:$Ve,120:$Vf,189:66,190:67,305:$Vg,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V7,[2,33]),{16:34,26:26,46:75,47:74,120:$V8,319:$V9},o($Vn,$Vo,{50:76,79:77,80:78,26:79,81:80,319:$V9}),{16:92,26:26,54:81,55:82,56:83,57:84,58:85,59:86,60:87,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,120:$V8,319:$V9},{18:[1,107]},{18:[1,108]},o($V7,[2,84],{18:[1,109]}),o($VH,$VI,{97:110,32:111,119:$VJ}),{17:[2,89]},o($VK,[2,339],{332:113,302:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,317]),o($VM,[2,318]),o($VM,[2,319]),o($VM,[2,320]),o($VM,[2,321]),o($VM,[2,322]),o($VM,[2,323]),o($VM,[2,324]),o($VM,[2,325]),{16:122,26:123,120:$V8,305:$VN,319:$V9,325:[1,119],326:120,327:121},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:127,252:126,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,331:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{51:136,82:137,83:138,84:$VR,86:$VS,88:$VT}),o($Vn,[2,65]),o($Vn,[2,66],{80:78,26:79,81:80,79:142,319:$V9}),o($VU,[2,68],{89:$VV}),o($VU,[2,69]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o($VU,[2,63]),o($VW,$VI,{30:144,32:145,119:$VJ}),o($VW,$VI,{32:145,30:146,119:$VJ}),o($VH,$VI,{32:111,97:147,119:$VJ}),{20:[1,148]},{20:[2,93],106:149,107:150,108:151,109:152,110:153,111:154,112:155,113:156,114:157,115:158,116:159,117:160,118:$VX,121:$VY,125:$VZ,132:$V_,169:$V$,170:$V01,177:$V11,185:$V21,191:$V31,207:$V41},{120:[1,171]},o($VK,[2,340]),{16:172,26:26,120:$V8,319:$V9},o($V7,[2,375],{21:173,17:[1,174]}),{16:59,19:175,20:[2,15],26:26,120:$V8,319:$V9},o($V7,[2,377],{25:176,17:[1,177]}),{20:[2,20],23:61,24:178,26:31,319:$V9},o($VM,[2,326]),{325:[1,179]},{302:$V51,325:[2,332],329:180},{53:[1,182]},o($V61,[2,331],{328:183,53:$Vb}),{53:[1,184]},o($VM,[2,336]),{331:[1,185]},o($V71,[2,296],{316:186,302:$V81}),o($V91,[2,280],{83:138,82:188,84:$VR,86:$VS,88:$VT}),o($VM,[2,301]),o($VM,[2,302],{317:[1,189]}),o($VM,[2,304]),o($VM,[2,290]),o($VM,$Va1,{89:$Vb1}),o($V7,[2,389],{48:191,17:[1,192]}),{16:34,20:[2,36],26:26,46:75,47:193,120:$V8,319:$V9},{17:$Vc1,52:194,119:$Vd1},o($VP,[2,71]),o($V91,[2,72],{83:138,82:196,84:$VR,86:$VS,88:$VT}),{26:198,85:197,89:$Ve1,92:199,93:$Vf1,319:$V9},{26:204,87:202,92:203,319:$V9},{26:204,87:206,89:[1,205],92:203,319:$V9},o($Vn,[2,67]),{26:209,28:132,93:$Ve,120:$Vf,189:66,190:67,305:$Vg,310:207,311:208,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{20:[1,210]},o($Vg1,[2,381],{33:211,36:212,37:[1,213]}),{20:[1,214]},{20:[1,215]},o($V7,[2,393],{99:216,17:[1,217]}),{20:[2,94]},{20:[2,95],106:218,107:150,108:151,109:152,110:153,111:154,112:155,113:156,114:157,115:158,116:159,117:160,118:$VX,121:$VY,125:$VZ,132:$V_,169:$V$,170:$V01,177:$V11,185:$V21,191:$V31,207:$V41},o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),o($VH,[2,105]),o($VH,[2,106]),{17:[1,219]},{17:[1,220]},{17:[1,221]},{16:222,26:26,120:$V8,319:$V9},{16:226,17:[1,224],26:26,120:$V8,159:227,171:223,174:225,319:$V9,330:$Vh1},{17:[1,229]},{16:231,26:26,120:$V8,186:230,187:232,188:[2,425],189:233,190:234,319:$V9,324:$Vl,330:$Vm},{16:235,26:26,120:$V8,319:$V9},{17:[1,236]},{17:[1,237]},{17:[1,238]},o($VK,[2,341],{332:239,302:$VL}),o($V7,[2,14]),o($V7,[2,376]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,378]),{20:[2,21]},o($VM,[2,327]),{325:[2,333]},{16:122,26:123,120:$V8,305:$VN,319:$V9,327:240},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:241,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V61,[2,329]),{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:242,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($VM,[2,337]),o($V71,[2,297]),o($V71,[2,300],{189:66,190:67,309:128,311:129,92:131,28:132,26:133,250:243,93:$Ve,120:$Vf,305:$Vg,306:$VO,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm}),o($VM,[2,281]),o($VM,[2,303]),{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:127,252:244,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V7,[2,34]),o($V7,[2,390]),{20:[2,37]},{17:[2,35]},{120:[1,245]},o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,80],{89:$Vb1}),o($VM,[2,81]),o($VM,[2,82]),{26:133,28:132,89:$Vi1,92:131,93:$Ve,94:246,120:$Vf,189:66,190:67,250:251,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:247,335:$Vj1},o($VM,[2,75]),o($VM,[2,78]),o($VM,[2,79],{89:$Vb1}),{26:133,28:132,61:$Vk1,90:253,92:131,93:$Ve,120:$Vf,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:254,314:255,315:256,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,335:$Vj1,338:$Vl1},o($VM,[2,77]),{91:[1,260]},{91:[2,286],302:$Vm1,312:261},o([91,302],$Va1),o($V7,[2,379],{31:263,17:[1,264]}),{20:[2,24],34:265,35:266,42:[1,267]},o($Vg1,[2,382]),{17:[1,268]},o($V7,[2,385],{41:269,17:[1,270]}),o($V7,[2,391],{98:271,17:[1,272]}),o($V7,[2,87]),o($V7,[2,394]),{20:[2,96]},{18:[1,273]},{18:[1,274]},{18:[1,275]},{17:[1,276]},{17:[1,277]},{18:[1,278]},{17:[2,154],104:[1,280],175:279,176:[2,421]},o($Vn1,[2,156]),o($Vn1,[2,157]),{16:57,26:26,102:281,120:$V8,319:$V9},{18:[1,282]},{17:[1,283]},{186:284,188:[2,426],189:233,190:234,324:$Vl,330:$Vm},{188:[1,285]},{17:[2,173]},{17:[2,174]},{17:[1,286]},{18:[1,287]},{18:[1,288]},o([20,37,42,118,121,125,132,169,170,177,185,191,207],[2,109]),o($VK,[2,342]),{302:$V51,325:[2,334],329:289},o($V61,[2,328]),o($V61,[2,330]),o($V71,[2,298],{316:290,302:$V81}),{91:[1,291]},{17:[2,118]},{91:[1,292]},{347:293,348:294,349:$Vo1,350:$Vp1},o($Vq1,[2,348]),o($Vq1,[2,349]),{26:133,28:132,89:$Vi1,92:131,93:$Ve,120:$Vf,189:66,190:67,250:251,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:297,335:$Vj1},{104:$Vr1,188:$Vs1,298:$Vt1,300:$Vu1,334:$Vv1,335:$Vw1,339:$Vx1,340:$Vy1,341:$Vz1,342:$VA1,343:$VB1,344:$VC1,345:$VD1,346:$VE1},{89:[1,312]},{91:[1,313]},{91:[2,292]},{91:[2,293]},{91:[2,294]},{104:$Vr1,188:$Vs1,298:$Vt1,300:$Vu1,334:$Vv1,335:$Vw1,337:[1,314],339:$Vx1,340:$Vy1,341:$Vz1,342:$VA1,343:$VB1,344:$VC1,345:$VD1,346:$VE1},{190:315,330:$Vm},{190:316,330:$Vm},o($VU,[2,285]),{91:[2,287]},{26:209,28:132,93:$Ve,120:$Vf,189:66,190:67,305:$Vg,311:317,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V7,[2,22]),o($V7,[2,380]),{20:[2,23]},{20:[2,25]},{17:[1,318]},{18:[1,319]},o($V7,[2,29]),o($V7,[2,386]),o($V7,[2,85]),o($V7,[2,392]),{26:322,81:323,122:320,124:321,319:$V9},{16:328,26:26,120:$V8,126:324,128:325,129:326,130:327,319:$V9},{133:329,135:330,136:331,141:$VF1,144:$VG1,150:$VH1,151:$VI1},o($VH,[2,149]),o($VH,[2,150]),{16:226,26:26,120:$V8,159:227,171:337,172:336,174:225,319:$V9,330:$Vh1},{176:[1,338]},{176:[2,422]},{331:[1,339]},{16:342,26:26,120:$V8,178:340,180:341,319:$V9},o($VH,[2,170]),{17:[1,343]},{16:344,26:26,120:$V8,319:$V9},o($VH,[2,107]),{16:347,26:26,120:$V8,208:345,210:346,319:$V9},{192:348,194:349,195:$VJ1,198:$VK1,200:$VL1},{325:[2,335]},o($V71,[2,299]),o($VM,[2,295]),o($VM,[2,83]),o($VM1,[2,371]),{26:133,28:132,89:$Vi1,92:131,93:$Ve,120:$Vf,189:66,190:67,250:251,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:353,335:$Vj1},o($VN1,[2,373]),o($VN1,[2,374]),{91:[1,354]},o($Vq1,[2,351]),{188:[1,356],334:[1,355]},{335:[1,358],336:[1,357]},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:359,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:360,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:361,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:362,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:363,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:364,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:365,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:366,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:367,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:368,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:369,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{26:133,28:132,89:$Vi1,92:131,93:$Ve,120:$Vf,189:66,190:67,250:251,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:370,335:$Vj1},o($VM,[2,76]),{26:198,85:371,89:$Ve1,92:199,93:$Vf1,319:$V9},{337:[1,372]},{337:[1,373]},{91:[2,288],302:$Vm1,312:374},{18:[1,375]},{16:377,26:26,38:376,120:$V8,319:$V9},{20:[1,378]},{17:[1,379]},{17:[2,283],89:$VV},{17:[2,284]},{20:[1,380]},{17:[1,381]},{17:$Vc1,52:382,119:$Vd1},o($VP,[2,119]),o($VU,$VO1,{131:383,49:384,53:$Vc}),{20:[1,385]},{17:[1,386]},{16:387,17:[1,388],26:26,120:$V8,319:$V9},{16:389,26:26,120:$V8,319:$V9},{16:390,26:26,120:$V8,319:$V9},o($VP1,[2,130]),o($VP1,[2,131]),{20:[1,391]},{17:[1,392]},{17:[2,155]},o([17,104,119,165,176,319],[2,338]),{20:[1,393]},{17:[1,394]},{17:[2,161],103:[1,395]},o($VH,[2,171]),{186:396,189:233,190:234,324:$Vl,330:$Vm},{20:[1,397]},{16:347,20:[2,186],26:26,120:$V8,208:398,210:346,319:$V9},{17:[1,399]},{20:[1,400]},{20:[2,179],192:401,194:349,195:$VJ1,198:$VK1,200:$VL1},{17:[1,402]},{17:[1,403]},{17:[1,404]},o($VM1,[2,372]),o($Vq1,[2,350]),o($Vq1,[2,352]),{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:405,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($Vq1,[2,353]),{336:[1,406]},o($Vq1,[2,359]),o($Vq1,[2,360]),o($Vq1,[2,361]),o($Vq1,[2,362]),o($Vq1,[2,363]),o($Vq1,[2,364]),o($Vq1,[2,365]),o($Vq1,[2,367]),o($Vq1,[2,368]),o($Vq1,[2,369]),o($Vq1,[2,370]),{91:[1,407]},o($VM1,[2,356]),{26:198,85:408,89:$Ve1,92:199,93:$Vf1,319:$V9},{26:198,85:409,89:$Ve1,92:199,93:$Vf1,319:$V9},{91:[2,289]},{16:411,26:26,43:410,120:$V8,319:$V9},{20:[1,412]},{17:[1,413]},o($VH,[2,395],{123:414,17:[1,415]}),{20:[2,111],26:322,81:323,122:416,124:321,319:$V9},o($VH,[2,397],{127:417,17:[1,418]}),{16:328,20:[2,114],26:26,120:$V8,126:419,128:325,129:326,130:327,319:$V9},{17:[2,116]},o($Vn,$Vo,{79:77,80:78,26:79,81:80,50:420,319:$V9}),o($VU,[2,121]),o($VH,[2,399],{134:421,17:[1,422]}),{20:[2,123],133:423,135:330,136:331,141:$VF1,144:$VG1,150:$VH1,151:$VI1},o($VQ1,[2,401],{137:424,153:425,157:427,160:429,121:$VR1,154:[1,426],158:[1,428]}),{18:[1,431]},o($VS1,[2,407],{142:432,156:433,121:$VT1}),o($VS1,[2,411],{145:435,156:437,121:$VT1,147:[1,436]}),o($VH,[2,419],{173:438,17:[1,439]}),{16:226,20:[2,152],26:26,120:$V8,159:227,171:337,172:440,174:225,319:$V9,330:$Vh1},o($VH,[2,423],{179:441,17:[1,442]}),{18:[1,443]},{16:444,26:26,120:$V8,319:$V9},{17:[1,445]},o($VH,[2,439],{209:446,17:[1,447]}),{20:[2,187]},{18:[1,448]},o($VH,[2,427],{193:449,17:[1,450]}),{20:[2,180]},{18:[1,451]},{18:[1,452]},{18:[1,453]},o($Vq1,[2,366]),o($Vq1,[2,354]),o($Vq1,[2,355]),o($VM1,[2,357]),o($VM1,[2,358]),{20:[1,454]},{17:[1,455]},o($Vg1,[2,383],{39:456,17:[1,457]}),{16:377,20:[2,27],26:26,38:458,120:$V8,319:$V9},o($VH,[2,110]),o($VH,[2,396]),{20:[2,112]},o($VH,[2,113]),o($VH,[2,398]),{20:[2,115]},o($VP,$VQ,{82:137,83:138,51:459,84:$VR,86:$VS,88:$VT}),o($VH,[2,122]),o($VH,[2,400]),{20:[2,124]},o($VU1,[2,403],{138:460,164:461,165:$VV1}),o($VQ1,[2,402]),{26:464,120:[1,465],155:463,222:[1,466],319:$V9},o($VQ1,[2,136]),{16:468,26:26,120:$V8,159:467,319:$V9,330:$Vh1},o($VQ1,[2,138]),{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:469,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{16:473,26:26,120:$V8,319:$V9},o($VU,[2,409],{143:474,164:475,165:$VV1}),o($VS1,[2,408]),{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:476,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},o($VU,[2,413],{146:477,164:478,165:$VV1}),{16:479,26:26,120:$V8,319:$V9},o($VS1,[2,412]),o($VH,[2,151]),o($VH,[2,420]),{20:[2,153]},o($VH,[2,158]),o($VH,[2,424]),{16:484,26:26,120:$V8,181:480,182:481,183:482,184:483,319:$V9},{17:[2,162]},o($VH,[2,172]),o($VH,[2,185]),o($VH,[2,440]),o($VW1,[2,190],{211:485,213:486,216:487,217:[1,488]}),o($VH,[2,175]),o($VH,[2,428]),{163:$VX1,196:489,202:490,205:$VY1},{163:$VX1,196:493,202:490,205:$VY1},{163:$VX1,196:494,202:490,205:$VY1},{17:[1,496],20:[2,387],44:495},{16:411,20:[2,31],26:26,43:497,120:$V8,319:$V9},o($Vg1,[2,26]),o($Vg1,[2,384]),{20:[2,28]},o($VP,[2,279]),o($VP,$Vo,{79:77,80:78,26:79,81:80,50:498,319:$V9}),o($VU1,[2,404]),{16:499,26:26,120:$V8,319:$V9},o($VQ1,[2,134],{156:500,121:$VT1}),o($VZ1,[2,305]),o($VZ1,[2,306]),o($VZ1,[2,307]),o($VQ1,[2,137]),o($VQ1,[2,141],{160:501,121:$VR1}),o($VQ1,[2,145]),o($V_1,[2,345],{347:293,348:294,349:$Vo1,350:$Vp1}),o($V_1,[2,346]),o($V_1,[2,347]),{53:[1,503],139:502},o($Vn,$Vo,{79:77,80:78,26:79,81:80,50:504,319:$V9}),o($VU,[2,410]),o($VS1,[2,139]),o($Vn,$Vo,{79:77,80:78,26:79,81:80,50:505,319:$V9}),o($VU,[2,414]),o($VS1,[2,415],{148:506,156:507,121:$VT1}),{20:[1,508]},{17:[1,509]},{17:[2,165],121:[1,510]},{17:[2,166]},o($V$1,[2,167],{167:[1,511]}),{20:[1,512]},{214:513,223:514,224:515,225:516,226:517,227:$V02,228:$V12,264:$V22},o($VW1,[2,191]),{16:524,17:[1,522],26:26,120:$V8,130:525,218:521,221:523,319:$V9},{20:[1,526]},{20:[2,181],163:$VX1,196:527,202:490,205:$VY1},{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:528,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{17:[1,529]},{20:[1,530]},{20:[1,531]},{20:[2,30]},{20:[2,388]},{20:[2,32]},{17:$Vc1,52:532,119:$Vd1},o($VU,[2,146]),o($VQ1,[2,135]),o($VQ1,[2,142]),o($VU1,[2,405],{140:533,164:534,165:$VV1}),{17:[1,535]},o($VP,$VQ,{82:137,83:138,51:536,84:$VR,86:$VS,88:$VT}),o($VP,$VQ,{82:137,83:138,51:537,84:$VR,86:$VS,88:$VT}),o($VU,[2,417],{149:538,164:539,165:$VV1}),o($VS1,[2,416]),{16:342,17:[1,540],26:26,120:$V8,178:541,180:341,319:$V9},{16:484,20:[2,163],26:26,120:$V8,181:542,182:481,183:482,184:483,319:$V9},{26:322,81:323,124:543,319:$V9},o($V$1,[2,168]),o($V32,[2,441],{212:544,17:[1,545]}),{20:[2,227],215:546,247:547,249:$V42},o($V52,[2,198],{223:514,224:515,225:516,226:517,214:549,227:$V02,228:$V12,264:$V22}),o($V62,[2,200]),o($V62,[2,201]),{16:550,26:26,120:$V8,319:$V9},{265:[1,551]},o($Vd,[2,202]),{229:552,274:[1,553],275:[1,554],276:[1,555],277:[1,556]},{17:[1,557]},{18:[1,558]},{17:[2,196]},o([17,84,86,88,319],$VO1,{131:383,49:384,53:[1,559]}),{17:[2,282]},o($V72,[2,429],{197:560,17:[1,561]}),{20:[2,182]},{17:[1,562]},{18:[1,563]},o($V72,[2,431],{199:564,17:[1,565]}),o($V72,[2,433],{201:566,17:[1,567]}),{17:[2,125]},o($VP,$Vo,{79:77,80:78,26:79,81:80,50:568,319:$V9}),o($VU1,[2,406]),{18:[1,569]},{17:$Vc1,52:570,119:$Vd1},{17:$Vc1,52:571,119:$Vd1},o($Vn,$Vo,{79:77,80:78,26:79,81:80,50:572,319:$V9}),o($VU,[2,418]),{20:[2,159]},{20:[2,160]},{20:[2,164]},{17:[2,169]},o($V32,[2,188]),o($V32,[2,442]),{20:[2,189]},{17:[1,573],253:[1,574]},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:575,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V52,[2,199]),{53:[1,588],121:[1,587],147:[1,584],163:[1,586],230:576,231:577,232:580,233:[1,581],278:579,280:[1,585],281:578,282:[1,582],283:[1,583]},{17:[1,589]},o($Vd,[2,203]),o($Vd,[2,241]),o($Vd,[2,242]),o($Vd,[2,243]),o($Vd,[2,244]),o($VW1,[2,192]),{16:524,26:26,120:$V8,130:525,218:591,219:590,221:523,319:$V9},{16:92,26:26,54:81,55:82,56:83,57:84,58:85,59:86,60:87,61:$Vp,62:$Vq,63:$Vr,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,70:$Vy,71:$Vz,72:$VA,73:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,120:$V8,222:[1,592],319:$V9},o($V72,[2,176]),o($V72,[2,430]),{18:[1,593]},{203:[1,594]},o($V72,[2,177]),o($V72,[2,432]),o($V72,[2,178]),o($V72,[2,434]),{17:$Vc1,52:595,119:$Vd1},{162:596,163:$V82},{17:[2,127]},{17:[2,128]},o($VP,$VQ,{82:137,83:138,51:598,84:$VR,86:$VS,88:$VT}),{20:[2,228]},{17:[1,599]},o([17,253],[2,223]),{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:600,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},o($V62,[2,205]),o($V92,[2,252]),o($V92,[2,253]),{17:[1,601]},o($V92,[2,249],{234:[1,602]}),o($V92,[2,250]),{233:[1,603]},{279:[1,604]},o($V92,[2,246]),o($V92,[2,247]),o($V92,[2,248]),{17:[2,206]},o($V62,[2,237]),{20:[1,605]},{17:[1,606]},o([17,84,86,88],$Vo,{79:77,80:78,26:79,81:80,50:607,319:$V9}),{203:[1,608]},{20:[1,609]},{17:[1,610]},{20:[1,611]},{157:612,158:[1,613]},{17:$Vc1,52:614,119:$Vd1},{18:[1,615]},o($V62,[2,204]),{18:[1,616]},{17:[2,207],165:[1,617]},o($V92,[2,251]),o($V92,[2,245]),o($VW1,[2,443],{220:618,17:[1,619]}),{16:524,20:[2,194],26:26,120:$V8,130:525,218:591,219:620,221:523,319:$V9},{17:$VQ,51:621,82:137,83:138,84:$VR,86:$VS,88:$VT},{20:[1,622]},o($Va2,[2,437],{206:623,17:[1,624]}),{20:[1,625]},o($VQ1,[2,140]),{17:[1,626]},{16:468,26:26,120:$V8,319:$V9},{17:[2,129]},{163:$Vb2,254:627,256:628},{163:$Vc2,236:630,240:631},{235:[1,633]},o($VW1,[2,193]),o($VW1,[2,444]),{20:[2,195]},{17:[2,197]},o($Va2,[2,435],{204:634,17:[1,635]}),o($Va2,[2,184]),o($Va2,[2,438]),{17:[2,126]},{20:[2,143],162:636,163:$V82},{20:[1,637]},{17:[1,638]},{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:639,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{20:[1,640],238:641,243:642,245:[1,643],246:[1,644]},o($Vd2,[2,212],{240:631,236:645,163:$Vc2}),{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:646,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{17:[2,208]},o($Va2,[2,183]),o($Va2,[2,436]),{20:[2,144]},{17:[1,648],20:[2,449],255:647},{20:[2,232],163:$Vb2,254:649,256:628},{241:[1,650]},o($V62,[2,445],{237:651,17:[1,652]}),{20:[1,653]},{241:[1,654]},{241:[2,217]},{241:[2,218]},o($Vd2,[2,213]),{241:[1,655]},{20:[2,229]},{20:[2,450]},{20:[2,233]},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,248:657,250:656,251:$Ve2,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},o($V62,[2,209]),o($V62,[2,446]),o($V62,[2,447],{239:659,17:[1,660]}),{17:[1,663],26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:664,189:66,190:67,242:661,244:662,247:665,248:666,249:$V42,250:257,251:$Ve2,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{17:[1,668],26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:664,189:66,190:67,242:667,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{17:[2,230]},{17:[2,231]},{26:670,120:[1,669],319:$V9},o($V62,[2,210]),o($V62,[2,448]),{17:[1,671]},{17:[1,672]},{18:[1,673]},{17:[1,674]},{17:[2,219]},{17:[2,220]},o([20,163,245,246],[2,211]),{18:[1,675]},{17:[2,224]},{17:[2,225],89:[1,676]},{20:[2,214]},{20:[2,215]},{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:678,189:66,190:67,244:677,247:665,248:666,249:$V42,250:257,251:$Ve2,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},o($Vf2,[2,221]),{26:133,28:132,61:$Vk1,89:$Vi1,92:131,93:$Ve,94:471,120:$Vf,161:678,189:66,190:67,250:257,305:$Vg,306:$VO,309:128,311:129,313:248,314:249,315:472,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm,333:470,335:$Vj1,338:$Vl1},{26:133,28:132,92:131,93:$Ve,120:$Vf,189:66,190:67,250:127,252:679,305:$Vg,306:$VO,309:128,311:129,319:$V9,320:$Vh,321:$Vi,322:$Vj,323:$Vk,324:$Vl,330:$Vm},{17:[1,680]},{17:[1,681]},{91:[1,682]},{20:[1,683]},{20:[1,684]},{17:[2,226]},{20:[2,216]},o($Vf2,[2,222])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,89],62:[2,19],149:[2,94],175:[2,16],178:[2,21],180:[2,333],193:[2,37],194:[2,35],218:[2,96],233:[2,173],234:[2,174],245:[2,118],254:[2,292],255:[2,293],256:[2,294],261:[2,287],265:[2,23],266:[2,25],280:[2,422],289:[2,335],323:[2,284],338:[2,155],374:[2,289],382:[2,116],398:[2,187],401:[2,180],416:[2,112],419:[2,115],423:[2,124],440:[2,153],444:[2,162],458:[2,28],483:[2,166],495:[2,30],496:[2,388],497:[2,32],523:[2,196],525:[2,282],527:[2,182],532:[2,125],540:[2,159],541:[2,160],542:[2,164],543:[2,169],546:[2,189],570:[2,127],571:[2,128],573:[2,228],588:[2,206],614:[2,129],620:[2,195],621:[2,197],625:[2,126],633:[2,208],636:[2,144],643:[2,217],644:[2,218],647:[2,229],648:[2,450],649:[2,233],656:[2,230],657:[2,231],665:[2,219],666:[2,220],669:[2,224],671:[2,214],672:[2,215],682:[2,226],683:[2,216]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'overrides', 'override']);

    //allowed keywords of different state
    const SUB_KEYWORDS = { 
        // level 1
        'overrides': new Set(['entities']),
        'override': new Set(['entity']),
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', 'interface', 'code', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),        
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),
        'entity.input': new Set(['extends']),     

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),   
        
        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block', 

        'override.entity': 'entity',       

        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        defineEntityOverride(name, value, line) {
            this.define('entityOverride', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineOverrides(name, value, line) {
            this.define('overrides', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 322;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 120;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 120;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 120;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 93;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 320;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 305;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 305;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 222;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 323;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 306;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 321;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 319;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = geml;
exports.Parser = geml.Parser;
exports.parse = function () { return geml.parse.apply(geml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}