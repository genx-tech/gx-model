/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var geml = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,101,269,276],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,99,100,115,117,143,150,154,159,161,163,172,183,228,268,286,294,296,297,313,328,333,339,340],$Vb=[2,324],$Vc=[1,51],$Vd=[116,328],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,82,84,86,115],$Vo=[2,63],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,114,117,121,128,165,166,173,180,186,202],$VI=[2,105],$VJ=[1,110],$VK=[17,340],$VL=[1,114],$VM=[17,20,82,84,86,89,100,115,161,183,222,223,236,244,248,259,309,311,313,328,334,340,343,344,346,348,349,350,351,352,353,354,355,358,359],$VN=[1,124],$VO=[1,130],$VP=[17,115],$VQ=[2,69],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,82,84,86,115,328],$VV=[1,143],$VW=[1,166],$VX=[1,159],$VY=[1,160],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[1,164],$V11=[1,165],$V21=[1,168],$V31=[1,167],$V41=[1,184],$V51=[313,334],$V61=[17,20,82,84,86,89,100,115,117,161,183,222,223,236,244,248,259,309,311,313,328,334,340,343,344,346,348,349,350,351,352,353,354,355,358,359],$V71=[89,340],$V81=[1,190],$V91=[17,20,89,100,115,161,183,222,223,236,244,248,259,309,311,313,328,334,340,343,344,346,348,349,350,351,352,353,354,355,358,359],$Va1=[2,301],$Vb1=[1,193],$Vc1=[2,114],$Vd1=[1,198],$Ve1=[1,204],$Vf1=[1,203],$Vg1=[20,40],$Vh1=[1,229],$Vi1=[2,249],$Vj1=[1,244],$Vk1=[1,245],$Vl1=[1,246],$Vm1=[1,247],$Vn1=[1,261],$Vo1=[1,263],$Vp1=[1,269],$Vq1=[1,270],$Vr1=[1,273],$Vs1=[17,100,172],$Vt1=[2,185],$Vu1=[1,300],$Vv1=[1,313],$Vw1=[1,314],$Vx1=[17,20,82,84,86,89,115,161,222,223,236,244,259,328,358,359],$Vy1=[1,318],$Vz1=[1,325],$VA1=[1,320],$VB1=[1,319],$VC1=[1,316],$VD1=[1,317],$VE1=[1,321],$VF1=[1,322],$VG1=[1,323],$VH1=[1,324],$VI1=[1,326],$VJ1=[1,327],$VK1=[1,328],$VL1=[1,329],$VM1=[1,350],$VN1=[1,351],$VO1=[1,352],$VP1=[1,353],$VQ1=[1,367],$VR1=[1,368],$VS1=[1,369],$VT1=[20,298,302,303,314,317],$VU1=[1,381],$VV1=[1,378],$VW1=[1,380],$VX1=[1,379],$VY1=[1,376],$VZ1=[1,377],$V_1=[20,117,143,159,222,223,228,259,294,296,297,298,302,303,314,317],$V$1=[17,117],$V02=[17,20,82,84,86,89,115,161,222,223,236,244,259,328],$V12=[87,91,116,315,316,328,329,330,331,332,333,339,344],$V22=[2,117],$V32=[17,116,328],$V42=[20,302,303,314,317],$V52=[59,87,91,116,315,316,328,329,330,331,332,333,339,344,347],$V62=[2,259],$V72=[20,116,328],$V82=[17,115,161,328],$V92=[1,480],$Va2=[17,82,84,86,115,161,328],$Vb2=[1,484],$Vc2=[20,303,314,317],$Vd2=[17,20,82,84,86,115,161,222,223,236,244,259,328],$Ve2=[17,115,328],$Vf2=[1,519],$Vg2=[1,522],$Vh2=[1,523],$Vi2=[1,543],$Vj2=[1,544],$Vk2=[20,314,317],$Vl2=[17,115,117,161,308,309,310,311,313,328],$Vm2=[1,581],$Vn2=[1,582],$Vo2=[1,580],$Vp2=[20,317],$Vq2=[1,596],$Vr2=[1,619],$Vs2=[20,244],$Vt2=[20,222,223,244,259],$Vu2=[20,190,193,195],$Vv2=[1,668],$Vw2=[17,313],$Vx2=[1,680],$Vy2=[20,159,200],$Vz2=[1,714],$VA2=[1,717],$VB2=[20,240,241],$VC2=[1,746],$VD2=[17,20,159,240,241];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input_source":4,"EOF":5,"input_source_body":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"identifier_or_general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"general_function_call":90,"REGEXP":91,"logical_expression":92,"entity_statement_header":93,"entity_statement_block":94,"entity_statement_option0":95,"entity_statement_header0":96,"entity_base_keywords":97,"identifier_or_string_list":98,"extends":99,"is":100,"entity":101,"entity_sub_items":102,"entity_sub_item":103,"with_features":104,"has_fields":105,"associations_statement":106,"key_statement":107,"index_statement":108,"input_statement":109,"data_statement":110,"code_statement":111,"interfaces_statement":112,"triggers_statement":113,"code":114,"--":115,"STRING":116,"with":117,"with_features_block":118,"with_features_option0":119,"feature_inject":120,"has":121,"has_fields_block":122,"has_fields_option0":123,"field_item":124,"field_item_body":125,"modifiable_field":126,"type_base_or_not":127,"associations":128,"associations_block":129,"associations_statement_option0":130,"association_item":131,"association_type_referee":132,"association_item_option0":133,"association_item_option1":134,"association_cases_block":135,"association_item_option2":136,"belongsTo":137,"association_item_option3":138,"association_item_option4":139,"refersTo":140,"association_item_option5":141,"association_item_option6":142,"of":143,"association_item_option7":144,"association_item_option8":145,"hasOne":146,"hasMany":147,"association_type_referer":148,"association_through":149,"connectedBy":150,"identifier_string_or_dotname":151,"association_extra_condition":152,"association_connection":153,"being":154,"array_of_identifier_or_string":155,"association_condition":156,"conditional_expression":157,"association_cases":158,"when":159,"association_as":160,"as":161,"association_qualifiers":162,"optional":163,"default":164,"key":165,"index":166,"index_item":167,"index_statement_block":168,"index_statement_option0":169,"index_item_body":170,"index_item_option0":171,"unique":172,"input":173,"input_statement_block":174,"input_statement_option0":175,"input_block":176,"input_block_item":177,"input_block_item_base":178,"input_block_item_with_spec":179,"data":180,"data_records":181,"data_statement_option0":182,"in":183,"inline_object":184,"inline_array":185,"triggers":186,"triggers_statement_block":187,"triggers_statement_option0":188,"triggers_operation":189,"onCreate":190,"triggers_operation_block":191,"triggers_operation_option0":192,"onCreateOrUpdate":193,"triggers_operation_option1":194,"onDelete":195,"triggers_operation_option2":196,"triggers_operation_item":197,"triggers_result_block":198,"triggers_operation_item_option0":199,"always":200,"triggers_operation_item_option1":201,"interface":202,"interfaces_statement_block":203,"interfaces_statement_option0":204,"interface_definition":205,"interface_definition_body":206,"interface_definition_option0":207,"accept_or_not":208,"implementation":209,"return_or_not":210,"accept_statement":211,"accept":212,"accept_param":213,"accept_block":214,"accept_statement_option0":215,"modifiable_param":216,"DOTNAME":217,"operation":218,"find_one_operation":219,"coding_block":220,"find_one_keywords":221,"findOne":222,"find":223,"article_keyword":224,"selection_inline_keywords":225,"case_statement":226,"cases_keywords":227,"by":228,"cases":229,"below":230,"case_condition_block":231,"case_statement_option0":232,"otherwise_statement":233,"case_statement_option1":234,"case_condition_item":235,"=>":236,"condition_as_result_expression":237,"otherwise_keywords":238,"stop_controll_flow_expression":239,"otherwise":240,"else":241,"return_expression":242,"throw_error_expression":243,"return":244,"modifiable_value":245,"throw":246,"gfc_param_list":247,"unless":248,"return_condition_block":249,"return_or_not_option0":250,"return_condition_item":251,"update_operation":252,"update":253,"where_expr":254,"create_operation":255,"create":256,"delete_operation":257,"delete":258,"do":259,"javascript":260,"assign_operation":261,"set":262,"identifier_or_member_access":263,"<-":264,"value":265,"variable_modifier_or_not":266,"entity_fields_selections":267,"->":268,"dataset":269,"dataset_statement_block":270,"dataset_statement_option0":271,"article_keyword_or_not":272,"dataset_join_with_item":273,"dataset_join_with_block":274,"dataset_join_with_item_option0":275,"view":276,"view_statement_block":277,"view_statement_option0":278,"view_main_entity":279,"view_selection_or_not":280,"group_by_or_not":281,"having_or_not":282,"order_by_or_not":283,"skip_or_not":284,"limit_or_not":285,"list":286,"view_selection":287,"a":288,"an":289,"the":290,"one":291,"selection_attributive_keywords":292,"which":293,"where":294,"selection_keywords":295,"selectedBy":296,"selected":297,"group":298,"identifier_string_or_dotname_list":299,"identifier_string_or_dotname_block":300,"group_by_or_not_option0":301,"having":302,"order":303,"order_by_list":304,"order_by_block":305,"order_by_or_not_option0":306,"order_by_clause":307,"ascend":308,"<":309,"descend":310,">":311,"order_by_list0":312,",":313,"offset":314,"INTEGER":315,"REFERENCE":316,"limit":317,"gfc_param0":318,"nfc_param_list":319,"nfc_param":320,"nfc_param_list0":321,"unary_expression":322,"binary_expression":323,"boolean_expression":324,"gfc_param_list0":325,"?":326,"identifier_string_or_dotname_list0":327,"NAME":328,"FLOAT":329,"BOOL":330,"SCRIPT":331,"SYMBOL":332,"{":333,"}":334,"kv_pairs":335,"kv_pair_item":336,"non_exist":337,"kv_pairs0":338,"[":339,"]":340,"identifier_or_string_list0":341,"simple_expression":342,"exists":343,"not":344,"null":345,"~":346,"all":347,">=":348,"<=":349,"==":350,"!=":351,"+":352,"-":353,"*":354,"/":355,"logical_expression_right":356,"logical_operators":357,"and":358,"or":359,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",91:"REGEXP",99:"extends",100:"is",101:"entity",114:"code",115:"--",116:"STRING",117:"with",121:"has",128:"associations",137:"belongsTo",140:"refersTo",143:"of",146:"hasOne",147:"hasMany",150:"connectedBy",154:"being",159:"when",161:"as",163:"optional",164:"default",165:"key",166:"index",172:"unique",173:"input",180:"data",183:"in",186:"triggers",190:"onCreate",193:"onCreateOrUpdate",195:"onDelete",198:"triggers_result_block",200:"always",202:"interface",212:"accept",217:"DOTNAME",222:"findOne",223:"find",228:"by",229:"cases",230:"below",236:"=>",240:"otherwise",241:"else",244:"return",246:"throw",248:"unless",253:"update",254:"where_expr",256:"create",258:"delete",259:"do",260:"javascript",262:"set",263:"identifier_or_member_access",264:"<-",266:"variable_modifier_or_not",268:"->",269:"dataset",276:"view",286:"list",288:"a",289:"an",290:"the",291:"one",293:"which",294:"where",296:"selectedBy",297:"selected",298:"group",302:"having",303:"order",308:"ascend",309:"<",310:"descend",311:">",313:",",314:"offset",315:"INTEGER",316:"REFERENCE",317:"limit",326:"?",328:"NAME",329:"FLOAT",330:"BOOL",331:"SCRIPT",332:"SYMBOL",333:"{",334:"}",339:"[",340:"]",343:"exists",344:"not",345:"null",346:"~",347:"all",348:">=",349:"<=",350:"==",351:"!=",352:"+",353:"-",354:"*",355:"/",358:"and",359:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,4],[81,2],[85,1],[85,1],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[93,1],[93,3],[97,1],[97,1],[96,2],[94,1],[94,2],[102,1],[102,2],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[103,1],[111,3],[32,0],[32,3],[104,6],[118,2],[118,3],[105,6],[122,2],[122,3],[124,2],[50,0],[50,2],[125,1],[127,0],[127,1],[106,6],[129,2],[129,3],[131,6],[131,10],[131,7],[131,7],[131,9],[132,1],[132,1],[148,1],[148,1],[149,2],[149,3],[149,1],[149,2],[149,1],[152,2],[135,5],[153,2],[153,3],[158,3],[158,4],[156,2],[160,2],[162,1],[162,4],[107,3],[108,3],[108,6],[168,2],[168,3],[167,1],[167,3],[170,1],[170,1],[109,6],[174,6],[174,6],[176,2],[176,3],[177,1],[177,1],[178,1],[178,2],[179,3],[110,3],[110,4],[110,6],[181,1],[181,1],[113,6],[189,6],[189,6],[189,6],[187,1],[187,2],[191,1],[191,2],[197,7],[197,6],[112,6],[203,1],[203,2],[205,6],[206,3],[208,0],[208,1],[211,3],[211,6],[214,2],[214,3],[213,1],[213,5],[209,1],[209,2],[218,1],[218,1],[221,1],[221,2],[219,4],[219,3],[227,1],[227,2],[227,4],[226,6],[226,7],[235,4],[231,1],[231,2],[233,4],[233,4],[233,7],[238,1],[238,1],[239,1],[239,1],[237,2],[237,5],[242,2],[243,2],[243,2],[243,5],[210,0],[210,2],[210,7],[251,4],[251,4],[249,2],[249,3],[252,6],[255,5],[257,4],[220,3],[261,6],[267,1],[267,3],[14,7],[270,3],[274,1],[274,2],[273,2],[273,8],[13,7],[277,9],[279,3],[279,4],[280,0],[280,1],[287,3],[272,0],[272,1],[224,1],[224,1],[224,1],[224,1],[292,2],[292,1],[292,1],[292,1],[295,1],[295,1],[295,2],[225,1],[225,1],[281,0],[281,4],[281,7],[282,0],[282,3],[283,0],[283,4],[283,7],[305,2],[305,3],[307,1],[307,2],[307,2],[307,2],[307,2],[304,1],[304,2],[312,2],[312,3],[284,0],[284,3],[284,3],[285,0],[285,3],[285,3],[126,4],[245,1],[245,2],[216,1],[120,1],[120,1],[79,4],[319,1],[319,2],[321,2],[321,3],[320,1],[320,1],[88,1],[88,1],[88,1],[90,4],[247,1],[247,2],[325,2],[325,3],[325,1],[318,1],[318,1],[318,2],[318,1],[151,1],[151,1],[151,1],[300,2],[300,3],[299,1],[299,2],[327,2],[327,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[184,2],[184,3],[336,3],[336,2],[336,3],[337,0],[335,1],[335,2],[338,2],[338,3],[185,2],[185,3],[155,3],[98,1],[98,2],[341,2],[341,3],[265,1],[265,1],[157,1],[157,1],[157,1],[342,1],[342,1],[342,3],[322,2],[322,3],[322,3],[322,4],[322,4],[324,3],[324,4],[324,4],[323,3],[323,3],[323,3],[323,3],[323,3],[323,3],[323,3],[323,4],[323,3],[323,3],[323,3],[323,3],[92,2],[356,2],[357,1],[357,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[95,0],[95,1],[119,0],[119,1],[123,0],[123,1],[130,0],[130,1],[133,0],[133,1],[134,0],[134,1],[136,0],[136,1],[138,0],[138,1],[139,0],[139,1],[141,0],[141,1],[142,0],[142,1],[144,0],[144,1],[145,0],[145,1],[169,0],[169,1],[171,0],[171,1],[175,0],[175,1],[182,0],[182,1],[188,0],[188,1],[192,0],[192,1],[194,0],[194,1],[196,0],[196,1],[199,0],[199,1],[201,0],[201,1],[204,0],[204,1],[207,0],[207,1],[215,0],[215,1],[232,0],[232,1],[234,0],[234,1],[250,0],[250,1],[271,0],[271,1],[275,0],[275,1],[278,0],[278,1],[301,0],[301,1],[306,0],[306,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 108: case 120: case 140: case 149: case 158: case 189: case 227: case 272: case 318:
this.$ = [ $$[$0-1] ];
break;
case 31: case 109: case 121: case 150: case 159: case 190: case 228: case 273: case 319:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 89: case 90: case 138: case 237: case 344:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 91: case 113: case 182: case 343: case 345:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 174: case 176: case 193: case 207: case 238: case 279: case 281: case 296: case 298: case 308: case 320: case 322: case 349: case 351:
this.$ = [ $$[$0] ];
break;
case 72: case 175: case 177: case 194: case 208: case 239: case 280: case 282: case 297: case 299: case 309: case 323: case 350: case 352:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor(...$$[$0])    ;
break;
case 75:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 76:
this.$ = state.normalizeActivator(...$$[$0]);
break;
case 77:
this.$ = [$$[$0].name, $$[$0].args];
break;
case 78:
this.$ = [$$[$0]];
break;
case 79:
this.$ = state.normalizeValidator($$[$0]);
break;
case 80:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 82:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 83:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 85:
this.$ = [ $$[$0], {} ];
break;
case 86:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 93:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 104:
this.$ = { code: $$[$0-1] };
break;
case 106:
this.$ = { comment: $$[$0-1] };
break;
case 107:
this.$ = { features: $$[$0-2] };
break;
case 110:
this.$ = { fields: $$[$0-2] };
break;
case 111:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 112:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 115:
this.$ = { comment: $$[$0] };
break;
case 119:
this.$ = { associations: $$[$0-2] };
break;
case 122:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 123:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 124: case 125:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 126:
this.$ = { type: $$[$0-8], destEntity: $$[$0-5], destField: $$[$0-7], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 131:
this.$ = { by: $$[$0] }    ;
break;
case 132:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 133:
this.$ = { remoteField: $$[$0] }     ;
break;
case 134:
this.$ = { remoteField: $$[$0] }      ;
break;
case 135:
this.$ = { with: $$[$0] };
break;
case 136:
this.$ = { with: $$[$0] }    ;
break;
case 137:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 139:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 141:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 142:
this.$ = $$[$0];;
break;
case 143:
this.$ = { srcField: $$[$0] };
break;
case 144:
this.$ = { optional: true };
break;
case 145:
this.$ = { default: $$[$0-1] };
break;
case 146:
this.$ = { key: $$[$0-1] };
break;
case 147:
this.$ = { indexes: [$$[$0-1]] };
break;
case 148:
this.$ = { indexes: $$[$0-2] };
break;
case 152:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 153: case 154:
this.$ = { fields: $$[$0] };
break;
case 155:
this.$ = { inputs: $$[$0-2] }     ;
break;
case 156:
this.$ = { [$$[$0-5]]: $$[$0-2] }     ;
break;
case 157:
this.$ = { [$$[$0-5]]: $$[$0-2], ...$$[$0] }     ;
break;
case 162:
this.$ = { name: $$[$0] };
break;
case 163:
this.$ = { name: $$[$0-1], optional: true };
break;
case 164:
this.$ = { ...$$[$0-2], spec: $$[$0] };
break;
case 165:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 166:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 167:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 170:
this.$ = { triggers: $$[$0-2] };
break;
case 171:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 172:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 173:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 178:
this.$ = { condition: $$[$0-5], do: $$[$0-2] }    ;
break;
case 179:
this.$ = { do: $$[$0-2] };
break;
case 180:
this.$ = { interfaces: $$[$0-2] };
break;
case 181:
this.$ = Object.assign({}, $$[$0]);
break;
case 183:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 184:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 187:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 188:
this.$ = { accept: $$[$0-2] };
break;
case 192:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 199:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 200:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 204:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 205:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 206:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 209: case 210: case 240: case 337: case 347: case 348: case 360:
this.$ = $$[$0-1];
break;
case 211: case 217:
this.$ = $$[$0-2];
break;
case 218:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 219:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 220:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 221:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 223:
 this.$ = { return: $$[$0-1] }; 
break;
case 224:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 225: case 226:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 229:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 230:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 231:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 232:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 233:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 234:
this.$ = { entity: $$[$0] }     ;
break;
case 235:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 236:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 241:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 242:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 243:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 244:
this.$ = { dataset: $$[$0] };
break;
case 245:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 248:
this.$ = { condition: $$[$0-1] };
break;
case 265:
this.$ = { groupBy: $$[$0-1] };
break;
case 266:
this.$ = { groupBy: $$[$0-2] };
break;
case 268:
this.$ = { having: $$[$0-1] };
break;
case 270:
this.$ = { orderBy: $$[$0-1] };
break;
case 271:
this.$ = { orderBy: $$[$0-2] };
break;
case 274:
this.$ = { field: $$[$0], ascend: true };
break;
case 275: case 276:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 277: case 278:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 284: case 285:
this.$ = { offset: $$[$0-1] };
break;
case 287: case 288:
this.$ = { limit: $$[$0-1] };
break;
case 289:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 291:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 295: case 305:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 301:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 306:
this.$ = [ $$[$0] ]    ;
break;
case 307:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 310: case 346:
this.$ = [];
break;
case 313:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 321:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 336:
this.$ = {}    ;
break;
case 338: case 340:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 339:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 354:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 361:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 362:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 363:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 364:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 365:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 366:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 367:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 368:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 369:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 373:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 374:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 375:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 376:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 377:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 378:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 379:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 380:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 381:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 382:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 383:
this.$ = { operator: 'and' };
break;
case 384:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,269:$V5,276:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,93:17,96:20,101:$V4,269:$V5,276:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,116:$V8,328:$V9},{17:[1,30],23:29,26:31,328:$V9},{16:34,17:[1,33],26:26,44:32,116:$V8,328:$V9},{16:35,26:26,116:$V8,328:$V9},{17:[1,36]},{16:37,26:26,116:$V8,328:$V9},{16:38,26:26,116:$V8,328:$V9},{17:[2,85],97:39,99:[1,40],100:[1,41]},{16:42,26:26,116:$V8,328:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,325]),o([17,20,27,51,82,84,86,87,89,99,100,115,117,143,150,154,159,161,163,172,183,222,223,228,236,244,248,259,268,286,294,296,297,308,309,310,311,313,328,333,334,339,340,343,344,346,348,349,350,351,352,353,354,355,358,359],[2,326]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,83],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,98:56,116:$V8,328:$V9},o($Vd,[2,87]),o($Vd,[2,88]),o([17,99,100],[2,89]),o($V7,[2,13]),{16:59,19:58,26:26,116:$V8,328:$V9},o($V7,[2,17]),{23:61,24:60,26:31,328:$V9},{28:62,91:$Ve,116:$Vf,184:66,185:67,315:$Vg,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,116:$V8,328:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,328:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,116:$V8,328:$V9},{18:[1,107]},o($VH,$VI,{94:108,32:109,115:$VJ}),{18:[1,111]},{18:[1,112]},{17:[2,86]},o($VK,[2,349],{341:113,313:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,327]),o($VM,[2,328]),o($VM,[2,329]),o($VM,[2,330]),o($VM,[2,331]),o($VM,[2,332]),o($VM,[2,333]),o($VM,[2,334]),o($VM,[2,335]),{16:122,26:123,116:$V8,315:$VN,328:$V9,334:[1,119],335:120,336:121},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:127,247:126,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,340:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{49:136,80:137,81:138,82:$VR,84:$VS,86:$VT}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,328:$V9}),o($VU,[2,67],{87:$VV}),o($VU,[2,68]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o([20,37,40],$VI,{30:144,32:145,115:$VJ}),{20:[1,146]},{20:[2,90],102:147,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:158,114:$VW,117:$VX,121:$VY,128:$VZ,165:$V_,166:$V$,173:$V01,180:$V11,186:$V21,202:$V31},{116:[1,169]},{100:[1,172],277:170,279:171},{100:[1,174],270:173},o($VK,[2,350]),{16:175,26:26,116:$V8,328:$V9},o($V7,[2,385],{21:176,17:[1,177]}),{16:59,19:178,20:[2,15],26:26,116:$V8,328:$V9},o($V7,[2,387],{25:179,17:[1,180]}),{20:[2,20],23:61,24:181,26:31,328:$V9},o($VM,[2,336]),{334:[1,182]},{313:$V41,334:[2,342],338:183},{51:[1,185]},o($V51,[2,341],{337:186,51:$Vb}),{51:[1,187]},o($V61,[2,346]),{340:[1,188]},o($V71,[2,306],{325:189,313:$V81}),o($V91,[2,290],{81:138,80:191,82:$VR,84:$VS,86:$VT}),o($VM,[2,311]),o($VM,[2,312],{326:[1,192]}),o($VM,[2,314]),o($VM,[2,300]),o($VM,$Va1,{87:$Vb1}),o($V7,[2,397],{46:194,17:[1,195]}),{16:34,20:[2,35],26:26,44:75,45:196,116:$V8,328:$V9},{17:$Vc1,50:197,115:$Vd1},o($VP,[2,70]),o($V91,[2,71],{81:138,80:199,82:$VR,84:$VS,86:$VT}),{26:201,83:200,87:$Ve1,90:202,91:$Vf1,328:$V9},{26:207,85:205,90:206,328:$V9},{26:207,85:209,87:[1,208],90:206,328:$V9},o($Vn,[2,66]),{26:212,28:132,91:$Ve,116:$Vf,184:66,185:67,315:$Vg,319:210,320:211,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{20:[1,213]},o($Vg1,[2,391],{33:214,36:215,37:[1,216]}),o($V7,[2,399],{95:217,17:[1,218]}),{20:[2,91]},{20:[2,92],102:219,103:148,104:149,105:150,106:151,107:152,108:153,109:154,110:155,111:156,112:157,113:158,114:$VW,117:$VX,121:$VY,128:$VZ,165:$V_,166:$V$,173:$V01,180:$V11,186:$V21,202:$V31},o($VH,[2,94]),o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),{17:[1,220]},{17:[1,221]},{17:[1,222]},{16:223,26:26,116:$V8,328:$V9},{16:227,17:[1,225],26:26,116:$V8,155:228,167:224,170:226,328:$V9,339:$Vh1},{17:[1,230]},{16:232,26:26,116:$V8,181:231,182:233,183:[2,431],184:234,185:235,328:$V9,333:$Vl,339:$Vm},{16:236,26:26,116:$V8,328:$V9},{17:[1,237]},{17:[1,238]},{17:[1,239]},{20:[1,240]},{17:[1,241]},o($Vd,$Vi1,{272:242,224:243,288:$Vj1,289:$Vk1,290:$Vl1,291:$Vm1}),{20:[1,248]},o($Vd,$Vi1,{224:243,272:249,288:$Vj1,289:$Vk1,290:$Vl1,291:$Vm1}),o($VK,[2,351],{341:250,313:$VL}),o($V7,[2,14]),o($V7,[2,386]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,388]),{20:[2,21]},o($VM,[2,337]),{334:[2,343]},{16:122,26:123,116:$V8,315:$VN,328:$V9,336:251},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:252,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($V51,[2,339]),{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:253,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($V61,[2,347]),o($V71,[2,307]),o($V71,[2,310],{184:66,185:67,318:128,320:129,90:131,28:132,26:133,245:254,91:$Ve,116:$Vf,315:$Vg,316:$VO,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm}),o($VM,[2,291]),o($VM,[2,313]),{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:127,247:255,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($V7,[2,33]),o($V7,[2,398]),{20:[2,36]},{17:[2,34]},{116:[1,256]},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,79],{87:$Vb1}),o($VM,[2,80]),o($VM,[2,81]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,92:257,116:$Vf,184:66,185:67,245:262,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:258,344:$Vo1},o($VM,[2,74]),o($VM,[2,77]),o($VM,[2,78],{87:$Vb1}),{26:133,28:132,59:$Vp1,88:264,90:131,91:$Ve,116:$Vf,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:265,323:266,324:267,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,344:$Vo1,347:$Vq1},o($VM,[2,76]),{89:[1,271]},{89:[2,296],313:$Vr1,321:272},o([89,313],$Va1),o($V7,[2,389],{31:274,17:[1,275]}),{20:[2,24],34:276,35:277,40:[1,278]},o($Vg1,[2,392]),{17:[1,279]},o($V7,[2,84]),o($V7,[2,400]),{20:[2,93]},{18:[1,280]},{18:[1,281]},{18:[1,282]},{17:[1,283]},{17:[1,284]},{18:[1,285]},{17:[2,151],100:[1,287],171:286,172:[2,427]},o($Vs1,[2,153]),o($Vs1,[2,154]),{16:57,26:26,98:288,116:$V8,328:$V9},{18:[1,289]},{17:[1,290]},{181:291,183:[2,432],184:234,185:235,333:$Vl,339:$Vm},{183:[1,292]},{17:[2,168]},{17:[2,169]},{17:[1,293]},{18:[1,294]},{18:[1,295]},o([20,37,40,114,117,121,128,165,166,173,180,186,202],[2,106]),o($V7,[2,461],{278:296,17:[1,297]}),o([20,117,143,159,228,294,296,297,298,302,303,314,317],$Vt1,{208:298,211:299,212:$Vu1}),{16:301,26:26,116:$V8,328:$V9},o($Vd,[2,250]),o($Vd,[2,251]),o($Vd,[2,252]),o($Vd,[2,253]),o($Vd,[2,254]),o($V7,[2,457],{271:302,17:[1,303]}),{16:306,26:26,116:$V8,267:305,273:304,328:$V9},o($VK,[2,352]),{313:$V41,334:[2,344],338:307},o($V51,[2,338]),o($V51,[2,340]),o($V71,[2,308],{325:308,313:$V81}),{89:[1,309]},{17:[2,115]},{89:[1,310]},{356:311,357:312,358:$Vv1,359:$Vw1},o($Vx1,[2,358]),o($Vx1,[2,359]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,116:$Vf,184:66,185:67,245:262,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:315,344:$Vo1},{100:$Vy1,183:$Vz1,309:$VA1,311:$VB1,343:$VC1,344:$VD1,348:$VE1,349:$VF1,350:$VG1,351:$VH1,352:$VI1,353:$VJ1,354:$VK1,355:$VL1},{87:[1,330]},{89:[1,331]},{89:[2,302]},{89:[2,303]},{89:[2,304]},{100:$Vy1,183:$Vz1,309:$VA1,311:$VB1,343:$VC1,344:$VD1,346:[1,332],348:$VE1,349:$VF1,350:$VG1,351:$VH1,352:$VI1,353:$VJ1,354:$VK1,355:$VL1},{185:333,339:$Vm},{185:334,339:$Vm},o($VU,[2,295]),{89:[2,297]},{26:212,28:132,91:$Ve,116:$Vf,184:66,185:67,315:$Vg,320:335,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($V7,[2,22]),o($V7,[2,390]),{20:[2,23]},{20:[2,25]},{17:[1,336]},{18:[1,337]},{26:340,79:341,118:338,120:339,328:$V9},{16:346,26:26,116:$V8,122:342,124:343,125:344,126:345,328:$V9},{129:347,131:348,132:349,137:$VM1,140:$VN1,146:$VO1,147:$VP1},o($VH,[2,146]),o($VH,[2,147]),{16:227,26:26,116:$V8,155:228,167:355,168:354,170:226,328:$V9,339:$Vh1},{172:[1,356]},{172:[2,428]},{340:[1,357]},{16:359,26:26,116:$V8,174:358,328:$V9},o($VH,[2,165]),{17:[1,360]},{16:361,26:26,116:$V8,328:$V9},o($VH,[2,104]),{16:364,26:26,116:$V8,203:362,205:363,328:$V9},{187:365,189:366,190:$VQ1,193:$VR1,195:$VS1},o($V7,[2,242]),o($V7,[2,462]),o($VT1,[2,246],{280:370,287:371,225:372,295:373,292:374,117:$VU1,143:$VV1,159:$VW1,228:[1,375],294:$VX1,296:$VY1,297:$VZ1}),o($V_1,[2,186]),{16:385,17:[1,383],26:26,116:$V8,126:386,213:382,216:384,328:$V9},{17:[2,244],286:[1,387]},o($V7,[2,236]),o($V7,[2,458]),{20:[2,237]},{17:[1,388],117:[1,389]},o($V$1,[2,234],{268:[1,390]}),{334:[2,345]},o($V71,[2,309]),o($VM,[2,305]),o($VM,[2,82]),o($V02,[2,381]),{26:133,28:132,87:$Vn1,90:131,91:$Ve,116:$Vf,184:66,185:67,245:262,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:391,344:$Vo1},o($V12,[2,383]),o($V12,[2,384]),{89:[1,392]},o($Vx1,[2,361]),{183:[1,394],343:[1,393]},{344:[1,396],345:[1,395]},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:397,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:398,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:399,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:400,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:401,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:402,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:403,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:404,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:405,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:406,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:407,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{26:133,28:132,87:$Vn1,90:131,91:$Ve,116:$Vf,184:66,185:67,245:262,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:408,344:$Vo1},o($VM,[2,75]),{26:201,83:409,87:$Ve1,90:202,91:$Vf1,328:$V9},{346:[1,410]},{346:[1,411]},{89:[2,298],313:$Vr1,321:412},{18:[1,413]},{16:415,26:26,38:414,116:$V8,328:$V9},{20:[1,416]},{17:[1,417]},{17:[2,293],87:$VV},{17:[2,294]},{20:[1,418]},{17:[1,419]},{17:$Vc1,50:420,115:$Vd1},o($VP,[2,116]),o($VU,$V22,{127:421,47:422,51:$Vc}),{20:[1,423]},{17:[1,424]},{16:425,17:[1,426],26:26,116:$V8,328:$V9},{16:427,26:26,116:$V8,328:$V9},{16:428,26:26,116:$V8,328:$V9},o($V32,[2,127]),o($V32,[2,128]),{20:[1,429]},{17:[1,430]},{17:[2,152]},o([17,100,115,161,172,328],[2,348]),{20:[1,431]},{17:[1,432]},o($VH,[2,166]),{181:433,184:234,185:235,333:$Vl,339:$Vm},{20:[1,434]},{16:364,20:[2,181],26:26,116:$V8,203:435,205:363,328:$V9},{17:[1,436]},{20:[1,437]},{20:[2,174],187:438,189:366,190:$VQ1,193:$VR1,195:$VS1},{17:[1,439]},{17:[1,440]},{17:[1,441]},o($V42,[2,264],{281:442,298:[1,443]}),o($VT1,[2,247]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:444,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},o($V52,[2,262]),o($V52,[2,263]),o($V52,$V62),o($V52,[2,260]),{228:[1,448]},{293:[1,449]},o($V52,[2,256]),o($V52,[2,257]),o($V52,[2,258]),{17:[1,450]},{18:[1,451]},{17:[2,191]},o([17,82,84,86,328],$V22,{127:421,47:422,51:[1,452]}),{17:[2,292]},{17:[2,245]},o($V72,[2,240]),{51:[1,453]},{185:454,339:$Vm},o($V02,[2,382]),o($Vx1,[2,360]),o($Vx1,[2,362]),{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:455,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($Vx1,[2,363]),{345:[1,456]},o($Vx1,[2,369]),o($Vx1,[2,370]),o($Vx1,[2,371]),o($Vx1,[2,372]),o($Vx1,[2,373]),o($Vx1,[2,374]),o($Vx1,[2,375]),o($Vx1,[2,377]),o($Vx1,[2,378]),o($Vx1,[2,379]),o($Vx1,[2,380]),{89:[1,457]},o($V02,[2,366]),{26:201,83:458,87:$Ve1,90:202,91:$Vf1,328:$V9},{26:201,83:459,87:$Ve1,90:202,91:$Vf1,328:$V9},{89:[2,299]},{16:461,26:26,41:460,116:$V8,328:$V9},{20:[1,462]},{17:[1,463]},o($VH,[2,401],{119:464,17:[1,465]}),{20:[2,108],26:340,79:341,118:466,120:339,328:$V9},o($VH,[2,403],{123:467,17:[1,468]}),{16:346,20:[2,111],26:26,116:$V8,122:469,124:343,125:344,126:345,328:$V9},{17:[2,113]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:470,328:$V9}),o($VU,[2,118]),o($VH,[2,405],{130:471,17:[1,472]}),{20:[2,120],129:473,131:348,132:349,137:$VM1,140:$VN1,146:$VO1,147:$VP1},o($V82,[2,407],{133:474,149:475,153:477,156:479,117:$V92,150:[1,476],154:[1,478]}),{18:[1,481]},o($Va2,[2,413],{138:482,152:483,117:$Vb2}),o($Va2,[2,417],{141:485,152:487,117:$Vb2,143:[1,486]}),o($VH,[2,425],{169:488,17:[1,489]}),{16:227,20:[2,149],26:26,116:$V8,155:228,167:355,168:490,170:226,328:$V9,339:$Vh1},o($VH,[2,429],{175:491,17:[1,492]}),{18:[1,493]},{17:[1,494]},o($VH,[2,445],{204:495,17:[1,496]}),{20:[2,182]},{18:[1,497]},o($VH,[2,433],{188:498,17:[1,499]}),{20:[2,175]},{18:[1,500]},{18:[1,501]},{18:[1,502]},o($Vc2,[2,267],{282:503,302:[1,504]}),{228:[1,505]},{17:[1,506]},o($Vd2,[2,355],{356:311,357:312,358:$Vv1,359:$Vw1}),o($Vd2,[2,356]),o($Vd2,[2,357]),o($V52,[2,261]),o($V52,[2,255]),o($V_1,[2,187]),{16:385,26:26,116:$V8,126:386,213:508,214:507,216:384,328:$V9},{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,116:$V8,217:[1,509],328:$V9},{17:[1,510]},o($V$1,[2,235]),o($Vx1,[2,376]),o($Vx1,[2,364]),o($Vx1,[2,365]),o($V02,[2,367]),o($V02,[2,368]),{20:[1,511]},{17:[1,512]},o($Vg1,[2,393],{39:513,17:[1,514]}),{16:415,20:[2,27],26:26,38:515,116:$V8,328:$V9},o($VH,[2,107]),o($VH,[2,402]),{20:[2,109]},o($VH,[2,110]),o($VH,[2,404]),{20:[2,112]},o($VP,$VQ,{80:137,81:138,49:516,82:$VR,84:$VS,86:$VT}),o($VH,[2,119]),o($VH,[2,406]),{20:[2,121]},o($Ve2,[2,409],{134:517,160:518,161:$Vf2}),o($V82,[2,408]),{26:521,116:$Vg2,151:520,217:$Vh2,328:$V9},o($V82,[2,133]),{16:525,26:26,116:$V8,155:524,328:$V9,339:$Vh1},o($V82,[2,135]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:526,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{16:527,26:26,116:$V8,328:$V9},o($VU,[2,415],{139:528,160:529,161:$Vf2}),o($Va2,[2,414]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:530,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},o($VU,[2,419],{142:531,160:532,161:$Vf2}),{16:533,26:26,116:$V8,328:$V9},o($Va2,[2,418]),o($VH,[2,148]),o($VH,[2,426]),{20:[2,150]},o($VH,[2,155]),o($VH,[2,430]),{16:538,26:26,116:$V8,176:534,177:535,178:536,179:537,328:$V9},o($VH,[2,167]),o($VH,[2,180]),o($VH,[2,446]),o([222,223,259],$Vt1,{211:299,206:539,208:540,212:$Vu1}),o($VH,[2,170]),o($VH,[2,434]),{159:$Vi2,191:541,197:542,200:$Vj2},{159:$Vi2,191:545,197:542,200:$Vj2},{159:$Vi2,191:546,197:542,200:$Vj2},o($Vk2,[2,269],{283:547,303:[1,548]}),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:549,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{17:[1,551],26:521,116:$Vg2,151:552,217:$Vh2,299:550,328:$V9},o($VT1,[2,248]),{20:[1,553]},{17:[1,554]},o([17,82,84,86],$Vo,{77:77,78:78,26:79,79:80,48:555,328:$V9}),{18:[1,556]},{17:[1,558],20:[2,395],42:557},{16:461,20:[2,30],26:26,41:559,116:$V8,328:$V9},o($Vg1,[2,26]),o($Vg1,[2,394]),{20:[2,28]},o($VP,[2,289]),o($VP,$Vo,{77:77,78:78,26:79,79:80,48:560,328:$V9}),o($Ve2,[2,410]),{16:561,26:26,116:$V8,328:$V9},o($V82,[2,131],{152:562,117:$Vb2}),o($Vl2,[2,315]),o($Vl2,[2,316]),o($Vl2,[2,317]),o($V82,[2,134]),o($V82,[2,138],{156:563,117:$V92}),o($V82,[2,142]),{51:[1,565],135:564},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:566,328:$V9}),o($VU,[2,416]),o($Va2,[2,136]),o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:567,328:$V9}),o($VU,[2,420]),o($Va2,[2,421],{144:568,152:569,117:$Vb2}),{20:[1,570]},{17:[1,571]},{17:[2,160],117:[1,572]},{17:[2,161]},o($V$1,[2,162],{163:[1,573]}),{20:[1,574]},{209:575,218:576,219:577,220:578,221:579,222:$Vm2,223:$Vn2,259:$Vo2},{20:[1,583]},{20:[2,176],159:$Vi2,191:584,197:542,200:$Vj2},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:585,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{17:[1,586]},{20:[1,587]},{20:[1,588]},o($Vp2,[2,283],{284:589,314:[1,590]}),{228:[1,591]},{17:[1,592]},{17:[1,593]},{18:[1,594]},{17:[2,320],313:$Vq2,327:595},o($V_1,[2,449],{215:597,17:[1,598]}),{16:385,20:[2,189],26:26,116:$V8,126:386,213:508,214:599,216:384,328:$V9},{17:$VQ,49:600,80:137,81:138,82:$VR,84:$VS,86:$VT},{16:306,26:26,116:$V8,267:305,273:602,274:601,328:$V9},{20:[2,29]},{20:[2,396]},{20:[2,31]},{17:$Vc1,50:603,115:$Vd1},o($VU,[2,143]),o($V82,[2,132]),o($V82,[2,139]),o($Ve2,[2,411],{136:604,160:605,161:$Vf2}),{17:[1,606]},o($VP,$VQ,{80:137,81:138,49:607,82:$VR,84:$VS,86:$VT}),o($VP,$VQ,{80:137,81:138,49:608,82:$VR,84:$VS,86:$VT}),o($VU,[2,423],{145:609,160:610,161:$Vf2}),o($Va2,[2,422]),{16:359,17:[1,611],26:26,116:$V8,174:612,328:$V9},{16:538,20:[2,158],26:26,116:$V8,176:613,177:535,178:536,179:537,328:$V9},{26:340,79:341,120:614,328:$V9},o($V$1,[2,163]),o($V72,[2,447],{207:615,17:[1,616]}),{20:[2,222],210:617,242:618,244:$Vr2},o($Vs2,[2,193],{218:576,219:577,220:578,221:579,209:620,222:$Vm2,223:$Vn2,259:$Vo2}),o($Vt2,[2,195]),o($Vt2,[2,196]),{16:621,26:26,116:$V8,328:$V9},{260:[1,622]},o($Vd,[2,197]),{224:623,288:$Vj1,289:$Vk1,290:$Vl1,291:$Vm1},o($Vu2,[2,435],{192:624,17:[1,625]}),{20:[2,177]},{17:[1,626]},{18:[1,627]},o($Vu2,[2,437],{194:628,17:[1,629]}),o($Vu2,[2,439],{196:630,17:[1,631]}),{20:[2,286],285:632,317:[1,633]},{315:[1,634],316:[1,635]},{17:[1,637],26:521,116:$Vg2,151:639,217:$Vh2,304:636,307:638,328:$V9},o($Vc2,[2,268]),o($V42,[2,265]),{26:521,116:$Vg2,151:641,217:$Vh2,300:640,328:$V9},{17:[2,321]},{26:521,116:$Vg2,151:642,217:$Vh2,328:$V9},o($V_1,[2,188]),o($V_1,[2,450]),{20:[2,190]},{17:[2,192]},{20:[1,643]},{16:306,20:[2,238],26:26,116:$V8,267:305,273:602,274:644,328:$V9},{17:[2,122]},o($VP,$Vo,{77:77,78:78,26:79,79:80,48:645,328:$V9}),o($Ve2,[2,412]),{18:[1,646]},{17:$Vc1,50:647,115:$Vd1},{17:$Vc1,50:648,115:$Vd1},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:649,328:$V9}),o($VU,[2,424]),{20:[2,156]},{20:[2,157]},{20:[2,159]},{17:[2,164]},o($V72,[2,183]),o($V72,[2,448]),{20:[2,184]},{17:[1,650],248:[1,651]},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:652,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($Vs2,[2,194]),{51:[1,657],117:$VU1,143:$VV1,159:$VW1,225:653,226:654,227:655,228:[1,656],292:374,294:$VX1,295:373,296:$VY1,297:$VZ1},{17:[1,658]},o($Vd,[2,198]),o($Vu2,[2,171]),o($Vu2,[2,436]),{18:[1,659]},{198:[1,660]},o($Vu2,[2,172]),o($Vu2,[2,438]),o($Vu2,[2,173]),o($Vu2,[2,440]),{20:[2,243]},{315:[1,661],316:[1,662]},{17:[1,663]},{17:[1,664]},{17:[1,665]},{18:[1,666]},{17:[2,279],312:667,313:$Vv2},o($Vw2,[2,274],{308:[1,669],309:[1,670],310:[1,671],311:[1,672]}),{20:[1,673]},{17:[1,674]},{17:[2,322],313:$Vq2,327:675},o($V72,[2,459],{275:676,17:[1,677]}),{20:[2,239]},{17:$Vc1,50:678,115:$Vd1},{158:679,159:$Vx2},{17:[2,124]},{17:[2,125]},o($VP,$VQ,{80:137,81:138,49:681,82:$VR,84:$VS,86:$VT}),{20:[2,223]},{17:[1,682]},o([17,248],[2,218]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:683,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},o($Vt2,[2,200]),{17:[1,684]},o($V52,$V62,{229:[1,685]}),{17:[2,201]},o($Vt2,[2,232]),{198:[1,686]},{20:[1,687]},{17:[1,688]},{17:[1,689]},o($Vp2,[2,284]),o($Vp2,[2,285]),o($Vk2,[2,270]),{26:521,116:$Vg2,151:639,217:$Vh2,305:690,307:691,328:$V9},{17:[2,280]},{26:521,116:$Vg2,151:639,217:$Vh2,307:692,328:$V9},o($Vw2,[2,275]),o($Vw2,[2,276]),o($Vw2,[2,277]),o($Vw2,[2,278]),o($V42,[2,463],{301:693,17:[1,694]}),{20:[2,318],26:521,116:$Vg2,151:641,217:$Vh2,300:695,328:$V9},{17:[2,323]},o($V72,[2,241]),o($V72,[2,460]),{17:[1,696]},{20:[1,697]},{153:698,154:[1,699]},{17:$Vc1,50:700,115:$Vd1},{18:[1,701]},o($Vt2,[2,199]),{18:[1,702]},{17:[2,202],161:[1,703]},{20:[1,704]},o($Vy2,[2,443],{201:705,17:[1,706]}),{20:[2,287]},{20:[2,288]},{20:[1,707]},{17:[1,708]},{17:[2,281],312:709,313:$Vv2},o($V42,[2,266]),o($V42,[2,464]),{20:[2,319]},{20:[1,710]},o($V82,[2,137]),{17:[1,711]},{16:525,26:26,116:$V8,328:$V9},{17:[2,126]},{159:$Vz2,249:712,251:713},{159:$VA2,231:715,235:716},{230:[1,718]},o($Vy2,[2,441],{199:719,17:[1,720]}),o($Vy2,[2,179]),o($Vy2,[2,444]),o($Vk2,[2,465],{306:721,17:[1,722]}),{20:[2,272],26:521,116:$Vg2,151:639,217:$Vh2,305:723,307:691,328:$V9},{17:[2,282]},{17:[2,123]},{20:[2,140],158:724,159:$Vx2},{20:[1,725]},{17:[1,726]},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:727,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{20:[1,728],233:729,238:730,240:[1,731],241:[1,732]},o($VB2,[2,207],{235:716,231:733,159:$VA2}),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:734,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{17:[2,203]},o($Vy2,[2,178]),o($Vy2,[2,442]),o($Vk2,[2,271]),o($Vk2,[2,466]),{20:[2,273]},{20:[2,141]},{17:[1,736],20:[2,455],250:735},{20:[2,227],159:$Vz2,249:737,251:713},{236:[1,738]},o($Vt2,[2,451],{232:739,17:[1,740]}),{20:[1,741]},{236:[1,742]},{236:[2,212]},{236:[2,213]},o($VB2,[2,208]),{236:[1,743]},{20:[2,224]},{20:[2,456]},{20:[2,228]},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,243:745,245:744,246:$VC2,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},o($Vt2,[2,204]),o($Vt2,[2,452]),o($Vt2,[2,453],{234:747,17:[1,748]}),{17:[1,751],26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:752,184:66,185:67,237:749,239:750,242:753,243:754,244:$Vr2,245:268,246:$VC2,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{17:[1,756],26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:752,184:66,185:67,237:755,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{17:[2,225]},{17:[2,226]},{26:758,116:[1,757],328:$V9},o($Vt2,[2,205]),o($Vt2,[2,454]),{17:[1,759]},{17:[1,760]},{18:[1,761]},{17:[1,762]},{17:[2,214]},{17:[2,215]},o([20,159,240,241],[2,206]),{18:[1,763]},{17:[2,219]},{17:[2,220],87:[1,764]},{20:[2,209]},{20:[2,210]},{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:766,184:66,185:67,239:765,242:753,243:754,244:$Vr2,245:268,246:$VC2,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},o($VD2,[2,216]),{26:133,28:132,59:$Vp1,87:$Vn1,90:131,91:$Ve,92:446,116:$Vf,157:766,184:66,185:67,245:268,315:$Vg,316:$VO,318:128,320:129,322:259,323:260,324:447,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm,342:445,344:$Vo1,347:$Vq1},{26:133,28:132,90:131,91:$Ve,116:$Vf,184:66,185:67,245:127,247:767,315:$Vg,316:$VO,318:128,320:129,328:$V9,329:$Vh,330:$Vi,331:$Vj,332:$Vk,333:$Vl,339:$Vm},{17:[1,768]},{17:[1,769]},{89:[1,770]},{20:[1,771]},{20:[1,772]},{17:[2,221]},{20:[2,211]},o($VD2,[2,217])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,86],62:[2,19],147:[2,91],178:[2,16],181:[2,21],183:[2,343],196:[2,36],197:[2,34],219:[2,93],234:[2,168],235:[2,169],256:[2,115],265:[2,302],266:[2,303],267:[2,304],272:[2,297],276:[2,23],277:[2,25],287:[2,428],304:[2,237],307:[2,345],341:[2,294],356:[2,152],384:[2,191],386:[2,292],387:[2,245],412:[2,299],420:[2,113],435:[2,182],438:[2,175],466:[2,109],469:[2,112],473:[2,121],490:[2,150],515:[2,28],537:[2,161],557:[2,29],558:[2,396],559:[2,31],584:[2,177],595:[2,321],599:[2,190],600:[2,192],603:[2,122],611:[2,156],612:[2,157],613:[2,159],614:[2,164],617:[2,184],632:[2,243],644:[2,239],647:[2,124],648:[2,125],650:[2,223],657:[2,201],667:[2,280],675:[2,323],688:[2,287],689:[2,288],695:[2,319],700:[2,126],709:[2,282],710:[2,123],718:[2,203],723:[2,273],724:[2,141],731:[2,212],732:[2,213],735:[2,224],736:[2,456],737:[2,228],744:[2,225],745:[2,226],753:[2,214],754:[2,215],757:[2,219],759:[2,209],760:[2,210],770:[2,221],771:[2,211]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
    
    const DBG_MODE = process && !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'input', 'interface', 'code', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),        
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as', 'of']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),   

        'entity.input.inputSet.item': new Set(['optional', 'with']),     

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    //.* means any char except newline after the parent keyword
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',        
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.input': 'entity.input', 
        'entity.data': 'entity.data', 
        'entity.code': 'entity.code', 

        'entity.input.$INDENT': 'entity.input.inputSet',
        'entity.input.inputSet.$INDENT': 'entity.input.inputSet.item',
        
        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ],           
        [ 'entity.input.inputSet', 2 ],
        [ 'entity.input.inputSet.item', 1 ],                  
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],                
        [ 'entity.input.inputSet', 1 ],
        [ 'entity.input.inputSet.item', 1 ],
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {            
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            console.log(state.lastState, exitRound);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);
                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2).toUpperCase() };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:                            
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                  
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 331;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 116;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 116;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 116;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 91;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 329;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 315;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 315;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 217;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 332;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 316;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 330;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:return yy_.yytext;                                                  
break;
case 31:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 328;
                            
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[31,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = geml;
exports.Parser = geml.Parser;
exports.parse = function () { return geml.parse.apply(geml, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}