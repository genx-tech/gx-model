/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,100,262,269],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,98,99,115,116,117,150,154,159,161,172,176,221,261,279,286,288,290,291,307,322,327,333,334],$Vb=[2,316],$Vc=[1,51],$Vd=[116,322],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,82,84,86,115],$Vo=[2,63],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,113,114,117,121,128,165,166,173,179,195],$VI=[2,106],$VJ=[1,110],$VK=[17,334],$VL=[1,114],$VM=[17,20,82,84,86,89,99,115,161,176,215,216,229,237,241,252,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$VN=[1,124],$VO=[1,130],$VP=[17,115],$VQ=[2,69],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,82,84,86,115,322],$VV=[1,143],$VW=[1,167],$VX=[1,165],$VY=[1,159],$VZ=[1,160],$V_=[1,161],$V$=[1,162],$V01=[1,163],$V11=[1,164],$V21=[1,168],$V31=[1,166],$V41=[1,184],$V51=[307,328],$V61=[17,20,82,84,86,89,99,115,117,161,176,215,216,229,237,241,252,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$V71=[89,334],$V81=[1,190],$V91=[17,20,89,99,115,161,176,215,216,229,237,241,252,303,305,307,322,328,334,337,338,340,342,343,344,345,346,347,348,349,352,353],$Va1=[2,293],$Vb1=[1,193],$Vc1=[2,115],$Vd1=[1,198],$Ve1=[1,204],$Vf1=[1,203],$Vg1=[20,40],$Vh1=[1,225],$Vi1=[2,241],$Vj1=[1,245],$Vk1=[1,246],$Vl1=[1,247],$Vm1=[1,248],$Vn1=[1,262],$Vo1=[1,264],$Vp1=[1,270],$Vq1=[1,271],$Vr1=[1,274],$Vs1=[17,99,172],$Vt1=[2,177],$Vu1=[1,302],$Vv1=[1,315],$Vw1=[1,316],$Vx1=[17,20,82,84,86,89,115,161,215,216,229,237,252,322,352,353],$Vy1=[1,320],$Vz1=[1,327],$VA1=[1,322],$VB1=[1,321],$VC1=[1,318],$VD1=[1,319],$VE1=[1,323],$VF1=[1,324],$VG1=[1,325],$VH1=[1,326],$VI1=[1,328],$VJ1=[1,329],$VK1=[1,330],$VL1=[1,331],$VM1=[1,352],$VN1=[1,353],$VO1=[1,354],$VP1=[1,355],$VQ1=[1,367],$VR1=[1,368],$VS1=[1,369],$VT1=[20,292,296,297,308,311],$VU1=[1,381],$VV1=[1,380],$VW1=[1,378],$VX1=[1,379],$VY1=[1,376],$VZ1=[1,377],$V_1=[20,117,159,215,216,221,252,286,288,290,291,292,296,297,308,311],$V$1=[17,117],$V02=[17,20,82,84,86,89,115,161,215,216,229,237,252,322],$V12=[87,90,116,309,310,322,323,324,325,326,327,333,338],$V22=[2,118],$V32=[17,116,322],$V42=[20,296,297,308,311],$V52=[59,87,90,116,309,310,322,323,324,325,326,327,333,338,341],$V62=[2,251],$V72=[20,116,322],$V82=[17,115,161,322],$V92=[1,478],$Va2=[17,82,84,86,115,161,322],$Vb2=[1,482],$Vc2=[20,297,308,311],$Vd2=[17,20,82,84,86,115,161,215,216,229,237,252,322],$Ve2=[17,115,322],$Vf2=[1,513],$Vg2=[1,516],$Vh2=[1,517],$Vi2=[1,531],$Vj2=[1,532],$Vk2=[20,308,311],$Vl2=[17,115,117,161,302,303,304,305,307,322],$Vm2=[1,564],$Vn2=[1,565],$Vo2=[1,563],$Vp2=[20,311],$Vq2=[1,579],$Vr2=[1,596],$Vs2=[20,237],$Vt2=[20,215,216,237,252],$Vu2=[20,183,186,188],$Vv2=[1,644],$Vw2=[17,307],$Vx2=[1,656],$Vy2=[20,159,193],$Vz2=[1,689],$VA2=[1,692],$VB2=[20,233,234],$VC2=[1,721],$VD2=[17,20,159,233,234];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"REGEXP":90,"logical_expression":91,"entity_statement_header":92,"entity_statement_block":93,"entity_statement_option0":94,"entity_statement_header0":95,"entity_base_keywords":96,"identifier_or_string_list":97,"extends":98,"is":99,"entity":100,"entity_sub_items":101,"entity_sub_item":102,"with_features":103,"has_fields":104,"associations_statement":105,"key_statement":106,"index_statement":107,"data_statement":108,"code_statement":109,"interfaces_statement":110,"mixin_statement":111,"triggers_statement":112,"mixes":113,"code":114,"--":115,"STRING":116,"with":117,"with_features_block":118,"with_features_option0":119,"feature_inject":120,"has":121,"has_fields_block":122,"has_fields_option0":123,"field_item":124,"field_item_body":125,"modifiable_field":126,"type_base_or_not":127,"associations":128,"associations_block":129,"associations_statement_option0":130,"association_item":131,"association_type_referee":132,"association_item_option0":133,"association_item_option1":134,"association_cases_block":135,"association_item_option2":136,"belongsTo":137,"association_item_option3":138,"association_item_option4":139,"refersTo":140,"association_item_option5":141,"association_item_option6":142,"association_item_option7":143,"hasOne":144,"hasMany":145,"reference_to_field":146,"on":147,"association_type_referer":148,"association_through":149,"connectedBy":150,"identifier_string_or_dotname":151,"association_extra_condition":152,"association_connection":153,"being":154,"array_of_identifier_or_string":155,"association_condition":156,"conditional_expression":157,"association_cases":158,"when":159,"association_as":160,"as":161,"association_qualifiers":162,"optional":163,"default":164,"key":165,"index":166,"index_item":167,"index_statement_block":168,"index_statement_option0":169,"index_item_body":170,"index_item_option0":171,"unique":172,"data":173,"data_records":174,"data_statement_option0":175,"in":176,"inline_object":177,"inline_array":178,"triggers":179,"triggers_statement_block":180,"triggers_statement_option0":181,"triggers_operation":182,"onCreate":183,"triggers_operation_block":184,"triggers_operation_option0":185,"onCreateOrUpdate":186,"triggers_operation_option1":187,"onDelete":188,"triggers_operation_option2":189,"triggers_operation_item":190,"triggers_result_block":191,"triggers_operation_item_option0":192,"always":193,"triggers_operation_item_option1":194,"interface":195,"interfaces_statement_block":196,"interfaces_statement_option0":197,"interface_definition":198,"interface_definition_body":199,"interface_definition_option0":200,"accept_or_not":201,"implementation":202,"return_or_not":203,"accept_statement":204,"accept":205,"accept_param":206,"accept_block":207,"accept_statement_option0":208,"modifiable_param":209,"DOTNAME":210,"operation":211,"find_one_operation":212,"coding_block":213,"find_one_keywords":214,"findOne":215,"find":216,"article_keyword":217,"selection_inline_keywords":218,"case_statement":219,"cases_keywords":220,"by":221,"cases":222,"below":223,"case_condition_block":224,"case_statement_option0":225,"otherwise_statement":226,"case_statement_option1":227,"case_condition_item":228,"=>":229,"condition_as_result_expression":230,"otherwise_keywords":231,"stop_controll_flow_expression":232,"otherwise":233,"else":234,"return_expression":235,"throw_error_expression":236,"return":237,"modifiable_value":238,"throw":239,"gfc_param_list":240,"unless":241,"return_condition_block":242,"return_or_not_option0":243,"return_condition_item":244,"update_operation":245,"update":246,"where_expr":247,"create_operation":248,"create":249,"delete_operation":250,"delete":251,"do":252,"javascript":253,"assign_operation":254,"set":255,"identifier_or_member_access":256,"<-":257,"value":258,"variable_modifier_or_not":259,"entity_fields_selections":260,"->":261,"dataset":262,"dataset_statement_block":263,"dataset_statement_option0":264,"article_keyword_or_not":265,"dataset_join_with_item":266,"dataset_join_with_block":267,"dataset_join_with_item_option0":268,"view":269,"view_statement_block":270,"view_statement_option0":271,"view_main_entity":272,"view_selection_or_not":273,"group_by_or_not":274,"having_or_not":275,"order_by_or_not":276,"skip_or_not":277,"limit_or_not":278,"list":279,"view_selection":280,"a":281,"an":282,"the":283,"one":284,"selection_attributive_keywords":285,"of":286,"which":287,"where":288,"selection_keywords":289,"selectedBy":290,"selected":291,"group":292,"identifier_string_or_dotname_list":293,"identifier_string_or_dotname_block":294,"group_by_or_not_option0":295,"having":296,"order":297,"order_by_list":298,"order_by_block":299,"order_by_or_not_option0":300,"order_by_clause":301,"ascend":302,"<":303,"descend":304,">":305,"order_by_list0":306,",":307,"offset":308,"INTEGER":309,"REFERENCE":310,"limit":311,"gfc_param0":312,"nfc_param_list":313,"nfc_param":314,"nfc_param_list0":315,"unary_expression":316,"binary_expression":317,"boolean_expression":318,"gfc_param_list0":319,"?":320,"identifier_string_or_dotname_list0":321,"NAME":322,"FLOAT":323,"BOOL":324,"SCRIPT":325,"SYMBOL":326,"{":327,"}":328,"kv_pairs":329,"kv_pair_item":330,"non_exist":331,"kv_pairs0":332,"[":333,"]":334,"identifier_or_string_list0":335,"simple_expression":336,"exists":337,"not":338,"null":339,"~":340,"all":341,">=":342,"<=":343,"==":344,"!=":345,"+":346,"-":347,"*":348,"/":349,"logical_expression_right":350,"logical_operators":351,"and":352,"or":353,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",90:"REGEXP",98:"extends",99:"is",100:"entity",113:"mixes",114:"code",115:"--",116:"STRING",117:"with",121:"has",128:"associations",137:"belongsTo",140:"refersTo",144:"hasOne",145:"hasMany",147:"on",150:"connectedBy",154:"being",159:"when",161:"as",163:"optional",164:"default",165:"key",166:"index",172:"unique",173:"data",176:"in",179:"triggers",183:"onCreate",186:"onCreateOrUpdate",188:"onDelete",191:"triggers_result_block",193:"always",195:"interface",205:"accept",210:"DOTNAME",215:"findOne",216:"find",221:"by",222:"cases",223:"below",229:"=>",233:"otherwise",234:"else",237:"return",239:"throw",241:"unless",246:"update",247:"where_expr",249:"create",251:"delete",252:"do",253:"javascript",255:"set",256:"identifier_or_member_access",257:"<-",259:"variable_modifier_or_not",261:"->",262:"dataset",269:"view",279:"list",281:"a",282:"an",283:"the",284:"one",286:"of",287:"which",288:"where",290:"selectedBy",291:"selected",292:"group",296:"having",297:"order",302:"ascend",303:"<",304:"descend",305:">",307:",",308:"offset",309:"INTEGER",310:"REFERENCE",311:"limit",320:"?",322:"NAME",323:"FLOAT",324:"BOOL",325:"SCRIPT",326:"SYMBOL",327:"{",328:"}",333:"[",334:"]",337:"exists",338:"not",339:"null",340:"~",341:"all",342:">=",343:"<=",344:"==",345:"!=",346:"+",347:"-",348:"*",349:"/",352:"and",353:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,2],[81,4],[81,2],[81,2],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[92,1],[92,3],[96,1],[96,1],[95,2],[93,1],[93,2],[101,1],[101,2],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[111,3],[109,3],[32,0],[32,3],[103,6],[118,2],[118,3],[104,6],[122,2],[122,3],[124,2],[50,0],[50,2],[125,1],[127,0],[127,1],[105,6],[129,2],[129,3],[131,6],[131,10],[131,7],[131,8],[132,1],[132,1],[146,1],[148,1],[148,1],[149,2],[149,3],[149,1],[149,2],[149,1],[152,2],[135,5],[153,2],[153,3],[158,3],[158,4],[156,2],[160,2],[162,1],[162,4],[106,3],[106,3],[107,3],[107,6],[168,2],[168,3],[167,1],[167,3],[170,1],[170,1],[108,3],[108,4],[108,6],[174,1],[174,1],[112,6],[182,6],[182,6],[182,6],[180,1],[180,2],[184,1],[184,2],[190,7],[190,6],[110,6],[196,1],[196,2],[198,6],[199,3],[201,0],[201,1],[204,3],[204,6],[207,2],[207,3],[206,1],[206,5],[202,1],[202,2],[211,1],[211,1],[214,1],[214,2],[212,4],[212,3],[220,1],[220,2],[220,4],[219,6],[219,7],[228,4],[224,1],[224,2],[226,4],[226,4],[226,7],[231,1],[231,1],[232,1],[232,1],[230,2],[230,5],[235,2],[236,2],[236,2],[236,5],[203,0],[203,2],[203,7],[244,4],[244,4],[242,2],[242,3],[245,6],[248,5],[250,4],[213,3],[254,6],[260,1],[260,3],[14,7],[263,3],[267,1],[267,2],[266,2],[266,8],[13,7],[270,9],[272,3],[272,4],[273,0],[273,1],[280,3],[265,0],[265,1],[217,1],[217,1],[217,1],[217,1],[285,2],[285,1],[285,1],[285,1],[289,1],[289,1],[289,2],[218,1],[218,1],[274,0],[274,4],[274,7],[275,0],[275,3],[276,0],[276,4],[276,7],[299,2],[299,3],[301,1],[301,2],[301,2],[301,2],[301,2],[298,1],[298,2],[306,2],[306,3],[277,0],[277,3],[277,3],[278,0],[278,3],[278,3],[126,4],[238,1],[238,2],[209,1],[120,1],[120,1],[79,4],[313,1],[313,2],[315,2],[315,3],[314,1],[314,1],[88,1],[88,1],[88,1],[85,4],[240,1],[240,2],[319,2],[319,3],[319,1],[312,1],[312,1],[312,2],[312,1],[151,1],[151,1],[151,1],[294,2],[294,3],[293,1],[293,2],[321,2],[321,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[177,2],[177,3],[330,3],[330,2],[330,3],[331,0],[329,1],[329,2],[332,2],[332,3],[178,2],[178,3],[155,3],[97,1],[97,2],[335,2],[335,3],[258,1],[258,1],[157,1],[157,1],[157,1],[336,1],[336,1],[336,3],[316,2],[316,3],[316,3],[316,4],[316,4],[318,3],[318,4],[318,4],[317,3],[317,3],[317,3],[317,3],[317,3],[317,3],[317,3],[317,4],[317,3],[317,3],[317,3],[317,3],[91,2],[350,2],[351,1],[351,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[94,0],[94,1],[119,0],[119,1],[123,0],[123,1],[130,0],[130,1],[133,0],[133,1],[134,0],[134,1],[136,0],[136,1],[138,0],[138,1],[139,0],[139,1],[141,0],[141,1],[142,0],[142,1],[143,0],[143,1],[169,0],[169,1],[171,0],[171,1],[175,0],[175,1],[181,0],[181,1],[185,0],[185,1],[187,0],[187,1],[189,0],[189,1],[192,0],[192,1],[194,0],[194,1],[197,0],[197,1],[200,0],[200,1],[208,0],[208,1],[225,0],[225,1],[227,0],[227,1],[243,0],[243,1],[264,0],[264,1],[268,0],[268,1],[271,0],[271,1],[295,0],[295,1],[300,0],[300,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 109: case 121: case 141: case 151: case 181: case 219: case 264: case 310:
this.$ = [ $$[$0-1] ];
break;
case 31: case 110: case 122: case 152: case 182: case 220: case 265: case 311:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 89: case 90: case 139: case 229: case 336:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 91: case 114: case 174: case 335: case 337:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 166: case 168: case 185: case 199: case 230: case 271: case 273: case 288: case 290: case 300: case 312: case 314: case 341: case 343:
this.$ = [ $$[$0] ];
break;
case 72: case 167: case 169: case 186: case 200: case 231: case 272: case 274: case 289: case 291: case 301: case 315: case 342: case 344:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args)    ;
break;
case 76:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args)        ;
break;
case 79:
this.$ = state.normalizeValidator($$[$0]);
break;
case 80:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 82:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 83:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 85:
this.$ = [ $$[$0], {} ];
break;
case 86:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 93:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 104:
this.$ = { mixins: $$[$0-1] };
break;
case 105:
this.$ = { code: $$[$0-1] };
break;
case 107:
this.$ = { comment: $$[$0-1] };
break;
case 108:
this.$ = { features: $$[$0-2] };
break;
case 111:
this.$ = { fields: $$[$0-2] };
break;
case 112:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 113:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 116:
this.$ = { comment: $$[$0] };
break;
case 120:
this.$ = { associations: $$[$0-2] };
break;
case 123:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 124:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 125:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 126:
this.$ = { type: $$[$0-7], destEntity: $$[$0-6], destField: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 132:
this.$ = { by: $$[$0] }    ;
break;
case 133:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 134:
this.$ = { remoteField: $$[$0] }     ;
break;
case 135:
this.$ = { remoteField: $$[$0] }      ;
break;
case 136:
this.$ = { with: $$[$0] };
break;
case 137:
this.$ = { with: $$[$0] }    ;
break;
case 138:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 140:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 142:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 143:
this.$ = $$[$0];;
break;
case 144:
this.$ = { srcField: $$[$0] };
break;
case 145:
this.$ = { optional: true };
break;
case 146:
this.$ = { default: $$[$0-1] };
break;
case 147: case 148:
this.$ = { key: $$[$0-1] };
break;
case 149:
this.$ = { indexes: [$$[$0-1]] };
break;
case 150:
this.$ = { indexes: $$[$0-2] };
break;
case 154:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 155: case 156:
this.$ = { fields: $$[$0] };
break;
case 157:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 158:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 159:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 162:
this.$ = { triggers: $$[$0-2] };
break;
case 163:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 164:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 165:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 170:
this.$ = { condition: $$[$0-5], do: $$[$0-2] };
break;
case 171:
this.$ = { do: $$[$0-2] };
break;
case 172:
this.$ = { interfaces: $$[$0-2] };
break;
case 173:
this.$ = Object.assign({}, $$[$0]);
break;
case 175:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 176:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 179:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 180:
this.$ = { accept: $$[$0-2] };
break;
case 184:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 191:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 192:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 196:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 197:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 198:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 201: case 202: case 232: case 329: case 339: case 340: case 352:
this.$ = $$[$0-1];
break;
case 203: case 209:
this.$ = $$[$0-2];
break;
case 210:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 211:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 212:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 213:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 215:
 this.$ = { return: $$[$0-1] }; 
break;
case 216:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 217: case 218:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 221:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 222:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 223:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 224:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 225:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 226:
this.$ = { entity: $$[$0] }     ;
break;
case 227:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 228:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 233:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 234:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 235:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 236:
this.$ = { dataset: $$[$0] };
break;
case 237:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 240:
this.$ = { condition: $$[$0-1] };
break;
case 257:
this.$ = { groupBy: $$[$0-1] };
break;
case 258:
this.$ = { groupBy: $$[$0-2] };
break;
case 260:
this.$ = { having: $$[$0-1] };
break;
case 262:
this.$ = { orderBy: $$[$0-1] };
break;
case 263:
this.$ = { orderBy: $$[$0-2] };
break;
case 266:
this.$ = { field: $$[$0], ascend: true };
break;
case 267: case 268:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 269: case 270:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 276: case 277:
this.$ = { offset: $$[$0-1] };
break;
case 279: case 280:
this.$ = { limit: $$[$0-1] };
break;
case 281:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 283:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 287: case 297:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 293:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 298:
this.$ = [ $$[$0] ]    ;
break;
case 299:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 302: case 338:
this.$ = [];
break;
case 305:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 313:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 328:
this.$ = {};
break;
case 330: case 332:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 331:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 346:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 353:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 354:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 355:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 356:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 357:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 358:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 359:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 360:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 361:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 362:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 363:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 364:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 365:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 366:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 367:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 368:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 369:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 370:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 371:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 372:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 373:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 374:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 375:
this.$ = { operator: 'and' };
break;
case 376:
this.$ = { operator: 'or' };
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,262:$V5,269:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,262:$V5,269:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,116:$V8,322:$V9},{17:[1,30],23:29,26:31,322:$V9},{16:34,17:[1,33],26:26,44:32,116:$V8,322:$V9},{16:35,26:26,116:$V8,322:$V9},{17:[1,36]},{16:37,26:26,116:$V8,322:$V9},{16:38,26:26,116:$V8,322:$V9},{17:[2,85],96:39,98:[1,40],99:[1,41]},{16:42,26:26,116:$V8,322:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,317]),o([17,20,27,51,82,84,86,87,89,98,99,115,116,117,150,154,159,161,172,176,215,216,221,229,237,241,252,261,279,286,288,290,291,302,303,304,305,307,322,327,328,333,334,337,338,340,342,343,344,345,346,347,348,349,352,353],[2,318]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,83],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,97:56,116:$V8,322:$V9},o($Vd,[2,87]),o($Vd,[2,88]),o([17,98,99],[2,89]),o($V7,[2,13]),{16:59,19:58,26:26,116:$V8,322:$V9},o($V7,[2,17]),{23:61,24:60,26:31,322:$V9},{28:62,90:$Ve,116:$Vf,177:66,178:67,309:$Vg,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,116:$V8,322:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,322:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,116:$V8,322:$V9},{18:[1,107]},o($VH,$VI,{93:108,32:109,115:$VJ}),{18:[1,111]},{18:[1,112]},{17:[2,86]},o($VK,[2,341],{335:113,307:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,319]),o($VM,[2,320]),o($VM,[2,321]),o($VM,[2,322]),o($VM,[2,323]),o($VM,[2,324]),o($VM,[2,325]),o($VM,[2,326]),o($VM,[2,327]),{16:122,26:123,116:$V8,309:$VN,322:$V9,328:[1,119],329:120,330:121},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:127,240:126,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,334:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{49:136,80:137,81:138,82:$VR,84:$VS,86:$VT}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,322:$V9}),o($VU,[2,67],{87:$VV}),o($VU,[2,68]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o([20,37,40],$VI,{30:144,32:145,115:$VJ}),{20:[1,146]},{20:[2,90],101:147,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:158,113:$VW,114:$VX,117:$VY,121:$VZ,128:$V_,165:$V$,166:$V01,173:$V11,179:$V21,195:$V31},{116:[1,169]},{99:[1,172],270:170,272:171},{99:[1,174],263:173},o($VK,[2,342]),{16:175,26:26,116:$V8,322:$V9},o($V7,[2,377],{21:176,17:[1,177]}),{16:59,19:178,20:[2,15],26:26,116:$V8,322:$V9},o($V7,[2,379],{25:179,17:[1,180]}),{20:[2,20],23:61,24:181,26:31,322:$V9},o($VM,[2,328]),{328:[1,182]},{307:$V41,328:[2,334],332:183},{51:[1,185]},o($V51,[2,333],{331:186,51:$Vb}),{51:[1,187]},o($V61,[2,338]),{334:[1,188]},o($V71,[2,298],{319:189,307:$V81}),o($V91,[2,282],{81:138,80:191,82:$VR,84:$VS,86:$VT}),o($VM,[2,303]),o($VM,[2,304],{320:[1,192]}),o($VM,[2,306]),o($VM,[2,292]),o($VM,$Va1,{87:$Vb1}),o($V7,[2,389],{46:194,17:[1,195]}),{16:34,20:[2,35],26:26,44:75,45:196,116:$V8,322:$V9},{17:$Vc1,50:197,115:$Vd1},o($VP,[2,70]),o($V91,[2,71],{81:138,80:199,82:$VR,84:$VS,86:$VT}),{26:201,83:200,85:202,87:$Ve1,90:$Vf1,322:$V9},{26:205,85:206,322:$V9},{26:208,85:209,87:[1,207],322:$V9},o($Vn,[2,66]),{26:212,28:132,90:$Ve,116:$Vf,177:66,178:67,309:$Vg,313:210,314:211,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{20:[1,213]},o($Vg1,[2,383],{33:214,36:215,37:[1,216]}),o($V7,[2,391],{94:217,17:[1,218]}),{20:[2,91]},{20:[2,92],101:219,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:158,113:$VW,114:$VX,117:$VY,121:$VZ,128:$V_,165:$V$,166:$V01,173:$V11,179:$V21,195:$V31},o($VH,[2,94]),o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),{17:[1,220]},{17:[1,221]},{17:[1,222]},{16:223,26:26,116:$V8,155:224,322:$V9,333:$Vh1},{16:229,17:[1,227],26:26,116:$V8,155:230,167:226,170:228,322:$V9,333:$Vh1},{16:232,26:26,116:$V8,174:231,175:233,176:[2,419],177:234,178:235,322:$V9,327:$Vl,333:$Vm},{16:236,26:26,116:$V8,322:$V9},{17:[1,237]},{16:57,26:26,97:238,116:$V8,322:$V9},{17:[1,239]},{17:[1,240]},{20:[1,241]},{17:[1,242]},o($Vd,$Vi1,{265:243,217:244,281:$Vj1,282:$Vk1,283:$Vl1,284:$Vm1}),{20:[1,249]},o($Vd,$Vi1,{217:244,265:250,281:$Vj1,282:$Vk1,283:$Vl1,284:$Vm1}),o($VK,[2,343],{335:251,307:$VL}),o($V7,[2,14]),o($V7,[2,378]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,380]),{20:[2,21]},o($VM,[2,329]),{328:[2,335]},{16:122,26:123,116:$V8,309:$VN,322:$V9,330:252},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:253,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V51,[2,331]),{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:254,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V61,[2,339]),o($V71,[2,299]),o($V71,[2,302],{177:66,178:67,312:128,314:129,85:131,28:132,26:133,238:255,90:$Ve,116:$Vf,309:$Vg,310:$VO,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm}),o($VM,[2,283]),o($VM,[2,305]),{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:127,240:256,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,33]),o($V7,[2,390]),{20:[2,36]},{17:[2,34]},{116:[1,257]},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,79],{87:$Vb1}),o($VM,[2,80]),o($VM,[2,81]),{26:133,28:132,85:131,87:$Vn1,90:$Ve,91:258,116:$Vf,177:66,178:67,238:263,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:259,338:$Vo1},o($VM,[2,74],{87:$Vb1}),o($VM,[2,75]),{26:133,28:132,59:$Vp1,85:131,88:265,90:$Ve,116:$Vf,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:266,317:267,318:268,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,338:$Vo1,341:$Vq1},o($VM,[2,77],{87:$Vb1}),o($VM,[2,78]),{89:[1,272]},{89:[2,288],307:$Vr1,315:273},o([89,307],$Va1),o($V7,[2,381],{31:275,17:[1,276]}),{20:[2,24],34:277,35:278,40:[1,279]},o($Vg1,[2,384]),{17:[1,280]},o($V7,[2,84]),o($V7,[2,392]),{20:[2,93]},{18:[1,281]},{18:[1,282]},{18:[1,283]},{17:[1,284]},{17:[1,285]},{16:57,26:26,97:286,116:$V8,322:$V9},{17:[1,287]},{18:[1,288]},{17:[2,153],99:[1,290],171:289,172:[2,417]},o($Vs1,[2,155]),o($Vs1,[2,156]),{17:[1,291]},{174:292,176:[2,420],177:234,178:235,327:$Vl,333:$Vm},{176:[1,293]},{17:[2,160]},{17:[2,161]},{17:[1,294]},{18:[1,295]},{17:[1,296]},{18:[1,297]},o([20,37,40,113,114,117,121,128,165,166,173,179,195],[2,107]),o($V7,[2,449],{271:298,17:[1,299]}),o([20,117,159,221,286,288,290,291,292,296,297,308,311],$Vt1,{201:300,204:301,205:$Vu1}),{16:303,26:26,116:$V8,322:$V9},o($Vd,[2,242]),o($Vd,[2,243]),o($Vd,[2,244]),o($Vd,[2,245]),o($Vd,[2,246]),o($V7,[2,445],{264:304,17:[1,305]}),{16:308,26:26,116:$V8,260:307,266:306,322:$V9},o($VK,[2,344]),{307:$V41,328:[2,336],332:309},o($V51,[2,330]),o($V51,[2,332]),o($V71,[2,300],{319:310,307:$V81}),{89:[1,311]},{17:[2,116]},{89:[1,312]},{350:313,351:314,352:$Vv1,353:$Vw1},o($Vx1,[2,350]),o($Vx1,[2,351]),{26:133,28:132,85:131,87:$Vn1,90:$Ve,116:$Vf,177:66,178:67,238:263,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:317,338:$Vo1},{99:$Vy1,176:$Vz1,303:$VA1,305:$VB1,337:$VC1,338:$VD1,342:$VE1,343:$VF1,344:$VG1,345:$VH1,346:$VI1,347:$VJ1,348:$VK1,349:$VL1},{87:[1,332]},{89:[1,333]},{89:[2,294]},{89:[2,295]},{89:[2,296]},{99:$Vy1,176:$Vz1,303:$VA1,305:$VB1,337:$VC1,338:$VD1,340:[1,334],342:$VE1,343:$VF1,344:$VG1,345:$VH1,346:$VI1,347:$VJ1,348:$VK1,349:$VL1},{178:335,333:$Vm},{178:336,333:$Vm},o($VU,[2,287]),{89:[2,289]},{26:212,28:132,90:$Ve,116:$Vf,177:66,178:67,309:$Vg,314:337,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($V7,[2,22]),o($V7,[2,382]),{20:[2,23]},{20:[2,25]},{17:[1,338]},{18:[1,339]},{26:342,79:343,118:340,120:341,322:$V9},{16:348,26:26,116:$V8,122:344,124:345,125:346,126:347,322:$V9},{129:349,131:350,132:351,137:$VM1,140:$VN1,144:$VO1,145:$VP1},o($VH,[2,147]),o($VH,[2,148]),{334:[1,356]},o($VH,[2,149]),{16:229,26:26,116:$V8,155:230,167:358,168:357,170:228,322:$V9,333:$Vh1},{172:[1,359]},{172:[2,418]},o($VH,[2,157]),{17:[1,360]},{16:361,26:26,116:$V8,322:$V9},o($VH,[2,105]),{16:364,26:26,116:$V8,196:362,198:363,322:$V9},o($VH,[2,104]),{180:365,182:366,183:$VQ1,186:$VR1,188:$VS1},o($V7,[2,234]),o($V7,[2,450]),o($VT1,[2,238],{273:370,280:371,218:372,289:373,285:374,117:$VU1,159:$VV1,221:[1,375],286:$VW1,288:$VX1,290:$VY1,291:$VZ1}),o($V_1,[2,178]),{16:385,17:[1,383],26:26,116:$V8,126:386,206:382,209:384,322:$V9},{17:[2,236],279:[1,387]},o($V7,[2,228]),o($V7,[2,446]),{20:[2,229]},{17:[1,388],117:[1,389]},o($V$1,[2,226],{261:[1,390]}),{328:[2,337]},o($V71,[2,301]),o($VM,[2,297]),o($VM,[2,82]),o($V02,[2,373]),{26:133,28:132,85:131,87:$Vn1,90:$Ve,116:$Vf,177:66,178:67,238:263,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:391,338:$Vo1},o($V12,[2,375]),o($V12,[2,376]),{89:[1,392]},o($Vx1,[2,353]),{176:[1,394],337:[1,393]},{338:[1,396],339:[1,395]},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:397,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:398,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:399,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:400,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:401,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:402,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:403,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:404,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:405,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:406,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:407,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{26:133,28:132,85:131,87:$Vn1,90:$Ve,116:$Vf,177:66,178:67,238:263,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:408,338:$Vo1},o($VM,[2,76]),{26:201,83:409,85:202,87:$Ve1,90:$Vf1,322:$V9},{340:[1,410]},{340:[1,411]},{89:[2,290],307:$Vr1,315:412},{18:[1,413]},{16:415,26:26,38:414,116:$V8,322:$V9},{20:[1,416]},{17:[1,417]},{17:[2,285],87:$VV},{17:[2,286]},{20:[1,418]},{17:[1,419]},{17:$Vc1,50:420,115:$Vd1},o($VP,[2,117]),o($VU,$V22,{127:421,47:422,51:$Vc}),{20:[1,423]},{17:[1,424]},{16:425,17:[1,426],26:26,116:$V8,322:$V9},{16:427,26:26,116:$V8,322:$V9},{16:428,26:26,116:$V8,322:$V9},o($V32,[2,127]),o($V32,[2,128]),o([17,99,115,161,172,322],[2,340]),{20:[1,429]},{17:[1,430]},{17:[2,154]},o($VH,[2,158]),{174:431,177:234,178:235,327:$Vl,333:$Vm},{20:[1,432]},{16:364,20:[2,173],26:26,116:$V8,196:433,198:363,322:$V9},{17:[1,434]},{20:[1,435]},{20:[2,166],180:436,182:366,183:$VQ1,186:$VR1,188:$VS1},{17:[1,437]},{17:[1,438]},{17:[1,439]},o($V42,[2,256],{274:440,292:[1,441]}),o($VT1,[2,239]),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:442,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},o($V52,[2,254]),o($V52,[2,255]),o($V52,$V62),o($V52,[2,252]),{221:[1,446]},{287:[1,447]},o($V52,[2,248]),o($V52,[2,249]),o($V52,[2,250]),{17:[1,448]},{18:[1,449]},{17:[2,183]},o([17,82,84,86,322],$V22,{127:421,47:422,51:[1,450]}),{17:[2,284]},{17:[2,237]},o($V72,[2,232]),{51:[1,451]},{178:452,333:$Vm},o($V02,[2,374]),o($Vx1,[2,352]),o($Vx1,[2,354]),{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:453,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vx1,[2,355]),{339:[1,454]},o($Vx1,[2,361]),o($Vx1,[2,362]),o($Vx1,[2,363]),o($Vx1,[2,364]),o($Vx1,[2,365]),o($Vx1,[2,366]),o($Vx1,[2,367]),o($Vx1,[2,369]),o($Vx1,[2,370]),o($Vx1,[2,371]),o($Vx1,[2,372]),{89:[1,455]},o($V02,[2,358]),{26:201,83:456,85:202,87:$Ve1,90:$Vf1,322:$V9},{26:201,83:457,85:202,87:$Ve1,90:$Vf1,322:$V9},{89:[2,291]},{16:459,26:26,41:458,116:$V8,322:$V9},{20:[1,460]},{17:[1,461]},o($VH,[2,393],{119:462,17:[1,463]}),{20:[2,109],26:342,79:343,118:464,120:341,322:$V9},o($VH,[2,395],{123:465,17:[1,466]}),{16:348,20:[2,112],26:26,116:$V8,122:467,124:345,125:346,126:347,322:$V9},{17:[2,114]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:468,322:$V9}),o($VU,[2,119]),o($VH,[2,397],{130:469,17:[1,470]}),{20:[2,121],129:471,131:350,132:351,137:$VM1,140:$VN1,144:$VO1,145:$VP1},o($V82,[2,399],{133:472,149:473,153:475,156:477,117:$V92,150:[1,474],154:[1,476]}),{18:[1,479]},o($Va2,[2,405],{138:480,152:481,117:$Vb2}),o([17,82,84,86,115,117,161],[2,409],{26:26,141:483,16:484,116:$V8,322:$V9}),o($VH,[2,415],{169:485,17:[1,486]}),{16:229,20:[2,151],26:26,116:$V8,155:230,167:358,168:487,170:228,322:$V9,333:$Vh1},{17:[1,488]},o($VH,[2,433],{197:489,17:[1,490]}),{20:[2,174]},{18:[1,491]},o($VH,[2,421],{181:492,17:[1,493]}),{20:[2,167]},{18:[1,494]},{18:[1,495]},{18:[1,496]},o($Vc2,[2,259],{275:497,296:[1,498]}),{221:[1,499]},{17:[1,500]},o($Vd2,[2,347],{350:313,351:314,352:$Vv1,353:$Vw1}),o($Vd2,[2,348]),o($Vd2,[2,349]),o($V52,[2,253]),o($V52,[2,247]),o($V_1,[2,179]),{16:385,26:26,116:$V8,126:386,206:502,207:501,209:384,322:$V9},{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,116:$V8,210:[1,503],322:$V9},{17:[1,504]},o($V$1,[2,227]),o($Vx1,[2,368]),o($Vx1,[2,356]),o($Vx1,[2,357]),o($V02,[2,359]),o($V02,[2,360]),{20:[1,505]},{17:[1,506]},o($Vg1,[2,385],{39:507,17:[1,508]}),{16:415,20:[2,27],26:26,38:509,116:$V8,322:$V9},o($VH,[2,108]),o($VH,[2,394]),{20:[2,110]},o($VH,[2,111]),o($VH,[2,396]),{20:[2,113]},o($VP,$VQ,{80:137,81:138,49:510,82:$VR,84:$VS,86:$VT}),o($VH,[2,120]),o($VH,[2,398]),{20:[2,122]},o($Ve2,[2,401],{134:511,160:512,161:$Vf2}),o($V82,[2,400]),{26:515,116:$Vg2,151:514,210:$Vh2,322:$V9},o($V82,[2,134]),{16:519,26:26,116:$V8,155:518,322:$V9,333:$Vh1},o($V82,[2,136]),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:520,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{16:521,26:26,116:$V8,322:$V9},o($VU,[2,407],{139:522,160:523,161:$Vf2}),o($Va2,[2,406]),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:524,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},o($Va2,[2,411],{142:525,152:526,117:$Vb2}),o([17,82,84,86,115,117,161,322],[2,410]),o($VH,[2,150]),o($VH,[2,416]),{20:[2,152]},o($VH,[2,159]),o($VH,[2,172]),o($VH,[2,434]),o([215,216,252],$Vt1,{204:301,199:527,201:528,205:$Vu1}),o($VH,[2,162]),o($VH,[2,422]),{159:$Vi2,184:529,190:530,193:$Vj2},{159:$Vi2,184:533,190:530,193:$Vj2},{159:$Vi2,184:534,190:530,193:$Vj2},o($Vk2,[2,261],{276:535,297:[1,536]}),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:537,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{17:[1,539],26:515,116:$Vg2,151:540,210:$Vh2,293:538,322:$V9},o($VT1,[2,240]),{20:[1,541]},{17:[1,542]},o([17,82,84,86],$Vo,{77:77,78:78,26:79,79:80,48:543,322:$V9}),{18:[1,544]},{17:[1,546],20:[2,387],42:545},{16:459,20:[2,30],26:26,41:547,116:$V8,322:$V9},o($Vg1,[2,26]),o($Vg1,[2,386]),{20:[2,28]},o($VP,[2,281]),o($VP,$Vo,{77:77,78:78,26:79,79:80,48:548,322:$V9}),o($Ve2,[2,402]),{16:549,26:26,116:$V8,322:$V9},o($V82,[2,132],{152:550,117:$Vb2}),o($Vl2,[2,307]),o($Vl2,[2,308]),o($Vl2,[2,309]),o($V82,[2,135]),o($V82,[2,139],{156:551,117:$V92}),o($V82,[2,143]),{51:[1,553],135:552},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:554,322:$V9}),o($VU,[2,408]),o($Va2,[2,137]),o($VU,[2,413],{143:555,160:556,161:$Vf2}),o($Va2,[2,412]),{20:[1,557]},{202:558,211:559,212:560,213:561,214:562,215:$Vm2,216:$Vn2,252:$Vo2},{20:[1,566]},{20:[2,168],159:$Vi2,184:567,190:530,193:$Vj2},{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:568,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{17:[1,569]},{20:[1,570]},{20:[1,571]},o($Vp2,[2,275],{277:572,308:[1,573]}),{221:[1,574]},{17:[1,575]},{17:[1,576]},{18:[1,577]},{17:[2,312],307:$Vq2,321:578},o($V_1,[2,437],{208:580,17:[1,581]}),{16:385,20:[2,181],26:26,116:$V8,126:386,206:502,207:582,209:384,322:$V9},{17:$VQ,49:583,80:137,81:138,82:$VR,84:$VS,86:$VT},{16:308,26:26,116:$V8,260:307,266:585,267:584,322:$V9},{20:[2,29]},{20:[2,388]},{20:[2,31]},{17:$Vc1,50:586,115:$Vd1},o($VU,[2,144]),o($V82,[2,133]),o($V82,[2,140]),o($Ve2,[2,403],{136:587,160:588,161:$Vf2}),{17:[1,589]},o($VP,$VQ,{80:137,81:138,49:590,82:$VR,84:$VS,86:$VT}),o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:591,322:$V9}),o($VU,[2,414]),o($V72,[2,435],{200:592,17:[1,593]}),{20:[2,214],203:594,235:595,237:$Vr2},o($Vs2,[2,185],{211:559,212:560,213:561,214:562,202:597,215:$Vm2,216:$Vn2,252:$Vo2}),o($Vt2,[2,187]),o($Vt2,[2,188]),{16:598,26:26,116:$V8,322:$V9},{253:[1,599]},o($Vd,[2,189]),{217:600,281:$Vj1,282:$Vk1,283:$Vl1,284:$Vm1},o($Vu2,[2,423],{185:601,17:[1,602]}),{20:[2,169]},{17:[1,603]},{18:[1,604]},o($Vu2,[2,425],{187:605,17:[1,606]}),o($Vu2,[2,427],{189:607,17:[1,608]}),{20:[2,278],278:609,311:[1,610]},{309:[1,611],310:[1,612]},{17:[1,614],26:515,116:$Vg2,151:616,210:$Vh2,298:613,301:615,322:$V9},o($Vc2,[2,260]),o($V42,[2,257]),{26:515,116:$Vg2,151:618,210:$Vh2,294:617,322:$V9},{17:[2,313]},{26:515,116:$Vg2,151:619,210:$Vh2,322:$V9},o($V_1,[2,180]),o($V_1,[2,438]),{20:[2,182]},{17:[2,184]},{20:[1,620]},{16:308,20:[2,230],26:26,116:$V8,260:307,266:585,267:621,322:$V9},{17:[2,123]},o($VP,$Vo,{77:77,78:78,26:79,79:80,48:622,322:$V9}),o($Ve2,[2,404]),{18:[1,623]},{17:$Vc1,50:624,115:$Vd1},o($VP,$VQ,{80:137,81:138,49:625,82:$VR,84:$VS,86:$VT}),o($V72,[2,175]),o($V72,[2,436]),{20:[2,176]},{17:[1,626],241:[1,627]},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:628,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vs2,[2,186]),{51:[1,633],117:$VU1,159:$VV1,218:629,219:630,220:631,221:[1,632],285:374,286:$VW1,288:$VX1,289:373,290:$VY1,291:$VZ1},{17:[1,634]},o($Vd,[2,190]),o($Vu2,[2,163]),o($Vu2,[2,424]),{18:[1,635]},{191:[1,636]},o($Vu2,[2,164]),o($Vu2,[2,426]),o($Vu2,[2,165]),o($Vu2,[2,428]),{20:[2,235]},{309:[1,637],310:[1,638]},{17:[1,639]},{17:[1,640]},{17:[1,641]},{18:[1,642]},{17:[2,271],306:643,307:$Vv2},o($Vw2,[2,266],{302:[1,645],303:[1,646],304:[1,647],305:[1,648]}),{20:[1,649]},{17:[1,650]},{17:[2,314],307:$Vq2,321:651},o($V72,[2,447],{268:652,17:[1,653]}),{20:[2,231]},{17:$Vc1,50:654,115:$Vd1},{158:655,159:$Vx2},{17:[2,125]},{17:$Vc1,50:657,115:$Vd1},{20:[2,215]},{17:[1,658]},o([17,241],[2,210]),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:659,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},o($Vt2,[2,192]),{17:[1,660]},o($V52,$V62,{222:[1,661]}),{17:[2,193]},o($Vt2,[2,224]),{191:[1,662]},{20:[1,663]},{17:[1,664]},{17:[1,665]},o($Vp2,[2,276]),o($Vp2,[2,277]),o($Vk2,[2,262]),{26:515,116:$Vg2,151:616,210:$Vh2,299:666,301:667,322:$V9},{17:[2,272]},{26:515,116:$Vg2,151:616,210:$Vh2,301:668,322:$V9},o($Vw2,[2,267]),o($Vw2,[2,268]),o($Vw2,[2,269]),o($Vw2,[2,270]),o($V42,[2,451],{295:669,17:[1,670]}),{20:[2,310],26:515,116:$Vg2,151:618,210:$Vh2,294:671,322:$V9},{17:[2,315]},o($V72,[2,233]),o($V72,[2,448]),{17:[1,672]},{20:[1,673]},{153:674,154:[1,675]},{17:[2,126]},{18:[1,676]},o($Vt2,[2,191]),{18:[1,677]},{17:[2,194],161:[1,678]},{20:[1,679]},o($Vy2,[2,431],{194:680,17:[1,681]}),{20:[2,279]},{20:[2,280]},{20:[1,682]},{17:[1,683]},{17:[2,273],306:684,307:$Vv2},o($V42,[2,258]),o($V42,[2,452]),{20:[2,311]},{20:[1,685]},o($V82,[2,138]),{17:[1,686]},{16:519,26:26,116:$V8,322:$V9},{159:$Vz2,242:687,244:688},{159:$VA2,224:690,228:691},{223:[1,693]},o($Vy2,[2,429],{192:694,17:[1,695]}),o($Vy2,[2,171]),o($Vy2,[2,432]),o($Vk2,[2,453],{300:696,17:[1,697]}),{20:[2,264],26:515,116:$Vg2,151:616,210:$Vh2,299:698,301:667,322:$V9},{17:[2,274]},{17:[2,124]},{20:[2,141],158:699,159:$Vx2},{20:[1,700]},{17:[1,701]},{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:702,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{20:[1,703],226:704,231:705,233:[1,706],234:[1,707]},o($VB2,[2,199],{228:691,224:708,159:$VA2}),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:709,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{17:[2,195]},o($Vy2,[2,170]),o($Vy2,[2,430]),o($Vk2,[2,263]),o($Vk2,[2,454]),{20:[2,265]},{20:[2,142]},{17:[1,711],20:[2,443],243:710},{20:[2,219],159:$Vz2,242:712,244:688},{229:[1,713]},o($Vt2,[2,439],{225:714,17:[1,715]}),{20:[1,716]},{229:[1,717]},{229:[2,204]},{229:[2,205]},o($VB2,[2,200]),{229:[1,718]},{20:[2,216]},{20:[2,444]},{20:[2,220]},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,236:720,238:719,239:$VC2,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},o($Vt2,[2,196]),o($Vt2,[2,440]),o($Vt2,[2,441],{227:722,17:[1,723]}),{17:[1,726],26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:727,177:66,178:67,230:724,232:725,235:728,236:729,237:$Vr2,238:269,239:$VC2,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{17:[1,731],26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:727,177:66,178:67,230:730,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{17:[2,217]},{17:[2,218]},{26:733,116:[1,732],322:$V9},o($Vt2,[2,197]),o($Vt2,[2,442]),{17:[1,734]},{17:[1,735]},{18:[1,736]},{17:[1,737]},{17:[2,206]},{17:[2,207]},o([20,159,233,234],[2,198]),{18:[1,738]},{17:[2,211]},{17:[2,212],87:[1,739]},{20:[2,201]},{20:[2,202]},{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:741,177:66,178:67,232:740,235:728,236:729,237:$Vr2,238:269,239:$VC2,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},o($VD2,[2,208]),{26:133,28:132,59:$Vp1,85:131,87:$Vn1,90:$Ve,91:444,116:$Vf,157:741,177:66,178:67,238:269,309:$Vg,310:$VO,312:128,314:129,316:260,317:261,318:445,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm,336:443,338:$Vo1,341:$Vq1},{26:133,28:132,85:131,90:$Ve,116:$Vf,177:66,178:67,238:127,240:742,309:$Vg,310:$VO,312:128,314:129,322:$V9,323:$Vh,324:$Vi,325:$Vj,326:$Vk,327:$Vl,333:$Vm},{17:[1,743]},{17:[1,744]},{89:[1,745]},{20:[1,746]},{20:[1,747]},{17:[2,213]},{20:[2,203]},o($VD2,[2,209])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,86],62:[2,19],147:[2,91],178:[2,16],181:[2,21],183:[2,335],196:[2,36],197:[2,34],219:[2,93],234:[2,160],235:[2,161],257:[2,116],266:[2,294],267:[2,295],268:[2,296],273:[2,289],277:[2,23],278:[2,25],290:[2,418],306:[2,229],309:[2,337],343:[2,286],359:[2,154],384:[2,183],386:[2,284],387:[2,237],412:[2,291],420:[2,114],433:[2,174],436:[2,167],464:[2,110],467:[2,113],471:[2,122],487:[2,152],509:[2,28],545:[2,29],546:[2,388],547:[2,31],567:[2,169],578:[2,313],582:[2,182],583:[2,184],586:[2,123],594:[2,176],609:[2,235],621:[2,231],624:[2,125],626:[2,215],633:[2,193],643:[2,272],651:[2,315],657:[2,126],664:[2,279],665:[2,280],671:[2,311],684:[2,274],685:[2,124],693:[2,195],698:[2,265],699:[2,142],706:[2,204],707:[2,205],710:[2,216],711:[2,444],712:[2,220],719:[2,217],720:[2,218],728:[2,206],729:[2,207],732:[2,211],734:[2,201],735:[2,202],745:[2,213],746:[2,203]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //const TOP_LEVEL_KEYWORDS = 

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes', 'code', 'triggers' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),          
        'entity.data': new Set(['in']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),        

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',        
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.code': 'entity.code', 

        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',        

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2]        
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.mixes', 1 ],
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 325;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 116;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 116;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 116;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 90;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 323;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 309;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 309;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 210;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 326;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 310;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 324;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 'ROUTE';
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 322;
                            
break;
case 31:return yy_.yytext;
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[30,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}