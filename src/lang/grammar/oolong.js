/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var oolong = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,16],$V3=[1,15],$V4=[1,21],$V5=[1,19],$V6=[1,18],$V7=[5,15,22,29,43,100,317,324],$V8=[1,27],$V9=[1,28],$Va=[17,51,82,84,86,98,99,116,118,146,150,155,157,168,172,197,279,334,341,343,345,346,362,377,382,388,389],$Vb=[2,365],$Vc=[1,51],$Vd=[117,377],$Ve=[1,68],$Vf=[1,69],$Vg=[1,63],$Vh=[1,64],$Vi=[1,65],$Vj=[1,70],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[17,82,84,86,116],$Vo=[2,63],$Vp=[1,88],$Vq=[1,89],$Vr=[1,90],$Vs=[1,91],$Vt=[1,93],$Vu=[1,94],$Vv=[1,95],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,99],$VA=[1,100],$VB=[1,101],$VC=[1,102],$VD=[1,103],$VE=[1,104],$VF=[1,105],$VG=[1,106],$VH=[20,114,115,118,122,129,161,162,169,175,191,254],$VI=[2,107],$VJ=[1,110],$VK=[17,389],$VL=[1,114],$VM=[17,20,82,84,86,89,99,116,157,172,204,274,287,295,298,308,358,360,362,377,383,389,392,393,395,397,398,399,400,401,402,403,404,407,408],$VN=[1,124],$VO=[1,130],$VP=[17,116],$VQ=[2,69],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[17,82,84,86,116,377],$VV=[1,143],$VW=[1,168],$VX=[1,166],$VY=[1,160],$VZ=[1,161],$V_=[1,162],$V$=[1,163],$V01=[1,164],$V11=[1,165],$V21=[1,169],$V31=[1,170],$V41=[1,167],$V51=[1,186],$V61=[362,383],$V71=[17,20,82,84,86,89,99,116,118,157,172,204,274,287,295,298,308,358,360,362,377,382,383,389,392,393,395,397,398,399,400,401,402,403,404,407,408],$V81=[89,389],$V91=[1,192],$Va1=[17,20,89,99,116,157,172,204,274,287,295,298,308,358,360,362,377,383,389,392,393,395,397,398,399,400,401,402,403,404,407,408],$Vb1=[2,342],$Vc1=[1,195],$Vd1=[2,116],$Ve1=[1,200],$Vf1=[1,206],$Vg1=[1,205],$Vh1=[20,40],$Vi1=[1,227],$Vj1=[2,290],$Vk1=[1,248],$Vl1=[1,249],$Vm1=[1,250],$Vn1=[1,251],$Vo1=[1,265],$Vp1=[1,267],$Vq1=[1,273],$Vr1=[1,274],$Vs1=[1,277],$Vt1=[17,99,168],$Vu1=[2,226],$Vv1=[1,306],$Vw1=[1,319],$Vx1=[1,320],$Vy1=[17,20,82,84,86,89,116,157,204,274,287,295,308,377,407,408],$Vz1=[1,324],$VA1=[1,331],$VB1=[1,326],$VC1=[1,325],$VD1=[1,322],$VE1=[1,323],$VF1=[1,327],$VG1=[1,328],$VH1=[1,329],$VI1=[1,330],$VJ1=[1,332],$VK1=[1,333],$VL1=[1,334],$VM1=[1,335],$VN1=[1,357],$VO1=[1,358],$VP1=[1,359],$VQ1=[1,360],$VR1=[1,372],$VS1=[1,373],$VT1=[1,374],$VU1=[20,347,351,352,363,366],$VV1=[1,388],$VW1=[1,387],$VX1=[1,385],$VY1=[1,386],$VZ1=[1,383],$V_1=[1,384],$V$1=[20,118,155,204,274,279,308,341,343,345,346,347,351,352,363,366],$V02=[17,118],$V12=[17,20,82,84,86,89,116,157,204,274,287,295,308,377],$V22=[87,90,117,364,365,377,378,379,380,381,382,388,393],$V32=[2,119],$V42=[17,117,377],$V52=[20,351,352,363,366],$V62=[59,87,90,117,364,365,377,378,379,380,381,382,388,393,396],$V72=[2,300],$V82=[20,117,377],$V92=[17,116,157,377],$Va2=[1,487],$Vb2=[17,82,84,86,116,157,377],$Vc2=[1,491],$Vd2=[20,352,363,366],$Ve2=[17,20,82,84,86,116,157,204,274,287,295,308,377],$Vf2=[17,116,377],$Vg2=[1,524],$Vh2=[1,527],$Vi2=[1,528],$Vj2=[1,540],$Vk2=[1,541],$Vl2=[1,547],$Vm2=[1,548],$Vn2=[1,549],$Vo2=[1,550],$Vp2=[1,551],$Vq2=[1,552],$Vr2=[1,553],$Vs2=[20,363,366],$Vt2=[17,116,118,157,357,358,359,360,362,377],$Vu2=[1,582],$Vv2=[1,583],$Vw2=[1,581],$Vx2=[20,201,204,207,210,213,216,219],$Vy2=[20,366],$Vz2=[1,607],$VA2=[1,623],$VB2=[20,295],$VC2=[20,204,274,295,308],$VD2=[20,179,182,184],$VE2=[20,241,247],$VF2=[20,241,244,247,248,252],$VG2=[20,241,244,247,248],$VH2=[20,241,247,252],$VI2=[1,695],$VJ2=[17,362],$VK2=[1,707],$VL2=[1,718],$VM2=[1,719],$VN2=[1,727],$VO2=[1,728],$VP2=[1,729],$VQ2=[20,155,189],$VR2=[1,802],$VS2=[1,805],$VT2=[20,291,292],$VU2=[1,834],$VV2=[20,194],$VW2=[1,851],$VX2=[17,20,155,291,292];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"input":4,"EOF":5,"input0":6,"statement":7,"import_statement":8,"const_statement":9,"type_statement":10,"schema_statement":11,"entity_statement":12,"view_statement":13,"dataset_statement":14,"import":15,"identifier_or_string":16,"NEWLINE":17,"INDENT":18,"import_statement_block":19,"DEDENT":20,"import_statement_option0":21,"const":22,"const_statement_item":23,"const_statement_block":24,"const_statement_option0":25,"identifier":26,"=":27,"literal":28,"schema":29,"schema_statement_block":30,"schema_statement_option0":31,"comment_or_not":32,"schema_statement_block_option0":33,"schema_views_or_not":34,"schema_views":35,"schema_entities":36,"entities":37,"schema_entities_block":38,"schema_entities_option0":39,"views":40,"schema_views_block":41,"schema_views_option0":42,"type":43,"type_statement_item":44,"type_statement_block":45,"type_statement_option0":46,"type_base":47,"type_info_or_not":48,"type_modifiers_or_not":49,"field_comment_or_not":50,":":51,"types":52,"int_keyword":53,"number_keyword":54,"text_keyword":55,"bool_keyword":56,"binary_keyword":57,"datetime_keyword":58,"any":59,"enum":60,"array":61,"object":62,"int":63,"integer":64,"number":65,"float":66,"decimal":67,"text":68,"string":69,"bool":70,"boolean":71,"blob":72,"binary":73,"buffer":74,"datetime":75,"timestamp":76,"type_infos":77,"type_info":78,"narrow_function_call":79,"type_modifiers":80,"type_modifier":81,"|~":82,"type_modifier_validators":83,"|>":84,"general_function_call":85,"|=":86,"(":87,"literal_and_value_expression":88,")":89,"REGEXP":90,"logical_expression":91,"entity_statement_header":92,"entity_statement_block":93,"entity_statement_option0":94,"entity_statement_header0":95,"entity_base_keywords":96,"identifier_or_string_list":97,"extends":98,"is":99,"entity":100,"entity_sub_items":101,"entity_sub_item":102,"with_features":103,"has_fields":104,"associations_statement":105,"key_statement":106,"index_statement":107,"data_statement":108,"code_statement":109,"interfaces_statement":110,"mixin_statement":111,"triggers_statement":112,"restful_statement":113,"mixes":114,"code":115,"--":116,"STRING":117,"with":118,"with_features_block":119,"with_features_option0":120,"feature_inject":121,"has":122,"has_fields_block":123,"has_fields_option0":124,"field_item":125,"field_item_body":126,"modifiable_field":127,"type_base_or_not":128,"associations":129,"associations_block":130,"associations_statement_option0":131,"association_item":132,"association_type_referee":133,"association_item_option0":134,"association_item_option1":135,"association_cases_block":136,"association_item_option2":137,"association_type_referer":138,"association_item_option3":139,"association_item_option4":140,"hasOne":141,"hasMany":142,"refersTo":143,"belongsTo":144,"association_through":145,"connectedBy":146,"identifier_string_or_dotname":147,"association_extra_condition":148,"association_connection":149,"being":150,"array_of_identifier_or_string":151,"association_condition":152,"conditional_expression":153,"association_cases":154,"when":155,"association_as":156,"as":157,"association_qualifiers":158,"optional":159,"default":160,"key":161,"index":162,"index_item":163,"index_statement_block":164,"index_statement_option0":165,"index_item_body":166,"index_item_option0":167,"unique":168,"data":169,"data_records":170,"data_statement_option0":171,"in":172,"inline_object":173,"inline_array":174,"triggers":175,"triggers_statement_block":176,"triggers_statement_option0":177,"triggers_operation":178,"onCreate":179,"triggers_operation_block":180,"triggers_operation_option0":181,"onCreateOrUpdate":182,"triggers_operation_option1":183,"onDelete":184,"triggers_operation_option2":185,"triggers_operation_item":186,"triggers_result_block":187,"triggers_operation_item_option0":188,"always":189,"triggers_operation_item_option1":190,"restful":191,"restful_relative_uri":192,"restful_statement_option0":193,"ROUTE":194,"restful_methods":195,"restful_relative_uri_option0":196,"->":197,"restful_relative_uri_option1":198,"restful_methods_repetition_plus0":199,"restful_method":200,"create":201,"restful_create":202,"restful_method_option0":203,"findOne":204,"restful_find_one":205,"restful_method_option1":206,"findAll":207,"restful_find_all":208,"restful_method_option2":209,"updateOne":210,"restful_update_one":211,"restful_method_option3":212,"updateMany":213,"restful_update_many":214,"restful_method_option4":215,"deleteOne":216,"restful_delete_one":217,"restful_method_option5":218,"deleteMany":219,"restful_delete_many":220,"restful_method_option6":221,"restful_create_repetition0":222,"restful_create_item":223,"restful_allow_roles":224,"restful_preset_options":225,"restful_find_one_repetition0":226,"restful_find_one_item":227,"restful_preset_order":228,"restful_nested":229,"restful_id_binding":230,"restful_find_all_repetition0":231,"restful_find_all_item":232,"restful_update_one_repetition0":233,"restful_update_one_item":234,"restful_update_many_repetition0":235,"restful_update_many_item":236,"restful_delete_one_repetition0":237,"restful_delete_one_item":238,"restful_delete_many_repetition0":239,"restful_delete_many_item":240,"allow":241,"anonymous":242,"self":243,"presetOfOrder":244,"restful_preset_order_block":245,"restful_preset_order_option0":246,"presetOptions":247,"nested":248,"restful_nested_repetition_plus0":249,"restful_nested_option0":250,"nested_routes":251,"id":252,"modifiable_value":253,"interface":254,"interfaces_statement_block":255,"interfaces_statement_option0":256,"interface_definition":257,"interface_definition_body":258,"interface_definition_option0":259,"accept_or_not":260,"implementation":261,"return_or_not":262,"accept_statement":263,"accept":264,"accept_param":265,"accept_block":266,"accept_statement_option0":267,"modifiable_param":268,"DOTNAME":269,"operation":270,"find_one_operation":271,"coding_block":272,"find_one_keywords":273,"find":274,"article_keyword":275,"selection_inline_keywords":276,"case_statement":277,"cases_keywords":278,"by":279,"cases":280,"below":281,"case_condition_block":282,"case_statement_option0":283,"otherwise_statement":284,"case_statement_option1":285,"case_condition_item":286,"=>":287,"condition_as_result_expression":288,"otherwise_keywords":289,"stop_controll_flow_expression":290,"otherwise":291,"else":292,"return_expression":293,"throw_error_expression":294,"return":295,"throw":296,"gfc_param_list":297,"unless":298,"return_condition_block":299,"return_or_not_option0":300,"return_condition_item":301,"update_operation":302,"update":303,"where_expr":304,"create_operation":305,"delete_operation":306,"delete":307,"do":308,"javascript":309,"assign_operation":310,"set":311,"identifier_or_member_access":312,"<-":313,"value":314,"variable_modifier_or_not":315,"entity_fields_selections":316,"dataset":317,"dataset_statement_block":318,"dataset_statement_option0":319,"article_keyword_or_not":320,"dataset_join_with_item":321,"dataset_join_with_block":322,"dataset_join_with_item_option0":323,"view":324,"view_statement_block":325,"view_statement_option0":326,"view_main_entity":327,"view_selection_or_not":328,"group_by_or_not":329,"having_or_not":330,"order_by_or_not":331,"skip_or_not":332,"limit_or_not":333,"list":334,"view_selection":335,"a":336,"an":337,"the":338,"one":339,"selection_attributive_keywords":340,"of":341,"which":342,"where":343,"selection_keywords":344,"selectedBy":345,"selected":346,"group":347,"identifier_string_or_dotname_list":348,"identifier_string_or_dotname_block":349,"group_by_or_not_option0":350,"having":351,"order":352,"order_by_list":353,"order_by_block":354,"order_by_or_not_option0":355,"order_by_clause":356,"ascend":357,"<":358,"descend":359,">":360,"order_by_list0":361,",":362,"offset":363,"INTEGER":364,"REFERENCE":365,"limit":366,"gfc_param0":367,"nfc_param_list":368,"nfc_param":369,"nfc_param_list0":370,"unary_expression":371,"binary_expression":372,"boolean_expression":373,"gfc_param_list0":374,"?":375,"identifier_string_or_dotname_list0":376,"NAME":377,"FLOAT":378,"BOOL":379,"SCRIPT":380,"SYMBOL":381,"{":382,"}":383,"kv_pairs":384,"kv_pair_item":385,"non_exist":386,"kv_pairs0":387,"[":388,"]":389,"identifier_or_string_list0":390,"simple_expression":391,"exists":392,"not":393,"null":394,"~":395,"all":396,">=":397,"<=":398,"==":399,"!=":400,"+":401,"-":402,"*":403,"/":404,"logical_expression_right":405,"logical_operators":406,"and":407,"or":408,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"import",17:"NEWLINE",18:"INDENT",20:"DEDENT",22:"const",27:"=",29:"schema",37:"entities",40:"views",43:"type",51:":",59:"any",60:"enum",61:"array",62:"object",63:"int",64:"integer",65:"number",66:"float",67:"decimal",68:"text",69:"string",70:"bool",71:"boolean",72:"blob",73:"binary",74:"buffer",75:"datetime",76:"timestamp",82:"|~",84:"|>",86:"|=",87:"(",89:")",90:"REGEXP",98:"extends",99:"is",100:"entity",114:"mixes",115:"code",116:"--",117:"STRING",118:"with",122:"has",129:"associations",141:"hasOne",142:"hasMany",143:"refersTo",144:"belongsTo",146:"connectedBy",150:"being",155:"when",157:"as",159:"optional",160:"default",161:"key",162:"index",168:"unique",169:"data",172:"in",175:"triggers",179:"onCreate",182:"onCreateOrUpdate",184:"onDelete",187:"triggers_result_block",189:"always",191:"restful",194:"ROUTE",197:"->",201:"create",204:"findOne",207:"findAll",210:"updateOne",213:"updateMany",216:"deleteOne",219:"deleteMany",241:"allow",242:"anonymous",243:"self",244:"presetOfOrder",247:"presetOptions",248:"nested",252:"id",254:"interface",264:"accept",269:"DOTNAME",274:"find",279:"by",280:"cases",281:"below",287:"=>",291:"otherwise",292:"else",295:"return",296:"throw",298:"unless",303:"update",304:"where_expr",307:"delete",308:"do",309:"javascript",311:"set",312:"identifier_or_member_access",313:"<-",315:"variable_modifier_or_not",317:"dataset",324:"view",334:"list",336:"a",337:"an",338:"the",339:"one",341:"of",342:"which",343:"where",345:"selectedBy",346:"selected",347:"group",351:"having",352:"order",357:"ascend",358:"<",359:"descend",360:">",362:",",363:"offset",364:"INTEGER",365:"REFERENCE",366:"limit",375:"?",377:"NAME",378:"FLOAT",379:"BOOL",380:"SCRIPT",381:"SYMBOL",382:"{",383:"}",388:"[",389:"]",392:"exists",393:"not",394:"null",395:"~",396:"all",397:">=",398:"<=",399:"==",400:"!=",401:"+",402:"-",403:"*",404:"/",407:"and",408:"or"},
productions_: [0,[3,1],[4,1],[4,2],[6,1],[6,2],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,3],[8,6],[19,2],[19,3],[9,3],[9,6],[23,3],[24,2],[24,3],[11,7],[30,3],[34,0],[34,1],[36,6],[38,2],[38,3],[35,6],[41,2],[41,3],[10,3],[10,6],[44,5],[45,2],[45,3],[47,2],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,1],[53,1],[54,1],[54,1],[54,1],[55,1],[55,1],[56,1],[56,1],[57,1],[57,1],[57,1],[58,1],[58,1],[48,0],[48,1],[77,1],[77,2],[78,1],[78,1],[49,0],[49,1],[80,1],[80,2],[81,2],[81,2],[81,2],[81,4],[81,2],[81,2],[83,1],[83,1],[83,1],[83,3],[12,2],[12,6],[92,1],[92,3],[96,1],[96,1],[95,2],[93,1],[93,2],[101,1],[101,2],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[102,1],[111,3],[109,3],[32,0],[32,3],[103,6],[119,2],[119,3],[104,6],[123,2],[123,3],[125,2],[50,0],[50,2],[126,1],[128,0],[128,1],[105,6],[130,2],[130,3],[132,6],[132,10],[132,7],[133,1],[133,1],[138,1],[138,1],[145,2],[145,3],[145,1],[145,2],[145,1],[148,2],[136,5],[149,2],[149,3],[154,3],[154,4],[152,2],[156,2],[158,1],[158,4],[106,3],[106,3],[107,3],[107,6],[164,2],[164,3],[163,1],[163,3],[166,1],[166,1],[108,3],[108,4],[108,6],[170,1],[170,1],[112,6],[178,6],[178,6],[178,6],[176,1],[176,2],[180,1],[180,2],[186,7],[186,6],[113,6],[192,6],[192,8],[195,1],[200,6],[200,6],[200,6],[200,6],[200,6],[200,6],[200,6],[202,1],[223,1],[223,1],[205,1],[227,1],[227,1],[227,1],[227,1],[227,1],[208,1],[232,1],[232,1],[232,1],[232,1],[211,1],[234,1],[234,1],[234,1],[214,1],[236,1],[236,1],[217,1],[238,1],[238,1],[238,1],[220,1],[240,1],[240,1],[224,3],[224,3],[224,3],[228,6],[245,3],[245,4],[225,3],[229,6],[251,4],[251,3],[230,3],[110,6],[255,1],[255,2],[257,6],[258,3],[260,0],[260,1],[263,3],[263,6],[266,2],[266,3],[265,1],[265,5],[261,1],[261,2],[270,1],[270,1],[273,1],[273,2],[271,4],[271,3],[278,1],[278,2],[278,4],[277,6],[277,7],[286,4],[282,1],[282,2],[284,4],[284,4],[284,7],[289,1],[289,1],[290,1],[290,1],[288,2],[288,5],[293,2],[294,2],[294,2],[294,5],[262,0],[262,2],[262,7],[301,4],[301,4],[299,2],[299,3],[302,6],[305,5],[306,4],[272,3],[310,6],[316,1],[316,3],[14,7],[318,3],[322,1],[322,2],[321,2],[321,8],[13,7],[325,9],[327,3],[327,4],[328,0],[328,1],[335,3],[320,0],[320,1],[275,1],[275,1],[275,1],[275,1],[340,2],[340,1],[340,1],[340,1],[344,1],[344,1],[344,2],[276,1],[276,1],[329,0],[329,4],[329,7],[330,0],[330,3],[331,0],[331,4],[331,7],[354,2],[354,3],[356,1],[356,2],[356,2],[356,2],[356,2],[353,1],[353,2],[361,2],[361,3],[332,0],[332,3],[332,3],[333,0],[333,3],[333,3],[127,4],[253,1],[253,2],[268,1],[121,1],[121,1],[79,4],[368,1],[368,2],[370,2],[370,3],[369,1],[369,1],[88,1],[88,1],[88,1],[85,4],[297,1],[297,2],[374,2],[374,3],[374,1],[367,1],[367,1],[367,2],[367,1],[147,1],[147,1],[147,1],[349,2],[349,3],[348,1],[348,2],[376,2],[376,3],[16,1],[16,1],[26,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[173,2],[173,3],[385,3],[385,2],[385,3],[386,0],[384,1],[384,2],[387,2],[387,3],[174,2],[174,3],[151,3],[97,1],[97,2],[390,2],[390,3],[314,1],[314,1],[153,1],[153,1],[153,1],[391,1],[391,1],[391,3],[371,2],[371,3],[371,3],[371,4],[371,4],[373,3],[373,4],[373,4],[372,3],[372,3],[372,3],[372,3],[372,3],[372,3],[372,3],[372,4],[372,3],[372,3],[372,3],[372,3],[91,2],[405,2],[406,1],[406,1],[21,0],[21,1],[25,0],[25,1],[31,0],[31,1],[33,0],[33,1],[39,0],[39,1],[42,0],[42,1],[46,0],[46,1],[94,0],[94,1],[120,0],[120,1],[124,0],[124,1],[131,0],[131,1],[134,0],[134,1],[135,0],[135,1],[137,0],[137,1],[139,0],[139,1],[140,0],[140,1],[165,0],[165,1],[167,0],[167,1],[171,0],[171,1],[177,0],[177,1],[181,0],[181,1],[183,0],[183,1],[185,0],[185,1],[188,0],[188,1],[190,0],[190,1],[193,0],[193,1],[196,0],[196,1],[198,0],[198,1],[199,1],[199,2],[203,0],[203,1],[206,0],[206,1],[209,0],[209,1],[212,0],[212,1],[215,0],[215,1],[218,0],[218,1],[221,0],[221,1],[222,0],[222,2],[226,0],[226,2],[231,0],[231,2],[233,0],[233,2],[235,0],[235,2],[237,0],[237,2],[239,0],[239,2],[246,0],[246,1],[249,1],[249,2],[250,0],[250,1],[256,0],[256,1],[259,0],[259,1],[267,0],[267,1],[283,0],[283,1],[285,0],[285,1],[300,0],[300,1],[319,0],[319,1],[323,0],[323,1],[326,0],[326,1],[350,0],[350,1],[355,0],[355,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            var r = state;
            state = null;
            return r ? r.validate().build() : '';
        
break;
case 13:
this.$ = state.import($$[$0-1]) ;
break;
case 15:
this.$ = state.import($$[$0-1]);
break;
case 16:
this.$ = state.import($$[$0-2]);
break;
case 19:

            state.defineConstant($$[$0-2], $$[$0], _$[$0-2].first_line);   
        
break;
case 22:
this.$ = state.defineSchema($$[$0-5], $$[$0-2], _$[$0-6].first_line);
break;
case 23:
this.$ = Object.assign({}, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 26:
this.$ = { entities: $$[$0-2] };
break;
case 27:
this.$ = [ { entity: $$[$0-1] } ];
break;
case 28:
this.$ = [ { entity: $$[$0-2] } ].concat($$[$0]);
break;
case 29:
this.$ = { views: $$[$0-2] };
break;
case 30: case 110: case 122: case 140: case 150: case 230: case 268: case 313: case 359:
this.$ = [ $$[$0-1] ];
break;
case 31: case 111: case 123: case 151: case 231: case 269: case 314: case 360:
this.$ = [ $$[$0-2] ].concat($$[$0]);
break;
case 34:
            
            if (BUILTIN_TYPES.has($$[$0-4])) throw new Error('Cannot use built-in type "' + $$[$0-4] + '" as a custom type name. Line: ' + _$[$0-4].first_line);
            // default as text
            state.defineType($$[$0-4], Object.assign({type: 'text'}, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]));
        
break;
case 37: case 73: case 89: case 90: case 138: case 278: case 385:
this.$ = $$[$0];
break;
case 38:
this.$ = { type: 'integer' };
break;
case 39:
this.$ = { type: 'number' }    ;
break;
case 40:
this.$ = { type: 'text' };
break;
case 41:
this.$ = { type: 'boolean' };
break;
case 42:
this.$ = { type: 'binary' };
break;
case 43:
this.$ = { type: 'datetime' };
break;
case 44:
this.$ = { type: 'any' };
break;
case 45:
this.$ = { type: 'enum' };
break;
case 46:
this.$ = { type: 'array' };
break;
case 47:
this.$ = { type: 'object' };
break;
case 48:
this.$ = { type: $$[$0] };
break;
case 66: case 91: case 115: case 223: case 384: case 386:
this.$ = Object.assign({}, $$[$0-1], $$[$0]);
break;
case 67:
this.$ = { [$$[$0]]: true };
break;
case 68:
this.$ = { [$$[$0].name]: $$[$0].args  };
break;
case 70:
this.$ = { modifiers: $$[$0] };
break;
case 71: case 165: case 167: case 234: case 248: case 279: case 320: case 322: case 337: case 339: case 349: case 361: case 363: case 390: case 392:
this.$ = [ $$[$0] ];
break;
case 72: case 166: case 168: case 235: case 249: case 280: case 321: case 323: case 338: case 340: case 350: case 364: case 391: case 393:
this.$ = [ $$[$0-1] ].concat($$[$0]);
break;
case 74:
this.$ = state.normalizeProcessor($$[$0]);
break;
case 75:
this.$ = state.normalizeProcessor($$[$0].name, $$[$0].args)    ;
break;
case 76:
this.$ = state.normalizeActivator('$eval', [ $$[$0-1] ]);
break;
case 77:
this.$ = state.normalizeActivator($$[$0]);
break;
case 78:
this.$ = state.normalizeActivator($$[$0].name, $$[$0].args)        ;
break;
case 79:
this.$ = state.normalizeValidator($$[$0]);
break;
case 80:
this.$ = state.normalizeValidator($$[$0].name, $$[$0].args)    ;
break;
case 81:
this.$ = state.normalizeValidator('matches', $$[$0])    ;
break;
case 82:
this.$ = state.normalizeValidator('$eval', [ $$[$0-1] ]);
break;
case 83:
this.$ = state.defineEntity($$[$0-1][0], $$[$0-1][1], _$[$0-1].first_line);
break;
case 84:
this.$ = state.defineEntity($$[$0-5][0], Object.assign({}, $$[$0-5][1], $$[$0-2]), _$[$0-5].first_line);
break;
case 85:
this.$ = [ $$[$0], {} ];
break;
case 86:
this.$ = [ $$[$0-2], { base: $$[$0] } ]    ;
break;
case 93:
this.$ = merge($$[$0-1], $$[$0]);
break;
case 105:
this.$ = { mixins: $$[$0-1] };
break;
case 106:
this.$ = { code: $$[$0-1] };
break;
case 108:
this.$ = { comment: $$[$0-1] };
break;
case 109:
this.$ = { features: $$[$0-2] };
break;
case 112:
this.$ = { fields: $$[$0-2] };
break;
case 113:
this.$ = { [$$[$0-1].name]: $$[$0-1] };
break;
case 114:
this.$ = Object.assign({}, { [$$[$0-2].name]: $$[$0-2] }, $$[$0]);
break;
case 117:
this.$ = { comment: $$[$0] };
break;
case 121:
this.$ = { associations: $$[$0-2] };
break;
case 124:
this.$ = { type: $$[$0-5], destEntity: $$[$0-4], ...$$[$0-3], ...$$[$0-2], fieldProps: { ...$$[$0-1], ...$$[$0]} }    ;
break;
case 125:
this.$ = { type: $$[$0-9], destEntity: $$[$0-6], ...$$[$0-5], ...$$[$0-4], fieldProps: { ...$$[$0-3], ...$$[$0-2] } };
break;
case 126:
this.$ = { type: $$[$0-6], destEntity: $$[$0-5], ...$$[$0-4], ...$$[$0-3], fieldProps: { ...$$[$0-2], ...$$[$0-1], ...$$[$0] } }      ;
break;
case 131:
this.$ = { by: $$[$0] }    ;
break;
case 132:
this.$ = { by: $$[$0-1], ...$$[$0] }    ;
break;
case 133:
this.$ = { remoteField: $$[$0] }     ;
break;
case 134:
this.$ = { remoteField: $$[$0] }      ;
break;
case 135:
this.$ = { with: $$[$0] };
break;
case 136:
this.$ = { with: $$[$0] }    ;
break;
case 137:
this.$ = { remoteField: $$[$0-1] } ;
break;
case 139:
this.$ = { by: $$[$0-1], with: $$[$0] }     ;
break;
case 141:
this.$ = [ $$[$0-2] ].concat( $$[$0] );
break;
case 142:
this.$ = $$[$0];;
break;
case 143:
this.$ = { srcField: $$[$0] };
break;
case 144:
this.$ = { optional: true };
break;
case 145:
this.$ = { default: $$[$0-1] };
break;
case 146: case 147:
this.$ = { key: $$[$0-1] };
break;
case 148:
this.$ = { indexes: [$$[$0-1]] };
break;
case 149:
this.$ = { indexes: $$[$0-2] };
break;
case 153:
this.$ = Object.assign({}, $$[$0-2], { unique: true });
break;
case 154: case 155:
this.$ = { fields: $$[$0] };
break;
case 156:
this.$ = { data: [{ records: $$[$0-1] }] };
break;
case 157:
this.$ = { data: [{ dataSet: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 158:
this.$ = { data: [{ dataSet: $$[$0-4], runtimeEnv: $$[$0-2], records: $$[$0-1] }] }    ;
break;
case 161:
this.$ = { triggers: $$[$0-2] };
break;
case 162:
this.$ = { onCreate: $$[$0-2] }    ;
break;
case 163:
this.$ = { onCreateOrUpdate: $$[$0-2] }   ;
break;
case 164:
this.$ = { onDelete: $$[$0-2] }   ;
break;
case 169:
this.$ = { condition: $$[$0-5], do: $$[$0-2] };
break;
case 170:
this.$ = { do: $$[$0-2] };
break;
case 171:
this.$ = { restful: $$[$0-2] };
break;
case 172:
this.$ = { [$$[$0-5]]: { type: 'entity', methods: $$[$0-2] } };
break;
case 173:
this.$ = { [$$[$0-7]]: { type: 'shortcut', refersTo: $$[$0-5], methods: $$[$0-2] } };
break;
case 174: case 182: case 185: case 191: case 196: case 200: case 203: case 207:
this.$ = $$[$0].reduce((r, v) => (Object.assign(r, v), r), {});
break;
case 175:
this.$ = { create: $$[$0-2] }   ;
break;
case 176:
this.$ = { findOne: $$[$0-2] }    ;
break;
case 177:
this.$ = { findAll: $$[$0-2] }    ;
break;
case 178:
this.$ = { updateOne: $$[$0-2] }    ;
break;
case 179:
this.$ = { updateMany: $$[$0-2] }    ;
break;
case 180:
this.$ = { deleteOne: $$[$0-2] }    ;
break;
case 181:
this.$ = { deleteMany: $$[$0-2] };
break;
case 210:
this.$ = { allowAnonymous: true }  ;
break;
case 211:
this.$ = { allowUserSelf: true }     ;
break;
case 212:
this.$ = { allowedRoles: $$[$0-1] }     ;
break;
case 213:
this.$ = { presetOfOrder: $$[$0-2] } ;
break;
case 214:
this.$ = { [$$[$0-2]]: $$[$0-1] };
break;
case 215:
this.$ = { [$$[$0-3]]: $$[$0-2], ...$$[$0] };
break;
case 216:
this.$ = { presetOptions: $$[$0-1] };
break;
case 217:
this.$ = { nested: $$[$0-2].reduce((r, v) => (Object.assign(r, v), r), {}) };
break;
case 218:
this.$ = { [$$[$0-3]]: { association: $$[$0-2], query: $$[$0-1] } };
break;
case 219:
this.$ = { [$$[$0-2]]: { association: $$[$0-1] } };
break;
case 220:
this.$ = { bindId: $$[$0-1] };
break;
case 221:
this.$ = { interfaces: $$[$0-2] };
break;
case 222:
this.$ = Object.assign({}, $$[$0]);
break;
case 224:
this.$ = { [$$[$0-5]]: $$[$0-2] };
break;
case 225:
this.$ = Object.assign({}, $$[$0-2], { implementation: $$[$0-1] }, $$[$0]);
break;
case 228:
this.$ = { accept: [ $$[$0-1] ] };
break;
case 229:
this.$ = { accept: $$[$0-2] };
break;
case 233:
this.$ = Object.assign({ name: $$[$0-4], type: $$[$0-2] }, $$[$0-1], $$[$0])   ;
break;
case 240:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-2], condition: $$[$0] };
break;
case 241:
this.$ = { oolType: 'FindOneStatement', model: $$[$0-1], condition: $$[$0] };
break;
case 245:
this.$ = { oolType: 'cases', items: $$[$0-2] };
break;
case 246:
this.$ = { oolType: 'cases', items: $$[$0-3], else: $$[$0-2] } ;
break;
case 247:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] };
break;
case 250: case 251: case 281: case 378: case 388: case 389: case 401:
this.$ = $$[$0-1];
break;
case 252: case 258:
this.$ = $$[$0-2];
break;
case 259:
this.$ = { oolType: 'ReturnExpression', value: $$[$0] };
break;
case 260:
this.$ = { oolType: 'ThrowExpression', message: $$[$0] };
break;
case 261:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0] };
break;
case 262:
this.$ = { oolType: 'ThrowExpression', errorType: $$[$0-3], args: $$[$0-1] };
break;
case 264:
 this.$ = { return: $$[$0-1] }; 
break;
case 265:
 this.$ = { return: Object.assign($$[$0-6], { exceptions: $$[$0-2] }) }; 
break;
case 266: case 267:
this.$ = { oolType: 'ConditionalStatement', test: $$[$0-2], then: $$[$0] }    ;
break;
case 270:
 this.$ = { oolType: 'update', target: $$[$0-4], data: $$[$0-2], filter: $$[$0-1] }; 
break;
case 271:
 this.$ = { oolType: 'create', target: $$[$0-3], data: $$[$0-1] }; 
break;
case 272:
 this.$ = { oolType: 'delete', target: $$[$0-2], filter: $$[$0-1] }; 
break;
case 273:
this.$ = { oolType: 'DoStatement', do: $$[$0-1] };
break;
case 274:
 this.$ = { oolType: 'assignment', left: $$[$0-4], right: Object.assign({ argument: $$[$0-2] }, $$[$0-1]) }; 
break;
case 275:
this.$ = { entity: $$[$0] }     ;
break;
case 276:
this.$ = { entity: $$[$0-2], projection: $$[$0] };
break;
case 277:
this.$ = state.defineDataset($$[$0-5], $$[$0-2]);
break;
case 282:
this.$ = { ...$$[$0-7], with: $$[$0-2] };
break;
case 283:
this.$ = state.defineView($$[$0-5], $$[$0-2]);
break;
case 284:
this.$ = Object.assign({}, $$[$0-8], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 285:
this.$ = { dataset: $$[$0] };
break;
case 286:
this.$ = { dataset: $$[$0-1], isList: true };
break;
case 289:
this.$ = { condition: $$[$0-1] };
break;
case 306:
this.$ = { groupBy: $$[$0-1] };
break;
case 307:
this.$ = { groupBy: $$[$0-2] };
break;
case 309:
this.$ = { having: $$[$0-1] };
break;
case 311:
this.$ = { orderBy: $$[$0-1] };
break;
case 312:
this.$ = { orderBy: $$[$0-2] };
break;
case 315:
this.$ = { field: $$[$0], ascend: true };
break;
case 316: case 317:
this.$ = { field: $$[$0-1], ascend: true };
break;
case 318: case 319:
this.$ = { field: $$[$0-1], ascend: false };
break;
case 325: case 326:
this.$ = { offset: $$[$0-1] };
break;
case 328: case 329:
this.$ = { limit: $$[$0-1] };
break;
case 330:
this.$ = Object.assign({ name: $$[$0-3], type: $$[$0-3] }, $$[$0-2], $$[$0-1], $$[$0])   ;
break;
case 332:
this.$ = state.normalizePipedValue($$[$0-1], { modifiers: $$[$0] });
break;
case 336: case 346:
this.$ = { name: $$[$0-3], args: $$[$0-1] };
break;
case 342:
this.$ = state.normalizeConstReference($$[$0]);
break;
case 347:
this.$ = [ $$[$0] ]    ;
break;
case 348:
this.$ = [ $$[$0-1] ].concat($$[$0])    ;
break;
case 351: case 387: case 498: case 500: case 502: case 504: case 506: case 508: case 510:
this.$ = [];
break;
case 354:
this.$ = this.normalizeOptionalReference($$[$0-1]);
break;
case 362:
this.$ = [ $$[$0-1] ].concat($$[$0]) ;
break;
case 377:
this.$ = {};
break;
case 379: case 381:
this.$ = {[$$[$0-2]]: $$[$0]};
break;
case 380:
this.$ = {[$$[$0-1]]: state.normalizeReference($$[$0-1])};
break;
case 395:
this.$ = state.normalizeFunctionCall($$[$0]);
break;
case 402:
this.$ = { oolType: 'UnaryExpression', operator: 'exists', argument: $$[$0-1] };
break;
case 403:
this.$ = { oolType: 'UnaryExpression', operator: 'not-exists', argument: $$[$0-2] };
break;
case 404:
this.$ = { oolType: 'UnaryExpression', operator: 'is-null', argument: $$[$0-2] };
break;
case 405:
this.$ = { oolType: 'UnaryExpression', operator: 'is-not-null', argument: $$[$0-3] };
break;
case 406:
this.$ = { oolType: 'UnaryExpression', operator: 'not', argument: $$[$0-1], prefix: true }    ;
break;
case 407:
this.$ = { oolType: 'ValidateExpression', caller: $$[$0-2], callee: $$[$0] }    ;
break;
case 408:
this.$ = { oolType: 'AnyOneOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 409:
this.$ = { oolType: 'AllOfExpression', caller: $$[$0-2], callee: $$[$0-1] };
break;
case 410:
this.$ = { oolType: 'BinaryExpression', operator: '>', left: $$[$0-2], right: $$[$0] };
break;
case 411:
this.$ = { oolType: 'BinaryExpression', operator: '<', left: $$[$0-2], right: $$[$0] };
break;
case 412:
this.$ = { oolType: 'BinaryExpression', operator: '>=', left: $$[$0-2], right: $$[$0] };
break;
case 413:
this.$ = { oolType: 'BinaryExpression', operator: '<=', left: $$[$0-2], right: $$[$0] };
break;
case 414:
this.$ = { oolType: 'BinaryExpression', operator: '==', left: $$[$0-2], right: $$[$0] };
break;
case 415:
this.$ = { oolType: 'BinaryExpression', operator: '!=', left: $$[$0-2], right: $$[$0] };
break;
case 416:
this.$ = { oolType: 'BinaryExpression', operator: 'in', left: $$[$0-2], right: $$[$0] };
break;
case 417:
this.$ = { oolType: 'BinaryExpression', operator: 'notIn', left: $$[$0-3], right: $$[$0-1] };
break;
case 418:
this.$ = { oolType: 'BinaryExpression', operator: '+', left: $$[$0-2], right: $$[$0] };
break;
case 419:
this.$ = { oolType: 'BinaryExpression', operator: '-', left: $$[$0-2], right: $$[$0] };
break;
case 420:
this.$ = { oolType: 'BinaryExpression', operator: '*', left: $$[$0-2], right: $$[$0] };
break;
case 421:
this.$ = { oolType: 'BinaryExpression', operator: '/', left: $$[$0-2], right: $$[$0] };
break;
case 422:
this.$ = Object.assign({ left: $$[$0-1] }, $$[$0])    ;
break;
case 423:
this.$ = Object.assign({ oolType: 'LogicalExpression' }, $$[$0-1], { right: $$[$0] });
break;
case 424:
this.$ = { operator: 'and' };
break;
case 425:
this.$ = { operator: 'or' };
break;
case 482: case 514:
this.$ = [$$[$0]];
break;
case 483: case 499: case 501: case 503: case 505: case 507: case 509: case 511: case 515:
$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,317:$V5,324:$V6},{1:[3]},{1:[2,1]},{1:[2,2]},{5:[1,22]},{5:[2,4],6:23,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0,22:$V1,29:$V2,43:$V3,92:17,95:20,100:$V4,317:$V5,324:$V6},o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),o($V7,[2,9]),o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),{16:24,17:[1,25],26:26,117:$V8,377:$V9},{17:[1,30],23:29,26:31,377:$V9},{16:34,17:[1,33],26:26,44:32,117:$V8,377:$V9},{16:35,26:26,117:$V8,377:$V9},{17:[1,36]},{16:37,26:26,117:$V8,377:$V9},{16:38,26:26,117:$V8,377:$V9},{17:[2,85],96:39,98:[1,40],99:[1,41]},{16:42,26:26,117:$V8,377:$V9},{1:[2,3]},{5:[2,5]},{17:[1,43]},{18:[1,44]},o($Va,$Vb),o($Va,[2,366]),o([17,20,27,51,82,84,86,87,89,98,99,116,118,146,150,155,157,168,172,197,204,274,279,287,295,298,308,334,341,343,345,346,357,358,359,360,362,377,382,383,388,389,392,393,395,397,398,399,400,401,402,403,404,407,408],[2,367]),{17:[1,45]},{18:[1,46]},{27:[1,47]},{17:[1,48]},{18:[1,49]},{47:50,51:$Vc},{17:[1,52]},o($V7,[2,83],{18:[1,53]}),{17:[1,54]},{17:[1,55]},{16:57,26:26,97:56,117:$V8,377:$V9},o($Vd,[2,87]),o($Vd,[2,88]),o([17,98,99],[2,89]),o($V7,[2,13]),{16:59,19:58,26:26,117:$V8,377:$V9},o($V7,[2,17]),{23:61,24:60,26:31,377:$V9},{28:62,90:$Ve,117:$Vf,173:66,174:67,364:$Vg,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($V7,[2,32]),{16:34,26:26,44:75,45:74,117:$V8,377:$V9},o($Vn,$Vo,{48:76,77:77,78:78,26:79,79:80,377:$V9}),{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,117:$V8,377:$V9},{18:[1,107]},o($VH,$VI,{93:108,32:109,116:$VJ}),{18:[1,111]},{18:[1,112]},{17:[2,86]},o($VK,[2,390],{390:113,362:$VL}),{20:[1,115]},{17:[1,116]},{20:[1,117]},{17:[1,118]},{17:[2,19]},o($VM,[2,368]),o($VM,[2,369]),o($VM,[2,370]),o($VM,[2,371]),o($VM,[2,372]),o($VM,[2,373]),o($VM,[2,374]),o($VM,[2,375]),o($VM,[2,376]),{16:122,26:123,117:$V8,364:$VN,377:$V9,383:[1,119],384:120,385:121},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:127,297:126,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,389:[1,125]},{20:[1,134]},{17:[1,135]},o($VP,$VQ,{49:136,80:137,81:138,82:$VR,84:$VS,86:$VT}),o($Vn,[2,64]),o($Vn,[2,65],{78:78,26:79,79:80,77:142,377:$V9}),o($VU,[2,67],{87:$VV}),o($VU,[2,68]),o($VU,[2,37]),o($VU,[2,38]),o($VU,[2,39]),o($VU,[2,40]),o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($VU,[2,46]),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,49]),o($VU,[2,50]),o($VU,[2,51]),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),o($VU,[2,56]),o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),o($VU,[2,62]),o([20,37,40],$VI,{30:144,32:145,116:$VJ}),{20:[1,146]},{20:[2,90],101:147,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:158,113:159,114:$VW,115:$VX,118:$VY,122:$VZ,129:$V_,161:$V$,162:$V01,169:$V11,175:$V21,191:$V31,254:$V41},{117:[1,171]},{99:[1,174],325:172,327:173},{99:[1,176],318:175},o($VK,[2,391]),{16:177,26:26,117:$V8,377:$V9},o($V7,[2,426],{21:178,17:[1,179]}),{16:59,19:180,20:[2,15],26:26,117:$V8,377:$V9},o($V7,[2,428],{25:181,17:[1,182]}),{20:[2,20],23:61,24:183,26:31,377:$V9},o($VM,[2,377]),{383:[1,184]},{362:$V51,383:[2,383],387:185},{51:[1,187]},o($V61,[2,382],{386:188,51:$Vb}),{51:[1,189]},o($V71,[2,387]),{389:[1,190]},o($V81,[2,347],{374:191,362:$V91}),o($Va1,[2,331],{81:138,80:193,82:$VR,84:$VS,86:$VT}),o($VM,[2,352]),o($VM,[2,353],{375:[1,194]}),o($VM,[2,355]),o($VM,[2,341]),o($VM,$Vb1,{87:$Vc1}),o($V7,[2,438],{46:196,17:[1,197]}),{16:34,20:[2,35],26:26,44:75,45:198,117:$V8,377:$V9},{17:$Vd1,50:199,116:$Ve1},o($VP,[2,70]),o($Va1,[2,71],{81:138,80:201,82:$VR,84:$VS,86:$VT}),{26:203,83:202,85:204,87:$Vf1,90:$Vg1,377:$V9},{26:207,85:208,377:$V9},{26:210,85:211,87:[1,209],377:$V9},o($Vn,[2,66]),{26:214,28:132,90:$Ve,117:$Vf,173:66,174:67,364:$Vg,368:212,369:213,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{20:[1,215]},o($Vh1,[2,432],{33:216,36:217,37:[1,218]}),o($V7,[2,440],{94:219,17:[1,220]}),{20:[2,91]},{20:[2,92],101:221,102:148,103:149,104:150,105:151,106:152,107:153,108:154,109:155,110:156,111:157,112:158,113:159,114:$VW,115:$VX,118:$VY,122:$VZ,129:$V_,161:$V$,162:$V01,169:$V11,175:$V21,191:$V31,254:$V41},o($VH,[2,94]),o($VH,[2,95]),o($VH,[2,96]),o($VH,[2,97]),o($VH,[2,98]),o($VH,[2,99]),o($VH,[2,100]),o($VH,[2,101]),o($VH,[2,102]),o($VH,[2,103]),o($VH,[2,104]),{17:[1,222]},{17:[1,223]},{17:[1,224]},{16:225,26:26,117:$V8,151:226,377:$V9,388:$Vi1},{16:231,17:[1,229],26:26,117:$V8,151:232,163:228,166:230,377:$V9,388:$Vi1},{16:234,26:26,117:$V8,170:233,171:235,172:[2,462],173:236,174:237,377:$V9,382:$Vl,388:$Vm},{16:238,26:26,117:$V8,377:$V9},{17:[1,239]},{16:57,26:26,97:240,117:$V8,377:$V9},{17:[1,241]},{17:[1,242]},{17:[1,243]},{20:[1,244]},{17:[1,245]},o($Vd,$Vj1,{320:246,275:247,336:$Vk1,337:$Vl1,338:$Vm1,339:$Vn1}),{20:[1,252]},o($Vd,$Vj1,{275:247,320:253,336:$Vk1,337:$Vl1,338:$Vm1,339:$Vn1}),o($VK,[2,392],{390:254,362:$VL}),o($V7,[2,14]),o($V7,[2,427]),{20:[2,16]},o($V7,[2,18]),o($V7,[2,429]),{20:[2,21]},o($VM,[2,378]),{383:[2,384]},{16:122,26:123,117:$V8,364:$VN,377:$V9,385:255},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:256,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($V61,[2,380]),{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:257,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($V71,[2,388]),o($V81,[2,348]),o($V81,[2,351],{173:66,174:67,367:128,369:129,85:131,28:132,26:133,253:258,90:$Ve,117:$Vf,364:$Vg,365:$VO,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm}),o($VM,[2,332]),o($VM,[2,354]),{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:127,297:259,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($V7,[2,33]),o($V7,[2,439]),{20:[2,36]},{17:[2,34]},{117:[1,260]},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,79],{87:$Vc1}),o($VM,[2,80]),o($VM,[2,81]),{26:133,28:132,85:131,87:$Vo1,90:$Ve,91:261,117:$Vf,173:66,174:67,253:266,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:262,393:$Vp1},o($VM,[2,74],{87:$Vc1}),o($VM,[2,75]),{26:133,28:132,59:$Vq1,85:131,88:268,90:$Ve,117:$Vf,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:269,372:270,373:271,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,393:$Vp1,396:$Vr1},o($VM,[2,77],{87:$Vc1}),o($VM,[2,78]),{89:[1,275]},{89:[2,337],362:$Vs1,370:276},o([89,362],$Vb1),o($V7,[2,430],{31:278,17:[1,279]}),{20:[2,24],34:280,35:281,40:[1,282]},o($Vh1,[2,433]),{17:[1,283]},o($V7,[2,84]),o($V7,[2,441]),{20:[2,93]},{18:[1,284]},{18:[1,285]},{18:[1,286]},{17:[1,287]},{17:[1,288]},{16:57,26:26,97:289,117:$V8,377:$V9},{17:[1,290]},{18:[1,291]},{17:[2,152],99:[1,293],167:292,168:[2,460]},o($Vt1,[2,154]),o($Vt1,[2,155]),{17:[1,294]},{170:295,172:[2,463],173:236,174:237,382:$Vl,388:$Vm},{172:[1,296]},{17:[2,159]},{17:[2,160]},{17:[1,297]},{18:[1,298]},{17:[1,299]},{18:[1,300]},{18:[1,301]},o([20,37,40,114,115,118,122,129,161,162,169,175,191,254],[2,108]),o($V7,[2,534],{326:302,17:[1,303]}),o([20,118,155,279,341,343,345,346,347,351,352,363,366],$Vu1,{260:304,263:305,264:$Vv1}),{16:307,26:26,117:$V8,377:$V9},o($Vd,[2,291]),o($Vd,[2,292]),o($Vd,[2,293]),o($Vd,[2,294]),o($Vd,[2,295]),o($V7,[2,530],{319:308,17:[1,309]}),{16:312,26:26,117:$V8,316:311,321:310,377:$V9},o($VK,[2,393]),{362:$V51,383:[2,385],387:313},o($V61,[2,379]),o($V61,[2,381]),o($V81,[2,349],{374:314,362:$V91}),{89:[1,315]},{17:[2,117]},{89:[1,316]},{405:317,406:318,407:$Vw1,408:$Vx1},o($Vy1,[2,399]),o($Vy1,[2,400]),{26:133,28:132,85:131,87:$Vo1,90:$Ve,117:$Vf,173:66,174:67,253:266,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:321,393:$Vp1},{99:$Vz1,172:$VA1,358:$VB1,360:$VC1,392:$VD1,393:$VE1,397:$VF1,398:$VG1,399:$VH1,400:$VI1,401:$VJ1,402:$VK1,403:$VL1,404:$VM1},{87:[1,336]},{89:[1,337]},{89:[2,343]},{89:[2,344]},{89:[2,345]},{99:$Vz1,172:$VA1,358:$VB1,360:$VC1,392:$VD1,393:$VE1,395:[1,338],397:$VF1,398:$VG1,399:$VH1,400:$VI1,401:$VJ1,402:$VK1,403:$VL1,404:$VM1},{174:339,388:$Vm},{174:340,388:$Vm},o($VU,[2,336]),{89:[2,338]},{26:214,28:132,90:$Ve,117:$Vf,173:66,174:67,364:$Vg,369:341,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($V7,[2,22]),o($V7,[2,431]),{20:[2,23]},{20:[2,25]},{17:[1,342]},{18:[1,343]},{26:346,79:347,119:344,121:345,377:$V9},{16:352,26:26,117:$V8,123:348,125:349,126:350,127:351,377:$V9},{130:353,132:354,133:355,138:356,141:$VN1,142:$VO1,143:$VP1,144:$VQ1},o($VH,[2,146]),o($VH,[2,147]),{389:[1,361]},o($VH,[2,148]),{16:231,26:26,117:$V8,151:232,163:363,164:362,166:230,377:$V9,388:$Vi1},{168:[1,364]},{168:[2,461]},o($VH,[2,156]),{17:[1,365]},{16:366,26:26,117:$V8,377:$V9},o($VH,[2,106]),{16:369,26:26,117:$V8,255:367,257:368,377:$V9},o($VH,[2,105]),{176:370,178:371,179:$VR1,182:$VS1,184:$VT1},{192:375,194:[1,376]},o($V7,[2,283]),o($V7,[2,535]),o($VU1,[2,287],{328:377,335:378,276:379,344:380,340:381,118:$VV1,155:$VW1,279:[1,382],341:$VX1,343:$VY1,345:$VZ1,346:$V_1}),o($V$1,[2,227]),{16:392,17:[1,390],26:26,117:$V8,127:393,265:389,268:391,377:$V9},{17:[2,285],334:[1,394]},o($V7,[2,277]),o($V7,[2,531]),{20:[2,278]},{17:[1,395],118:[1,396]},o($V02,[2,275],{197:[1,397]}),{383:[2,386]},o($V81,[2,350]),o($VM,[2,346]),o($VM,[2,82]),o($V12,[2,422]),{26:133,28:132,85:131,87:$Vo1,90:$Ve,117:$Vf,173:66,174:67,253:266,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:398,393:$Vp1},o($V22,[2,424]),o($V22,[2,425]),{89:[1,399]},o($Vy1,[2,402]),{172:[1,401],392:[1,400]},{393:[1,403],394:[1,402]},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:404,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:405,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:406,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:407,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:408,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:409,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:410,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:411,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:412,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:413,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:414,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{26:133,28:132,85:131,87:$Vo1,90:$Ve,117:$Vf,173:66,174:67,253:266,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:415,393:$Vp1},o($VM,[2,76]),{26:203,83:416,85:204,87:$Vf1,90:$Vg1,377:$V9},{395:[1,417]},{395:[1,418]},{89:[2,339],362:$Vs1,370:419},{18:[1,420]},{16:422,26:26,38:421,117:$V8,377:$V9},{20:[1,423]},{17:[1,424]},{17:[2,334],87:$VV},{17:[2,335]},{20:[1,425]},{17:[1,426]},{17:$Vd1,50:427,116:$Ve1},o($VP,[2,118]),o($VU,$V32,{128:428,47:429,51:$Vc}),{20:[1,430]},{17:[1,431]},{16:432,17:[1,433],26:26,117:$V8,377:$V9},{16:434,26:26,117:$V8,377:$V9},o($V42,[2,127]),o($V42,[2,128]),o($Vd,[2,129]),o($Vd,[2,130]),o([17,99,116,157,168,377],[2,389]),{20:[1,435]},{17:[1,436]},{17:[2,153]},o($VH,[2,157]),{170:437,173:236,174:237,382:$Vl,388:$Vm},{20:[1,438]},{16:369,20:[2,222],26:26,117:$V8,255:439,257:368,377:$V9},{17:[1,440]},{20:[1,441]},{20:[2,165],176:442,178:371,179:$VR1,182:$VS1,184:$VT1},{17:[1,443]},{17:[1,444]},{17:[1,445]},{20:[1,446]},{17:[1,447],197:[1,448]},o($V52,[2,305],{329:449,347:[1,450]}),o($VU1,[2,288]),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:451,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},o($V62,[2,303]),o($V62,[2,304]),o($V62,$V72),o($V62,[2,301]),{279:[1,455]},{342:[1,456]},o($V62,[2,297]),o($V62,[2,298]),o($V62,[2,299]),{17:[1,457]},{18:[1,458]},{17:[2,232]},o([17,82,84,86,377],$V32,{128:428,47:429,51:[1,459]}),{17:[2,333]},{17:[2,286]},o($V82,[2,281]),{51:[1,460]},{174:461,388:$Vm},o($V12,[2,423]),o($Vy1,[2,401]),o($Vy1,[2,403]),{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:462,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($Vy1,[2,404]),{394:[1,463]},o($Vy1,[2,410]),o($Vy1,[2,411]),o($Vy1,[2,412]),o($Vy1,[2,413]),o($Vy1,[2,414]),o($Vy1,[2,415]),o($Vy1,[2,416]),o($Vy1,[2,418]),o($Vy1,[2,419]),o($Vy1,[2,420]),o($Vy1,[2,421]),{89:[1,464]},o($V12,[2,407]),{26:203,83:465,85:204,87:$Vf1,90:$Vg1,377:$V9},{26:203,83:466,85:204,87:$Vf1,90:$Vg1,377:$V9},{89:[2,340]},{16:468,26:26,41:467,117:$V8,377:$V9},{20:[1,469]},{17:[1,470]},o($VH,[2,442],{120:471,17:[1,472]}),{20:[2,110],26:346,79:347,119:473,121:345,377:$V9},o($VH,[2,444],{124:474,17:[1,475]}),{16:352,20:[2,113],26:26,117:$V8,123:476,125:349,126:350,127:351,377:$V9},{17:[2,115]},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:477,377:$V9}),o($VU,[2,120]),o($VH,[2,446],{131:478,17:[1,479]}),{20:[2,122],130:480,132:354,133:355,138:356,141:$VN1,142:$VO1,143:$VP1,144:$VQ1},o($V92,[2,448],{134:481,145:482,149:484,152:486,118:$Va2,146:[1,483],150:[1,485]}),{18:[1,488]},o($Vb2,[2,454],{139:489,148:490,118:$Vc2}),o($VH,[2,458],{165:492,17:[1,493]}),{16:231,20:[2,150],26:26,117:$V8,151:232,163:363,164:494,166:230,377:$V9,388:$Vi1},{17:[1,495]},o($VH,[2,518],{256:496,17:[1,497]}),{20:[2,223]},{18:[1,498]},o($VH,[2,464],{177:499,17:[1,500]}),{20:[2,166]},{18:[1,501]},{18:[1,502]},{18:[1,503]},o($VH,[2,476],{193:504,17:[1,505]}),{18:[1,506]},{194:[1,507]},o($Vd2,[2,308],{330:508,351:[1,509]}),{279:[1,510]},{17:[1,511]},o($Ve2,[2,396],{405:317,406:318,407:$Vw1,408:$Vx1}),o($Ve2,[2,397]),o($Ve2,[2,398]),o($V62,[2,302]),o($V62,[2,296]),o($V$1,[2,228]),{16:392,26:26,117:$V8,127:393,265:513,266:512,268:391,377:$V9},{16:92,26:26,52:81,53:82,54:83,55:84,56:85,57:86,58:87,59:$Vp,60:$Vq,61:$Vr,62:$Vs,63:$Vt,64:$Vu,65:$Vv,66:$Vw,67:$Vx,68:$Vy,69:$Vz,70:$VA,71:$VB,72:$VC,73:$VD,74:$VE,75:$VF,76:$VG,117:$V8,269:[1,514],377:$V9},{17:[1,515]},o($V02,[2,276]),o($Vy1,[2,417]),o($Vy1,[2,405]),o($Vy1,[2,406]),o($V12,[2,408]),o($V12,[2,409]),{20:[1,516]},{17:[1,517]},o($Vh1,[2,434],{39:518,17:[1,519]}),{16:422,20:[2,27],26:26,38:520,117:$V8,377:$V9},o($VH,[2,109]),o($VH,[2,443]),{20:[2,111]},o($VH,[2,112]),o($VH,[2,445]),{20:[2,114]},o($VP,$VQ,{80:137,81:138,49:521,82:$VR,84:$VS,86:$VT}),o($VH,[2,121]),o($VH,[2,447]),{20:[2,123]},o($Vf2,[2,450],{135:522,156:523,157:$Vg2}),o($V92,[2,449]),{26:526,117:$Vh2,147:525,269:$Vi2,377:$V9},o($V92,[2,133]),{16:530,26:26,117:$V8,151:529,377:$V9,388:$Vi1},o($V92,[2,135]),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:531,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{16:532,26:26,117:$V8,377:$V9},o($VU,[2,456],{140:533,156:534,157:$Vg2}),o($Vb2,[2,455]),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:535,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},o($VH,[2,149]),o($VH,[2,459]),{20:[2,151]},o($VH,[2,158]),o($VH,[2,221]),o($VH,[2,519]),o([204,274,308],$Vu1,{263:305,258:536,260:537,264:$Vv1}),o($VH,[2,161]),o($VH,[2,465]),{155:$Vj2,180:538,186:539,189:$Vk2},{155:$Vj2,180:542,186:539,189:$Vk2},{155:$Vj2,180:543,186:539,189:$Vk2},o($VH,[2,171]),o($VH,[2,477]),{195:544,199:545,200:546,201:$Vl2,204:$Vm2,207:$Vn2,210:$Vo2,213:$Vp2,216:$Vq2,219:$Vr2},{17:[1,554]},o($Vs2,[2,310],{331:555,352:[1,556]}),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:557,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{17:[1,559],26:526,117:$Vh2,147:560,269:$Vi2,348:558,377:$V9},o($VU1,[2,289]),{20:[1,561]},{17:[1,562]},o([17,82,84,86],$Vo,{77:77,78:78,26:79,79:80,48:563,377:$V9}),{18:[1,564]},{17:[1,566],20:[2,436],42:565},{16:468,20:[2,30],26:26,41:567,117:$V8,377:$V9},o($Vh1,[2,26]),o($Vh1,[2,435]),{20:[2,28]},o($VP,[2,330]),o($VP,$Vo,{77:77,78:78,26:79,79:80,48:568,377:$V9}),o($Vf2,[2,451]),{16:569,26:26,117:$V8,377:$V9},o($V92,[2,131],{148:570,118:$Vc2}),o($Vt2,[2,356]),o($Vt2,[2,357]),o($Vt2,[2,358]),o($V92,[2,134]),o($V92,[2,138],{152:571,118:$Va2}),o($V92,[2,142]),{51:[1,573],136:572},o($Vn,$Vo,{77:77,78:78,26:79,79:80,48:574,377:$V9}),o($VU,[2,457]),o($Vb2,[2,136]),{20:[1,575]},{204:$Vu2,261:576,270:577,271:578,272:579,273:580,274:$Vv2,308:$Vw2},{20:[1,584]},{20:[2,167],155:$Vj2,180:585,186:539,189:$Vk2},{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:586,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{17:[1,587]},{20:[1,588]},{20:[1,589]},{20:[1,590]},{20:[2,174],200:591,201:$Vl2,204:$Vm2,207:$Vn2,210:$Vo2,213:$Vp2,216:$Vq2,219:$Vr2},o($Vx2,[2,482]),{17:[1,592]},{17:[1,593]},{17:[1,594]},{17:[1,595]},{17:[1,596]},{17:[1,597]},{17:[1,598]},{18:[1,599]},o($Vy2,[2,324],{332:600,363:[1,601]}),{279:[1,602]},{17:[1,603]},{17:[1,604]},{18:[1,605]},{17:[2,361],362:$Vz2,376:606},o($V$1,[2,522],{267:608,17:[1,609]}),{16:392,20:[2,230],26:26,117:$V8,127:393,265:513,266:610,268:391,377:$V9},{17:$VQ,49:611,80:137,81:138,82:$VR,84:$VS,86:$VT},{16:312,26:26,117:$V8,316:311,321:613,322:612,377:$V9},{20:[2,29]},{20:[2,437]},{20:[2,31]},{17:$Vd1,50:614,116:$Ve1},o($VU,[2,143]),o($V92,[2,132]),o($V92,[2,139]),o($Vf2,[2,452],{137:615,156:616,157:$Vg2}),{17:[1,617]},o($VP,$VQ,{80:137,81:138,49:618,82:$VR,84:$VS,86:$VT}),o($V82,[2,520],{259:619,17:[1,620]}),{20:[2,263],262:621,293:622,295:$VA2},o($VB2,[2,234],{270:577,271:578,272:579,273:580,261:624,204:$Vu2,274:$Vv2,308:$Vw2}),o($VC2,[2,236]),o($VC2,[2,237]),{16:625,26:26,117:$V8,377:$V9},{309:[1,626]},o($Vd,[2,238]),{275:627,336:$Vk1,337:$Vl1,338:$Vm1,339:$Vn1},o($VD2,[2,466],{181:628,17:[1,629]}),{20:[2,168]},{17:[1,630]},{18:[1,631]},o($VD2,[2,468],{183:632,17:[1,633]}),o($VD2,[2,470],{185:634,17:[1,635]}),{17:[1,637],20:[2,478],196:636},o($Vx2,[2,483]),{18:[1,638]},{18:[1,639]},{18:[1,640]},{18:[1,641]},{18:[1,642]},{18:[1,643]},{18:[1,644]},{195:645,199:545,200:546,201:$Vl2,204:$Vm2,207:$Vn2,210:$Vo2,213:$Vp2,216:$Vq2,219:$Vr2},{20:[2,327],333:646,366:[1,647]},{364:[1,648],365:[1,649]},{17:[1,651],26:526,117:$Vh2,147:653,269:$Vi2,353:650,356:652,377:$V9},o($Vd2,[2,309]),o($V52,[2,306]),{26:526,117:$Vh2,147:655,269:$Vi2,349:654,377:$V9},{17:[2,362]},{26:526,117:$Vh2,147:656,269:$Vi2,377:$V9},o($V$1,[2,229]),o($V$1,[2,523]),{20:[2,231]},{17:[2,233]},{20:[1,657]},{16:312,20:[2,279],26:26,117:$V8,316:311,321:613,322:658,377:$V9},{17:[2,124]},o($VP,$Vo,{77:77,78:78,26:79,79:80,48:659,377:$V9}),o($Vf2,[2,453]),{18:[1,660]},{17:$Vd1,50:661,116:$Ve1},o($V82,[2,224]),o($V82,[2,521]),{20:[2,225]},{17:[1,662],298:[1,663]},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:664,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($VB2,[2,235]),{51:[1,669],118:$VV1,155:$VW1,276:665,277:666,278:667,279:[1,668],340:381,341:$VX1,343:$VY1,344:380,345:$VZ1,346:$V_1},{17:[1,670]},o($Vd,[2,239]),o($VD2,[2,162]),o($VD2,[2,467]),{18:[1,671]},{187:[1,672]},o($VD2,[2,163]),o($VD2,[2,469]),o($VD2,[2,164]),o($VD2,[2,471]),{20:[2,172]},{20:[2,479]},o($VE2,[2,498],{202:673,222:674}),o($VF2,[2,500],{205:675,226:676}),o($VG2,[2,502],{208:677,231:678}),o($VH2,[2,504],{211:679,233:680}),o($VE2,[2,506],{214:681,235:682}),o($VH2,[2,508],{217:683,237:684}),o($VE2,[2,510],{220:685,239:686}),{20:[1,687]},{20:[2,284]},{364:[1,688],365:[1,689]},{17:[1,690]},{17:[1,691]},{17:[1,692]},{18:[1,693]},{17:[2,320],361:694,362:$VI2},o($VJ2,[2,315],{357:[1,696],358:[1,697],359:[1,698],360:[1,699]}),{20:[1,700]},{17:[1,701]},{17:[2,363],362:$Vz2,376:702},o($V82,[2,532],{323:703,17:[1,704]}),{20:[2,280]},{17:$Vd1,50:705,116:$Ve1},{154:706,155:$VK2},{17:[2,126]},{20:[2,264]},{17:[1,708]},o([17,298],[2,259]),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:709,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},o($VC2,[2,241]),{17:[1,710]},o($V62,$V72,{280:[1,711]}),{17:[2,242]},o($VC2,[2,273]),{187:[1,712]},{20:[1,713]},{20:[1,714]},{20:[2,182],223:715,224:716,225:717,241:$VL2,247:$VM2},{20:[1,720]},{20:[2,185],224:722,225:725,227:721,228:723,229:724,230:726,241:$VL2,244:$VN2,247:$VM2,248:$VO2,252:$VP2},{20:[1,730]},{20:[2,191],224:732,225:735,228:733,229:734,232:731,241:$VL2,244:$VN2,247:$VM2,248:$VO2},{20:[1,736]},{20:[2,196],224:738,225:739,230:740,234:737,241:$VL2,247:$VM2,252:$VP2},{20:[1,741]},{20:[2,200],224:743,225:744,236:742,241:$VL2,247:$VM2},{20:[1,745]},{20:[2,203],224:747,225:748,230:749,238:746,241:$VL2,247:$VM2,252:$VP2},{20:[1,750]},{20:[2,207],224:752,225:753,240:751,241:$VL2,247:$VM2},{17:[1,755],20:[2,480],198:754},{17:[1,756]},{17:[1,757]},o($Vy2,[2,325]),o($Vy2,[2,326]),o($Vs2,[2,311]),{26:526,117:$Vh2,147:653,269:$Vi2,354:758,356:759,377:$V9},{17:[2,321]},{26:526,117:$Vh2,147:653,269:$Vi2,356:760,377:$V9},o($VJ2,[2,316]),o($VJ2,[2,317]),o($VJ2,[2,318]),o($VJ2,[2,319]),o($V52,[2,536],{350:761,17:[1,762]}),{20:[2,359],26:526,117:$Vh2,147:655,269:$Vi2,349:763,377:$V9},{17:[2,364]},o($V82,[2,282]),o($V82,[2,533]),{17:[1,764]},{20:[1,765]},{149:766,150:[1,767]},{18:[1,768]},o($VC2,[2,240]),{18:[1,769]},{17:[2,243],157:[1,770]},{20:[1,771]},o($VQ2,[2,474],{190:772,17:[1,773]}),o($Vx2,[2,484],{203:774,17:[1,775]}),o($VE2,[2,499]),o($VE2,[2,183]),o($VE2,[2,184]),{151:778,242:[1,776],243:[1,777],388:$Vi1},{173:779,382:$Vl},o($Vx2,[2,486],{206:780,17:[1,781]}),o($VF2,[2,501]),o($VF2,[2,186]),o($VF2,[2,187]),o($VF2,[2,188]),o($VF2,[2,189]),o($VF2,[2,190]),{17:[1,782]},{17:[1,783]},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:784,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($Vx2,[2,488],{209:785,17:[1,786]}),o($VG2,[2,503]),o($VG2,[2,192]),o($VG2,[2,193]),o($VG2,[2,194]),o($VG2,[2,195]),o($Vx2,[2,490],{212:787,17:[1,788]}),o($VH2,[2,505]),o($VH2,[2,197]),o($VH2,[2,198]),o($VH2,[2,199]),o($Vx2,[2,492],{215:789,17:[1,790]}),o($VE2,[2,507]),o($VE2,[2,201]),o($VE2,[2,202]),o($Vx2,[2,494],{218:791,17:[1,792]}),o($VH2,[2,509]),o($VH2,[2,204]),o($VH2,[2,205]),o($VH2,[2,206]),o($Vx2,[2,496],{221:793,17:[1,794]}),o($VE2,[2,511]),o($VE2,[2,208]),o($VE2,[2,209]),{20:[2,173]},{20:[2,481]},{20:[2,328]},{20:[2,329]},{20:[1,795]},{17:[1,796]},{17:[2,322],361:797,362:$VI2},o($V52,[2,307]),o($V52,[2,537]),{20:[2,360]},{20:[1,798]},o($V92,[2,137]),{17:[1,799]},{16:530,26:26,117:$V8,377:$V9},{155:$VR2,299:800,301:801},{155:$VS2,282:803,286:804},{281:[1,806]},o($VQ2,[2,472],{188:807,17:[1,808]}),o($VQ2,[2,170]),o($VQ2,[2,475]),o($Vx2,[2,175]),o($Vx2,[2,485]),{17:[1,809]},{17:[1,810]},{17:[1,811]},{17:[1,812]},o($Vx2,[2,176]),o($Vx2,[2,487]),{18:[1,813]},{18:[1,814]},{17:[1,815]},o($Vx2,[2,177]),o($Vx2,[2,489]),o($Vx2,[2,178]),o($Vx2,[2,491]),o($Vx2,[2,179]),o($Vx2,[2,493]),o($Vx2,[2,180]),o($Vx2,[2,495]),o($Vx2,[2,181]),o($Vx2,[2,497]),o($Vs2,[2,538],{355:816,17:[1,817]}),{20:[2,313],26:526,117:$Vh2,147:653,269:$Vi2,354:818,356:759,377:$V9},{17:[2,323]},{17:[2,125]},{20:[2,140],154:819,155:$VK2},{20:[1,820]},{17:[1,821]},{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:822,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{20:[1,823],284:824,289:825,291:[1,826],292:[1,827]},o($VT2,[2,248],{286:804,282:828,155:$VS2}),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:829,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{17:[2,244]},o($VQ2,[2,169]),o($VQ2,[2,473]),o($VF2,[2,210]),o($VF2,[2,211]),o($VF2,[2,212]),o($VF2,[2,216]),{16:831,26:26,117:$V8,245:830,377:$V9},{194:$VU2,249:832,251:833},o($VF2,[2,220]),o($Vs2,[2,312]),o($Vs2,[2,539]),{20:[2,314]},{20:[2,141]},{17:[1,836],20:[2,528],300:835},{20:[2,268],155:$VR2,299:837,301:801},{287:[1,838]},o($VC2,[2,524],{283:839,17:[1,840]}),{20:[1,841]},{287:[1,842]},{287:[2,253]},{287:[2,254]},o($VT2,[2,249]),{287:[1,843]},{20:[1,844]},{173:845,382:$Vl},{20:[1,846],194:$VU2,251:847},o($VV2,[2,514]),{174:848,388:$Vm},{20:[2,265]},{20:[2,529]},{20:[2,269]},{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:849,294:850,296:$VW2,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},o($VC2,[2,245]),o($VC2,[2,525]),o($VC2,[2,526],{285:852,17:[1,853]}),{17:[1,856],26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:857,173:66,174:67,253:272,288:854,290:855,293:858,294:859,295:$VA2,296:$VW2,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{17:[1,861],26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:857,173:66,174:67,253:272,288:860,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},o($VF2,[2,512],{246:862,17:[1,863]}),{17:[1,864]},o($VF2,[2,516],{250:865,17:[1,866]}),o($VV2,[2,515]),{17:[1,868],173:867,382:$Vl},{17:[2,266]},{17:[2,267]},{26:870,117:[1,869],377:$V9},o($VC2,[2,246]),o($VC2,[2,527]),{17:[1,871]},{17:[1,872]},{18:[1,873]},{17:[1,874]},{17:[2,255]},{17:[2,256]},o([20,155,291,292],[2,247]),{18:[1,875]},o($VF2,[2,213]),o($VF2,[2,513]),{16:831,20:[2,214],26:26,117:$V8,245:876,377:$V9},o($VF2,[2,217]),o($VF2,[2,517]),{17:[1,877]},o($VV2,[2,219]),{17:[2,260]},{17:[2,261],87:[1,878]},{20:[2,250]},{20:[2,251]},{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:880,173:66,174:67,253:272,290:879,293:858,294:859,295:$VA2,296:$VW2,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},o($VX2,[2,257]),{26:133,28:132,59:$Vq1,85:131,87:$Vo1,90:$Ve,91:453,117:$Vf,153:880,173:66,174:67,253:272,364:$Vg,365:$VO,367:128,369:129,371:263,372:264,373:454,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm,391:452,393:$Vp1,396:$Vr1},{20:[2,215]},o($VV2,[2,218]),{26:133,28:132,85:131,90:$Ve,117:$Vf,173:66,174:67,253:127,297:881,364:$Vg,365:$VO,367:128,369:129,377:$V9,378:$Vh,379:$Vi,380:$Vj,381:$Vk,382:$Vl,388:$Vm},{17:[1,882]},{17:[1,883]},{89:[1,884]},{20:[1,885]},{20:[1,886]},{17:[2,262]},{20:[2,252]},o($VX2,[2,258])],
defaultActions: {2:[2,1],3:[2,2],22:[2,3],23:[2,5],56:[2,86],62:[2,19],147:[2,91],180:[2,16],183:[2,21],185:[2,384],198:[2,36],199:[2,34],221:[2,93],236:[2,159],237:[2,160],260:[2,117],269:[2,343],270:[2,344],271:[2,345],276:[2,338],280:[2,23],281:[2,25],293:[2,461],310:[2,278],313:[2,386],347:[2,335],364:[2,153],391:[2,232],393:[2,333],394:[2,286],419:[2,340],427:[2,115],439:[2,223],442:[2,166],473:[2,111],476:[2,114],480:[2,123],494:[2,151],520:[2,28],565:[2,29],566:[2,437],567:[2,31],585:[2,168],606:[2,362],610:[2,231],611:[2,233],614:[2,124],621:[2,225],636:[2,172],637:[2,479],646:[2,284],658:[2,280],661:[2,126],662:[2,264],669:[2,242],694:[2,321],702:[2,364],754:[2,173],755:[2,481],756:[2,328],757:[2,329],763:[2,360],797:[2,323],798:[2,125],806:[2,244],818:[2,314],819:[2,141],826:[2,253],827:[2,254],835:[2,265],836:[2,529],837:[2,269],849:[2,266],850:[2,267],858:[2,255],859:[2,256],869:[2,260],871:[2,250],872:[2,251],876:[2,215],884:[2,262],885:[2,252]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const DBG_MODE = !!process.env.OOL_DBG;

    //used to calculate the amount by bytes unit
    const UNITS = new Map([['K', 1024], ['M', 1048576], ['G', 1073741824], ['T', 1099511627776]]);

    //paired brackets
    const BRACKET_PAIRS = {
        '}': '{',
        ']': '[',
        ')': '('
    };

    //top level keywords
    const TOP_LEVEL_KEYWORDS = new Set(['import', 'type', 'const', 'schema', 'entity', 'dataset', 'view']);

    //const TOP_LEVEL_KEYWORDS = 

    //allowed  keywords of differenty state
    const SUB_KEYWORDS = { 
        // level 1
        'schema': new Set(['entities', 'views']),
        'entity': new Set([ 'is', 'extends', 'with', 'has', 'associations', 'key', 'index', 'data', 'interface', 'mixes', 'code', 'triggers', 'restful' ]),
        'dataset': new Set(['is']),
    
        // level 2
        'entity.associations': new Set(['hasOne', 'hasMany', 'refersTo', 'belongsTo']),
        'entity.index': new Set(['is', 'unique']),
        'entity.interface': new Set(['accept', 'find', 'findOne', 'return']),
        'entity.triggers': new Set(['onCreate', 'onCreateOrUpdate', 'onUpdate', 'onDelete']),  
        'entity.restful': new Set(['create', 'findOne', 'findAll', 'updateOne', 'updateMany', 'deleteOne', 'deleteMany']),              
        'entity.data': new Set(['in']),

        'dataset.body': new Set(['with']),

        // level 3
        'entity.associations.item': new Set(['connectedBy', 'being', 'with', 'as']),        
        'entity.interface.find': new Set(['a', 'an', 'the', 'one', 'by', 'cases', 'selected', 'selectedBy', "of", "which", "where", "when", "with", "otherwise", "else"]),           
        'entity.interface.return': new Set(["unless", "when"]),       
        'entity.triggers.onChange': new Set(["when"]), 
        'entity.restful.method': new Set(['allow', 'disallow', 'presetOfOrder', 'presetOptions', 'nested', 'id']),                          

        // level 4
        'entity.associations.item.block': new Set(['when']),           
        'entity.interface.find.when': new Set(['when', 'else', 'otherwise']),           
        'entity.interface.find.else': new Set(['return', 'throw']),
        'entity.interface.return.when': new Set(['exists', 'null', 'throw']),
        'entity.restful.method.allow': new Set(['anonymous', 'self']),        

        // level 5
        'entity.associations.item.block.when': new Set(['being', 'with' ])               
    };

    //next state transition table
    const NEXT_STATE = {        
        'import.*': 'import.item',
        'type.*': 'type.item',
        'const.*': 'const.item',
        'import.$INDENT': 'import.block',
        'type.$INDENT': 'type.block',
        'const.$INDENT': 'const.block',        
        'entity.with': 'entity.with', 
        'entity.has': 'entity.has', 
        'entity.key': 'entity.key', 
        'entity.index': 'entity.index', 
        'entity.data': 'entity.data', 
        'entity.mixes': 'entity.mixes', 
        'entity.code': 'entity.code', 

        'entity.associations': 'entity.associations',
        'entity.associations.hasOne': 'entity.associations.item',
        'entity.associations.hasMany': 'entity.associations.item',
        'entity.associations.refersTo': 'entity.associations.item',
        'entity.associations.belongsTo': 'entity.associations.item',
        'entity.associations.item.$INDENT': 'entity.associations.item.block',
        'entity.associations.item.block.when': 'entity.associations.item.block.when',

        'entity.interface': 'entity.interface',
        'entity.interface.accept': 'entity.interface.accept',
        'entity.interface.accept.$INDENT': 'entity.interface.accept.block',
        'entity.interface.find': 'entity.interface.find',
        'entity.interface.findOne': 'entity.interface.find',
        'entity.interface.return': 'entity.interface.return',
        'entity.interface.return.when': 'entity.interface.return.when',
        'entity.interface.find.when': 'entity.interface.find.when',
        'entity.interface.find.otherwise': 'entity.interface.find.else',
        'entity.interface.find.else': 'entity.interface.find.else',

        'entity.triggers': 'entity.triggers',
        'entity.triggers.onCreate': 'entity.triggers.onChange',
        'entity.triggers.onCreateOrUpdate': 'entity.triggers.onChange',
        'entity.triggers.onUpdate': 'entity.triggers.onChange',
        'entity.triggers.onDelete': 'entity.triggers.onChange',
        'entity.triggers.onChange.when': 'entity.triggers.onChange.when',

        'entity.restful': 'entity.restful',
        'entity.restful.*': 'entity.restful.method',         
        'entity.restful.method.allow': 'entity.restful.method.allow',
        'entity.restful.method.nested': 'entity.restful.method.nested',
        'entity.restful.method.nested.*': 'entity.restful.method.nested.item',
        'entity.restful.method.presetOfOrder': 'entity.restful.method.presetOfOrder',
        'entity.restful.method.presetOfOrder.$INDENT': 'entity.restful.method.presetOfOrder.block',

        'dataset.is': 'dataset.body'
    };

    //exit number of states on dedent if exists in below table
    const DEDENT_STOPPER = new Map([      
        [ 'entity', 1 ],                                  
        [ 'entity.with', 1 ],
        [ 'entity.has', 1 ],               
        [ 'entity.data', 1 ], 
        [ 'entity.index', 1 ], 
        [ 'entity.associations', 1 ],
        [ 'entity.associations.item', 2 ],
        [ 'entity.associations.item.block.when', 2 ],        
        [ 'entity.interface.accept.block', 2 ],
        [ 'entity.interface.find.else', 2],
        [ 'entity.restful', 1 ],          
        [ 'entity.restful.method', 1 ],

        [ 'entity.restful.method.allow', 2],
        [ 'entity.restful.method.nested.item', 1],
        [ 'entity.restful.method.nested', 2 ],
        [ 'entity.restful.method.presetOfOrder', 2 ],

        [ 'entity.restful.method.presetOfOrder.block', 2]
    ]);

    //exit number of states on newline if exists in below table
    const NEWLINE_STOPPER = new Map([                
        [ 'import.item', 2 ],
        [ 'type.item', 2 ],
        [ 'const.item', 2 ],              
        [ 'entity.mixes', 1 ],
        [ 'entity.code', 1 ],
        [ 'entity.key', 1 ],   
        [ 'entity.data', 1 ],     
        [ 'entity.interface.accept', 1 ],       
        [ 'entity.interface.find.when', 1], 
        [ 'entity.interface.find.else', 1], 
        [ 'entity.interface.return.when', 1 ],         
        [ 'entity.associations.item', 1 ],        
        [ 'entity.associations.item.block.when', 1 ],
        [ 'entity.restful.method.allow', 1],
        [ 'entity.restful.method.nested.item', 1]
    ]);

    //in below states, certain tokens are allowed
    const ALLOWED_TOKENS = new Map([
        [ 'entity.restful', new Set(['route_literal']) ], 
        [ 'entity.restful.method.nested', new Set([ 'route_literal' ]) ],        
        [ 'entity.interface.find.when', new Set([ 'word_operators' ]) ],
        [ 'entity.interface.return.when', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item', new Set([ 'word_operators' ]) ],
        [ 'entity.associations.item.block.when', new Set([ 'word_operators' ]) ],
        [ 'entity.triggers.onChange.when', new Set([ 'word_operators' ]) ]
    ]);

    //indented child starting state
    const CHILD_KEYWORD_START_STATE = new Set([ 'EMPTY', 'DEDENTED' ]);    
    
    const BUILTIN_TYPES = new Set([ 'any', 'array', 'binary', 'blob', 'bool', 'boolean', 'buffer', 'datetime', 'decimal', 'enum', 'float', 'int', 'integer', 'number', 'object', 'string', 'text', 'timestamp' ]);

    class ParserState {
        constructor() {
            this.indents = [];
            this.indent = 0;
            this.dedented = 0;
            this.eof = false;
            this.comment = false;
            this.brackets = [];
            this.state = {};
            this.stack = [];
            this.newlineStopFlag = [];
        }

        get hasOpenBracket() {
            return this.brackets.length > 0;
        }

        get lastIndent() {
            return this.indents.length > 0 ? this.indents[this.indents.length - 1] : 0;
        }

        get hasIndent() {
            return this.indents.length > 0;
        }

        markNewlineStop(flag) {
            this.newlineStopFlag[this.newlineStopFlag.length-1] = flag;
        }

        doIndent() {
            this.indents.push(this.indent);

            let nextState = NEXT_STATE[this.lastState + '.$INDENT'];
            if (nextState) {
                state.enterState(nextState);
            }
        }

        doDedent() {
            this.dedented = 0;

            while (this.indents.length) {
                this.dedented++;
                this.indents.pop();
                if (this.lastIndent === this.indent) break;
            }

            if (this.lastIndent !== this.indent) {
                throw new Error('Cannot align to any of the previous indented block!');
            }

            if (this.dedented === 0) {
                throw new Error('Inconsistent indentation!');
            }
        }

        doDedentExit() {
            let exitRound = DEDENT_STOPPER.get(state.lastState);
            if (exitRound > 0) {

                for (let i = 0; i < exitRound; i++) {                    
                    state.exitState(state.lastState);
                }   
            }
        }

        doNewline() {
            if (this.newlineStopFlag[this.newlineStopFlag.length-1]) {
                if (!NEWLINE_STOPPER.has(state.lastState)) {
                    throw new Error('Inconsistent newline stop flag.');
                }

                let exitRound = NEWLINE_STOPPER.get(state.lastState);

                if (exitRound > 0) {                    

                    for (let i = 0; i < exitRound; i++) {                    
                        state.exitState(state.lastState);
                    }              
                }  
            }        
        }

        dedentAll() {
            this.indent = 0;
            this.dedented = this.indents.length;
            this.indents = [];
        }

        matchAnyExceptNewline() {
            let keywordChain = state.lastState + '.*';
            let nextState = NEXT_STATE[keywordChain];
            if (nextState) {
                state.enterState(nextState);                                                                        
            }
        }

        dump(loc, token) {
            if (DBG_MODE) {
                token ? console.log(loc, token) : console.log(loc);
                console.log('indents:', this.indents.join(' -> '), 'current indent:', this.indent, 'current dedented:', this.dedented, 'nl-stop', this.newlineStopFlag);                   
                console.log('lastState:', this.lastState, 'comment:', this.comment, 'eof:', this.eof, 'brackets:', this.brackets.join(' -> '),'stack:', this.stack.join(' -> '));
                console.log();
            }
            
            return this;
        }

        enterObject() {            
            return this.enterState('object');
        }

        exitObject() {            
            return this.exitState('object');
        }

        enterArray() {
            return this.enterState('array');
        }

        exitArray() {
            return this.exitState('array');
        }

        get lastState() {
            return this.stack.length > 0 ? this.stack[this.stack.length - 1] : undefined;
        }

        enterState(state) {
            if (DBG_MODE) {
                console.log('> enter state:', state, '\n');
            }
            this.stack.push(state);
            this.newlineStopFlag.push(NEWLINE_STOPPER.has(state) ? true : false);
            return this;
        }

        exitState(state) {
            if (DBG_MODE) {
                console.log('< exit state:', state, '\n');
            }
            let last = this.stack.pop();
            if (state !== last) {
                throw new Error(`Unmatched "${state}" state!`);
            }

            this.newlineStopFlag.pop();

            return this;
        }

        parseSize(size) {
            if (UNITS.has(size.substr(-1))) {
                let unit = size.substr(-1);
                let factor = UNITS[unit];
        
                size = size.substr(0, size.length - 1);
        
                return parseInt(size) * factor;
            } else {
                return parseInt(size);
            }
        }
        
        unquoteString(str, quotes) {
            return str.substr(quotes, str.length-quotes*2);
        }

        isQuote(str) {
            return (str.startsWith('"') && str.endsWith('"')) ||
                (str.startsWith("'") && str.endsWith("'"));
        }

        normalizeSymbol(ref) {
            return { oorType: 'SymbolToken', name: ref.substr(2) };
        }                
        
        normalizeReference(ref) {
            let name = ref.substr(1);

            return { 
                oolType: 'ObjectReference', 
                name: this.isQuote(name) ? this.unquoteString(name, 1) : name 
            };
        }

        normalizeOptionalReference(ref) {            
            return { ...ref, optional: true };
        }

        normalizeConstReference(ref) {
            return { oolType: 'ConstReference', name: ref };
        }

        normalizeStringTemplate(text) {
            return { oolType: 'StringTemplate', value: this.unquoteString(text, 1) };
        }    

        normalizeValidator(name, args) {
            if (args) {
                return { oolType: 'Validator', name, args };
            } 
                
            return { oolType: 'Validator', name  };
        }

        normalizeRegExp(regexp) {                
            return { oolType: 'RegExp', value: regexp };
        }

        normalizeScript(script) {                
            return { oolType: 'JavaScript', value: script };
        }

        normalizeProcessor(name, args) {
            if (args) {
                return { oolType: 'Processor', name, args };
            } 
                
            return { oolType: 'Processor', name  };
        }

        normalizeActivator(name, args) {
            if (args) {
                return { oolType: 'Activator', name, args };
            } 
                
            return { oolType: 'Activator', name  };
        }

        normalizePipedValue(value, modifiers) {
            return Object.assign({ oolType: 'PipedValue', value }, modifiers);
        }

        normalizeFunctionCall(func) {
            return Object.assign({ oolType: 'FunctionCall' }, func);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }    

        validate() {
            let errors = [];

            if (errors && errors.length > 0) {
                throw new Error(errors.join("\n"));
            }

            return this;
        }

        build() {
            return this.state;
        }

        import(namespace) {
            if (!this.state.namespace) {
                this.state.namespace = [];
            }

            this.state.namespace.push(namespace);
        }  
        
        define(type, name, value, line) {
            if (!this.state[type]) {
                this.state[type] = {};
            }

            if (name in this.state[type]) {
                throw new Error(`Duplicate ${type} definition detected at line ${line}.`);
            }

            this.state[type][name] = value;
        }

        defineConstant(name, value, line) {
            this.define('constant', name, value, line);
        }

        defineType(name, value, line) {
            if (!value.type) {
                throw new Error(`Missing type property for type "${name}" at line: ${line}!`);
            }

            this.define('type', name, value, line);
        }

        isTypeExist(type) {
            return this.state.type && (type in this.state.type);
        }
        
        defineEntity(name, value, line) {
            this.define('entity', name, value, line);
        }

        isEntityExist(entity) {
            return this.state.entity && (entity in this.state.entity);
        }

        addToEntity(name, extra) {
            if (!this.isEntityExist(name)) {
                throw new Error(`Entity "${name}" not exists.`);
            }

            Object.assign(this.state.entity[name], extra);
        }

        defineSchema(name, value, line) {
            this.define('schema', name, value, line);    
        }

        defineRelation(name, value, line) {
            this.define('relation', name, value, line);    
        }

        defineView(name, value, line) {
            this.define('view', name, value, line);
        }

        defineDataset(name, value, line) {
            this.define('dataset', name, value, line);
        }
    }

    function merge(obj1, obj2) {
        let m = Object.assign({}, obj1);

        for (let k in obj2) {
            let v2 = obj2[k];
            let t2 = typeof v2;

            if (k in obj1) {
                let v1 = obj1[k];
                let t1 = typeof v1;

                if ((t1 === 'object' && !Array.isArray(v1)) || (t2 === 'object' && !Array.isArray(v2))) {
                    if (t1 !== 'undefined' && t1 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    if (t2 !== 'undefined' && t2 !== 'object') {
                        throw new Error(`Failed to merge object propery "${k}".`);
                    }

                    m[k] = Object.assign({}, v1, v2);
                    continue;
                }

                Array.isArray(v1) || (v1 = [ v1 ]);
                Array.isArray(v2) || (v2 = [ v2 ]);
                m[k] = v1.concat(v2);
                continue;
            }

            m[k] = v2;
        }

        return m;
    }

    let state; // created on start
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 5;
break;
case 1:  //start the program
                            state = new ParserState();
                            this.unput(yy_.yytext);
                            this.begin('EMPTY');
                        
break;
case 2: 
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<EMPTY><<EOF>>');
                                this.begin('DEDENTED');

                            } else {          
                                state.dump('<EMPTY><<EOF>>');                      
                                return 5;
                            }
                        
break;
case 3: state.indent++; 
break;
case 4: state.indent = (state.indent + 8) & -7; 
break;
case 5: state.indent = 0; if (state.comment) state.comment = false; 
break;
case 6: state.comment = true; 
break;
case 7:  /* skip comments */ 
break;
case 8:
                            this.unput( yy_.yytext )
                            //compare the current indents with the last
                            var last = state.lastIndent;
                            if (state.indent > last) {
                                //new indent
                                state.doIndent();
                                this.begin('INLINE');
                                state.dump('<EMPTY>. indent');                                                            
                                return 18;

                            } else if (state.indent < last) {
                                //dedent
                                state.doDedent();
                                this.begin('DEDENTED');                                  

                                state.dump('<EMPTY>. dedent');                                   
                            } else {
                                state.doNewline();

                                //same indent
                                if (state.hasIndent) {
                                    let nextState = NEXT_STATE[state.lastState + '.$INDENT'];
                                    if (nextState) {
                                        state.enterState(nextState);
                                    }
                                }

                                this.begin('INLINE');                                                                                                               

                                state.dump('<EMPTY>. same indent');                                       
                            }
                        
break;
case 9:
                            if (state.dedented > 0 && state.dedentFlip) {
                                this.unput(yy_.yytext);
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT return NEWLINE');          
                                state.dedentFlip = false;
                                return 17;
                            }

                            if (state.dedented > 0) {                                
                                state.dedented--;

                                this.unput(yy_.yytext);                                        
                                state.doDedentExit();
                                state.dump('<DEDENTED>.|<<EOF>> DEDENT');        

                                state.dedentFlip = true;                                
                                return 20;
                            } 
                            
                            if (state.eof) {

                                this.popState();
                                state.dump('<DEDENTED>.|<<EOF>> pop');
                                while (state.lastState) {
                                    state.exitState(state.lastState);                      
                                }

                            } else {
                                if (state.indent === 0) {
                                    while (state.lastState) {
                                        state.exitState(state.lastState);                      
                                    }
                                }

                                state.dedentFlip = false;

                                state.dedented = 0;
                                this.unput(yy_.yytext);
                                this.begin('INLINE');
                                state.dump('<DEDENTED>.|<<EOF>> INLINE');
                            }
                        
break;
case 10:
                            if (state.indents.length > 0) {
                                //reach end-of-file, but a current block still not in ending state

                                //put back the eof
                                this.unput(' ');

                                //dedent all
                                state.dedentAll();
                                state.eof = true;
                                state.dump('<INLINE><<EOF>>');
                                this.begin('DEDENTED');
                                return 17;

                            } else {                                
                                state.dump('<INLINE><<EOF>>');   

                                if (state.lastState) {
                                 
                                    state.doNewline();
                                    
                                    //put back the eof
                                    this.unput(' ');
                                    state.eof = true;
                                    this.begin('EMPTY');
                                    return 17;
                                }

                                return 5;
                            }
                        
break;
case 11:
                            state.matchAnyExceptNewline();                            

                            yy_.yytext = state.normalizeScript(yy_.yytext.substr(4, yy_.yytext.length-9).trim());
                            return 380;
                        
break;
case 12:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeStringTemplate(yy_.yytext);
                            return 117;
                        
break;
case 13:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 3);
                            return 117;
                        
break;
case 14:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.unquoteString(yy_.yytext, 1);
                            return 117;
                        
break;
case 15:
                            // implicit line joining
                            if (!state.hasOpenBracket) {                                
                                this.begin('EMPTY');

                                if (state.comment) {
                                    state.comment = false;
                                }

                                state.dump('<INLINE>{newline}');                                
                                state.indent = 0;                     

                                return 17;
                            }
                        
break;
case 16:/* skip whitespace, separate tokens */
break;
case 17:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.normalizeRegExp(yy_.yytext);
                            return 90;
                        
break;
case 18:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseFloat(yy_.yytext);
                            return 378;
                        
break;
case 19:
                            state.matchAnyExceptNewline();

                            yy_.yytext = state.parseSize(yy_.yytext);
                            return 364;
                        
break;
case 20:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext.substr(0, yy_.yytext.length - 1));
                            if (yy_.yytext[yy_.yytext.length - 1] === 'B') {
                                yy_.yytext *= 8;
                            }
                            return 'BITS';
                        
break;
case 21:
                            state.matchAnyExceptNewline();

                            yy_.yytext = parseInt(yy_.yytext);
                            return 364;
                        
break;
case 22:     
                                state.matchAnyExceptNewline();

                                return 'ELEMENT_ACCESS';
                           
break;
case 23:      
                                state.matchAnyExceptNewline();

                                return 269;
                           
break;
case 24:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeSymbol(yy_.yytext);
                                return 381;
                           
break;
case 25:
                                state.matchAnyExceptNewline();

                                yy_.yytext = state.normalizeReference(yy_.yytext);
                                return 365;
                           
break;
case 26:
                                    state.matchAnyExceptNewline();

                                    if (yy_.yytext == '{' || yy_.yytext == '[' || yy_.yytext == '(') {
                                        state.brackets.push(yy_.yytext);
                                    } else if (yy_.yytext == '}' || yy_.yytext == ']' || yy_.yytext == ')') {
                                        var paired = BRACKET_PAIRS[yy_.yytext];
                                        var lastBracket = state.brackets.pop();
                                        if (paired !== lastBracket) {
                                            throw new Error("Inconsistent bracket.")
                                        }
                                    }

                                    if (yy_.yytext == '{') {
                                        state.enterObject();
                                    } else if (yy_.yytext == '}') {
                                        state.exitObject();
                                    } else if (yy_.yytext == '[') {
                                        state.enterArray();
                                    } else if (yy_.yytext == ']') {
                                        state.exitArray();
                                    }

                                    return yy_.yytext;
                                
break;
case 27:
                                state.matchAnyExceptNewline();

                                yy_.yytext = (yy_.yytext === 'true' || yy_.yytext === 'on' || yy_.yytext === 'yes');
                                return 379;
                           
break;
case 28:
                                state.dump(this.topState(1) + ' -> <INLINE>{word_operators}', yy_.yytext);                                     
                                
                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('word_operators')) {    
                                    return yy_.yytext;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 29:
                                state.dump(this.topState(1) + ' -> <INLINE>{route_literal}', yy_.yytext);                                     

                                if (ALLOWED_TOKENS.has(state.lastState) && ALLOWED_TOKENS.get(state.lastState).has('route_literal')) {
                                    return 194;
                                } else {
                                    this.unput(yy_.yytext);
                                    this.begin('REPARSE');
                                }                                
                            
break;
case 30:        
                                if (this.topState(0) !== 'INLINE') {
                                    this.begin('INLINE');
                                }
                                if (!state.lastState) {
                                    if (TOP_LEVEL_KEYWORDS.has(yy_.yytext)) {
                                        state.enterState(yy_.yytext);
                                        return yy_.yytext;
                                    }

                                    throw new Error(`Invalid syntax: ${yy_.yytext}`);
                                }       

                                state.dump(this.topState(1) + ' -> <INLINE>{identifier}', yy_.yytext); 
                                
                                if (SUB_KEYWORDS[state.lastState] && SUB_KEYWORDS[state.lastState].has(yy_.yytext)) {                                    
                                    let keywordChain = state.lastState + '.' + yy_.yytext;
                                    let nextState = NEXT_STATE[keywordChain];
                                    if (nextState) {
                                        state.enterState(nextState);                                                                        
                                    } else {
                                        state.matchAnyExceptNewline();
                                    }

                                    return yy_.yytext;
                                } else {
                                    state.matchAnyExceptNewline();
                                }

                                return 377;
                            
break;
case 31:return yy_.yytext;
break;
case 32:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:$)/,/^(?:.|\n)/,/^(?:$)/,/^(?: )/,/^(?:\t)/,/^(?:\n)/,/^(?:(\/\/).*)/,/^(?:(\/\*(([^\\])|(\\.))*?\*\/))/,/^(?:.)/,/^(?:.|$)/,/^(?:$)/,/^(?:(<js>(([^\\])|(\\.))*?<\/js>))/,/^(?:(`(([^\\])|(\\.))*?`))/,/^(?:(("""(([^\\])|(\\.))*?""")|('''(([^\\])|(\\.))*?''')))/,/^(?:(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))/,/^(?:(\n|\r\n|\r|\f))/,/^(?:( |\t)+)/,/^(?:(\/(([^\\\n\/])|(\\.))*\/(i|g|m|y)*))/,/^(?:(((-)?(([0-9])+|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-](([0-9]))+))|((-)?(([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(K|M|G|T)))/,/^(?:(((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+)))(B|b)))/,/^(?:((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))/,/^(?:((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))\[(( |\t))*?((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?'))|((((-)?(([1-9]([0-9])*)|0)))|((0[x|X](([0-9])|[a-fA-F])+))|((0[o|O]([0-7])+))))(( |\t))*?\]))/,/^(?:((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+))/,/^(?:(@@(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)))/,/^(?:(@((((((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*)(\.(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))+)|(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))|(("(([^\\\n\"])|(\\.))*?")|('(([^\\\n\'])|(\\.))*?')))))/,/^(?:(\(|\)|\[|\]|\{|\}))/,/^(?:(true|false|yes|no|on|off))/,/^(?:((not|and|or)|(in|is|like)|(exists|null|all|any)))/,/^(?:((\/((:)?(_|\$|(([A-Z]))|(([a-z])))((_|\$|(([A-Z]))|(([a-z])))|([0-9]))*))+))/,/^(?:(((_|\$|(([A-Z]))|(([a-z]))))(((_|\$|(([A-Z]))|(([a-z])))|([0-9])))*))/,/^(?:((!=|>=|<=|>|<|==)|(\|~|,|:|\|>|\|=|--|=>|~|=|->)|(\+|-|\*|\/|%)))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,32],"inclusive":true},"EMPTY":{"rules":[2,3,4,5,6,7,8,32],"inclusive":true},"DEDENTED":{"rules":[9,32],"inclusive":true},"INLINE":{"rules":[6,7,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],"inclusive":true},"REPARSE":{"rules":[30,32],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = oolong;
exports.Parser = oolong.Parser;
exports.parse = function () { return oolong.parse.apply(oolong, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}