{"version":3,"sources":["../src/AppInitiator.js"],"names":["path","require","_","fs","ServiceContainer","Validators","validateObjectBySchema","AppInitiator","constructor","context","app","cwd","run","command","gemlConfig","configFile","commandLine","option","configFullPath","resolve","existsSync","Error","extName","extname","configName","basename","configPath","dirname","envAware","endsWith","substr","length","container","name","workingPath","disableEnvAwareConfig","allowedFeatures","replaceLogger","logger","start_","once","stopper","push","stop_","config","settings","geml","isEmpty","gemlPath","modelPath","scriptPath","manifestPath","useJsonSource","saveIntermediate","type","default","optional","options","toAbsolutePath","schemas","load_","useDb","cmdMethod_","error","process","exit","module","exports"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAQD,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAASF,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAuBH,OAAO,CAAC,WAAD,CAApC;;AACA,MAAM;AACFI,EAAAA,UAAU,EAAE;AAAEC,IAAAA;AAAF;AADV,IAEFL,OAAO,CAAC,YAAD,CAFX;;AAIA,MAAMM,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;AACA,SAAKC,GAAL,GAAWF,OAAO,CAACE,GAAnB;AACH;;AAEQ,QAAHC,GAAG,CAACC,OAAD,EAAU;AACf,QAAIC,UAAJ;;AAEA,QAAID,OAAO,KAAK,MAAhB,EAAwB;AACpB,UAAIE,UAAU,GAAG,KAAKL,GAAL,CAASM,WAAT,CAAqBC,MAArB,CAA4B,QAA5B,CAAjB;AACA,UAAIC,cAAJ;;AAEA,UAAIH,UAAJ,EAAgB;AACZG,QAAAA,cAAc,GAAGlB,IAAI,CAACmB,OAAL,CAAa,KAAKR,GAAlB,EAAuBI,UAAvB,CAAjB;;AAEA,YAAI,CAACZ,EAAE,CAACiB,UAAH,CAAcF,cAAd,CAAL,EAAoC;AAChC,gBAAM,IAAIG,KAAJ,CAAW,WAAUN,UAAW,cAAhC,CAAN;AACH;AACJ,OAND,MAMO;AACHG,QAAAA,cAAc,GAAGlB,IAAI,CAACmB,OAAL,CAAa,KAAKR,GAAlB,EAAuB,uBAAvB,CAAjB;;AAEA,YAAI,CAACR,EAAE,CAACiB,UAAH,CAAcF,cAAd,CAAL,EAAoC;AAChCA,UAAAA,cAAc,GAAGlB,IAAI,CAACmB,OAAL,CAAa,KAAKR,GAAlB,EAAuB,0BAAvB,CAAjB;;AACA,cAAI,CAACR,EAAE,CAACiB,UAAH,CAAcF,cAAd,CAAL,EAAoC;AAChC,kBAAM,IAAIG,KAAJ,CAAU,yEAAV,CAAN;AACH;AACJ;AACJ;;AAGD,UAAIC,OAAO,GAAGtB,IAAI,CAACuB,OAAL,CAAaL,cAAb,CAAd;;AACA,UAAII,OAAO,KAAK,OAAhB,EAAyB;AACrB,cAAM,IAAID,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,UAAIG,UAAU,GAAGxB,IAAI,CAACyB,QAAL,CAAcP,cAAd,EAA8BI,OAA9B,CAAjB;AACA,UAAII,UAAU,GAAG1B,IAAI,CAAC2B,OAAL,CAAaT,cAAb,CAAjB;AACA,UAAIU,QAAQ,GAAG,KAAf;;AAEA,UAAIJ,UAAU,CAACK,QAAX,CAAoB,UAApB,CAAJ,EAAqC;AACjCD,QAAAA,QAAQ,GAAG,IAAX;AACAJ,QAAAA,UAAU,GAAGA,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBN,UAAU,CAACO,MAAX,GAAoB,CAAzC,CAAb;AACH;;AAED,WAAKC,SAAL,GAAiB,IAAI5B,gBAAJ,CAAqB,KAAKM,GAAL,CAASuB,IAA9B,EAAoC;AACjDC,QAAAA,WAAW,EAAE,KAAKvB,GAD+B;AAEjDe,QAAAA,UAFiD;AAGjDF,QAAAA,UAHiD;AAIjDW,QAAAA,qBAAqB,EAAE,CAACP,QAJyB;AAKjDQ,QAAAA,eAAe,EAAE,CACb,kBADa,EAEb,oBAFa,EAGb,WAHa,EAIb,SAJa,EAKb,UALa,EAMb,UANa,EAOb,SAPa,EAQb,YARa,EASb,KATa;AALgC,OAApC,CAAjB;AAkBA,WAAKJ,SAAL,CAAeK,aAAf,CAA6B,KAAK3B,GAAL,CAAS4B,MAAtC;AAEA,YAAM,KAAKN,SAAL,CAAeO,MAAf,EAAN;AAEA,WAAK7B,GAAL,CAAS8B,IAAT,CAAc,UAAd,EAA2BC,OAAD,IAAa;AACnCA,QAAAA,OAAO,CAACC,IAAR,CACI,CAAC,YAAY;AACT,gBAAM,KAAKV,SAAL,CAAeW,KAAf,EAAN;AACH,SAFD,GADJ;AAKH,OAND;;AAQA,WAAKX,SAAL,CAAef,MAAf,GAAyBgB,IAAD,IAAU;AAC9B,eAAO,KAAKvB,GAAL,CAASM,WAAT,CAAqBC,MAArB,CAA4BgB,IAA5B,CAAP;AACH,OAFD;;AAIA,UAAIW,MAAM,GAAG,KAAKZ,SAAL,CAAea,QAAf,CAAwBC,IAArC;;AACA,UAAI5C,CAAC,CAAC6C,OAAF,CAAUH,MAAV,CAAJ,EAAuB;AACnB,cAAM,IAAIvB,KAAJ,CAAU,oBAAV,CAAN;AACH;;AAED,UAAI;AAAE2B,QAAAA,QAAF;AAAYC,QAAAA,SAAZ;AAAuBC,QAAAA,UAAvB;AAAmCC,QAAAA,YAAnC;AAAiDC,QAAAA,aAAjD;AAAgEC,QAAAA;AAAhE,UACA/C,sBAAsB,CAACsC,MAAD,EAAS;AAC3BI,QAAAA,QAAQ,EAAE;AAAEM,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,OAAO,EAAE;AAAzB,SADiB;AAE3BN,QAAAA,SAAS,EAAE;AAAEK,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,OAAO,EAAE;AAAzB,SAFgB;AAG3BL,QAAAA,UAAU,EAAE;AAAEI,UAAAA,IAAI,EAAE,MAAR;AAAgBC,UAAAA,OAAO,EAAE;AAAzB,SAHe;AAI3BJ,QAAAA,YAAY,EAAE;AAAEG,UAAAA,IAAI,EAAE,MAAR;AAAgBE,UAAAA,QAAQ,EAAE;AAA1B,SAJa;AAK3BJ,QAAAA,aAAa,EAAE;AAAEE,UAAAA,IAAI,EAAE,SAAR;AAAmBE,UAAAA,QAAQ,EAAE,IAA7B;AAAmCD,UAAAA,OAAO,EAAE;AAA5C,SALY;AAM3BF,QAAAA,gBAAgB,EAAE;AAAEC,UAAAA,IAAI,EAAE,SAAR;AAAmBE,UAAAA,QAAQ,EAAE,IAA7B;AAAmCD,UAAAA,OAAO,EAAE;AAA5C;AANS,OAAT,CAD1B;AAUA,WAAKvB,SAAL,CAAeyB,OAAf,CAAuBR,SAAvB,GAAmCA,SAAnC;AAEAD,MAAAA,QAAQ,GAAG,KAAKhB,SAAL,CAAe0B,cAAf,CAA8BV,QAA9B,CAAX;AACAC,MAAAA,SAAS,GAAG,KAAKjB,SAAL,CAAe0B,cAAf,CAA8BT,SAA9B,CAAZ;AACAC,MAAAA,UAAU,GAAG,KAAKlB,SAAL,CAAe0B,cAAf,CAA8BR,UAA9B,CAAb;AACAC,MAAAA,YAAY,GAAG,KAAKnB,SAAL,CAAe0B,cAAf,CAA8BP,YAA9B,CAAf;AAEArC,MAAAA,UAAU,GAAG,EACT,GAAG8B,MADM;AAETI,QAAAA,QAFS;AAGTC,QAAAA,SAHS;AAITC,QAAAA,UAJS;AAKTC,QAAAA,YALS;AAMTC,QAAAA,aANS;AAOTC,QAAAA,gBAPS;AAQTnC,QAAAA;AARS,OAAb;;AAWA,UAAI,CAAChB,CAAC,CAAC6C,OAAF,CAAUjC,UAAU,CAAC6C,OAArB,CAAL,EAAoC;AAChC,cAAM;AAAEC,UAAAA,KAAK,EAAEC;AAAT,YAAmB5D,OAAO,CAAC,8BAAD,CAAhC;;AACA,cAAM4D,KAAK,CAAC,KAAK7B,SAAN,EAAiBlB,UAAU,CAAC6C,OAA5B,CAAX;AACH;AACJ,KA3GD,MA2GO;AACH,WAAK3B,SAAL,GAAiB,KAAKtB,GAAtB;AACH;;AAED,QAAIoD,UAAU,GAAG7D,OAAO,CAAC,gBAAgBY,OAAjB,CAAxB;;AAEA,QAAI;AACA,YAAMiD,UAAU,CAAC,KAAK9B,SAAN,EAAiBlB,UAAjB,CAAhB;AACH,KAFD,CAEE,OAAOiD,KAAP,EAAc;AACZ,YAAMA,KAAN;AAEAC,MAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACH;AACJ;;AAjIc;;AAoInBC,MAAM,CAACC,OAAP,GAAiB5D,YAAjB","sourcesContent":["const path = require(\"path\");\nconst { _ } = require(\"@genx/july\");\nconst { fs } = require(\"@genx/sys\");\nconst { ServiceContainer } = require(\"@genx/app\");\nconst {\n    Validators: { validateObjectBySchema },\n} = require(\"@genx/data\");\n\nclass AppInitiator {\n    constructor(context) {\n        this.app = context.app;\n        this.cwd = context.cwd;\n    }\n\n    async run(command) {\n        let gemlConfig;\n\n        if (command !== \"init\") {\n            let configFile = this.app.commandLine.option(\"config\");\n            let configFullPath;\n\n            if (configFile) {\n                configFullPath = path.resolve(this.cwd, configFile);\n\n                if (!fs.existsSync(configFullPath)) {\n                    throw new Error(`Config \"${configFile}\" not found!`);\n                }\n            } else {\n                configFullPath = path.resolve(this.cwd, 'conf/app.default.json');\n\n                if (!fs.existsSync(configFullPath)) {\n                    configFullPath = path.resolve(this.cwd, 'conf/server.default.json');\n                    if (!fs.existsSync(configFullPath)) {\n                        throw new Error('Either \"conf/app.default.json\" or \"conf/server.default.json\" not found.');\n                    }\n                }\n            }\n            \n\n            let extName = path.extname(configFullPath);\n            if (extName !== \".json\") {\n                throw new Error(\"Only supports JSON config.\");\n            }\n\n            let configName = path.basename(configFullPath, extName);\n            let configPath = path.dirname(configFullPath);\n            let envAware = false;\n\n            if (configName.endsWith(\".default\")) {\n                envAware = true;\n                configName = configName.substr(0, configName.length - 8);\n            }\n\n            this.container = new ServiceContainer(this.app.name, {\n                workingPath: this.cwd,\n                configPath,\n                configName,\n                disableEnvAwareConfig: !envAware,\n                allowedFeatures: [\n                    \"configByHostname\",\n                    \"devConfigByGitUser\",\n                    \"appLogger\",\n                    \"loggers\",\n                    \"settings\",\n                    \"timezone\",\n                    \"version\",\n                    \"dataSource\",\n                    \"env\",\n                ],\n            });\n\n            this.container.replaceLogger(this.app.logger);\n\n            await this.container.start_();\n\n            this.app.once(\"stopping\", (stopper) => {\n                stopper.push(\n                    (async () => {\n                        await this.container.stop_();\n                    })()\n                );\n            });\n\n            this.container.option = (name) => {\n                return this.app.commandLine.option(name);\n            };\n\n            let config = this.container.settings.geml;\n            if (_.isEmpty(config)) {\n                throw new Error(\"Empty geml config!\");\n            }\n\n            let { gemlPath, modelPath, scriptPath, manifestPath, useJsonSource, saveIntermediate } =\n                validateObjectBySchema(config, {\n                    gemlPath: { type: \"text\", default: \"geml\" },\n                    modelPath: { type: \"text\", default: \"src/models\" },\n                    scriptPath: { type: \"text\", default: \"src/scripts\" },\n                    manifestPath: { type: \"text\", optional: true },\n                    useJsonSource: { type: \"boolean\", optional: true, default: false },\n                    saveIntermediate: { type: \"boolean\", optional: true, default: false },\n                });\n\n            this.container.options.modelPath = modelPath;\n\n            gemlPath = this.container.toAbsolutePath(gemlPath);\n            modelPath = this.container.toAbsolutePath(modelPath);\n            scriptPath = this.container.toAbsolutePath(scriptPath);\n            manifestPath = this.container.toAbsolutePath(manifestPath);\n\n            gemlConfig = {                \n                ...config,\n                gemlPath,\n                modelPath,\n                scriptPath,\n                manifestPath,\n                useJsonSource,\n                saveIntermediate,\n                configFullPath\n            };\n\n            if (!_.isEmpty(gemlConfig.schemas)) {\n                const { load_: useDb } = require(\"@genx/app/lib/features/useDb\");\n                await useDb(this.container, gemlConfig.schemas);\n            }\n        } else {\n            this.container = this.app;\n        }\n\n        let cmdMethod_ = require(\"./commands/\" + command);\n\n        try {\n            await cmdMethod_(this.container, gemlConfig);\n        } catch (error) {\n            throw error;\n            //this.app.log('error', error.message);\n            process.exit(1);\n        }\n    }\n}\n\nmodule.exports = AppInitiator;\n"],"file":"AppInitiator.js"}