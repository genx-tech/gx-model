"use strict";

require("source-map-support/register");

exports.Commands = {
  'build': 'Generate database scripts and entity models.',
  'graphql': 'Generate graphql schemas.',
  'migrate': 'Create database structure.',
  'dataset': 'List available data set.',
  'import': 'Import data set.',
  'export': 'Export data from database.',
  'reverse': 'Reverse engineering from a databse.',
  'listValidators': 'List all builtin validators.'
};

exports.getCommandOptions = (cli, command) => {
  let cmdOptions = {};

  switch (command) {
    case 'build':
      break;

    case 'graphql':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        bool: true
      };
      break;

    case 'dataset':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        required: true
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        alias: ['ds', 'data'],
        required: true
      };
      break;

    case 'export':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'reverse':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'listValidators':
      break;

    default:
      break;
  }

  return cmdOptions;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkNvbW1hbmRzIiwiZ2V0Q29tbWFuZE9wdGlvbnMiLCJjbGkiLCJjb21tYW5kIiwiY21kT3B0aW9ucyIsImRlc2MiLCJwcm9tcHRNZXNzYWdlIiwicHJvbXB0RGVmYXVsdCIsImlucXVpcmUiLCJyZXF1aXJlZCIsImFsaWFzIiwiYm9vbCIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJjb3JlIiwiZ2V0U2NoZW1hc0luQ29uZmlnIiwiT2JqZWN0Iiwia2V5cyIsImNvbm5lY3Rpb25TdHJpbmdzIiwiYWZ0ZXJJbnF1aXJlIiwiY29uc29sZSIsImxvZyIsIm9wdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQUEsT0FBTyxDQUFDQyxRQUFSLEdBQW1CO0FBQ2YsV0FBUyw4Q0FETTtBQUVmLGFBQVcsMkJBRkk7QUFHZixhQUFXLDRCQUhJO0FBSWYsYUFBVywwQkFKSTtBQUtmLFlBQVUsa0JBTEs7QUFNZixZQUFVLDRCQU5LO0FBT2YsYUFBVyxxQ0FQSTtBQVFmLG9CQUFrQjtBQVJILENBQW5COztBQWVBRCxPQUFPLENBQUNFLGlCQUFSLEdBQTRCLENBQUNDLEdBQUQsRUFBTUMsT0FBTixLQUFrQjtBQUMxQyxNQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBRUEsVUFBUUQsT0FBUjtBQUNJLFNBQUssT0FBTDtBQUNJOztBQUVKLFNBQUssU0FBTDtBQUNJOztBQUVKLFNBQUssU0FBTDtBQUNJQyxNQUFBQSxVQUFVLENBQUMsR0FBRCxDQUFWLEdBQWtCO0FBQ2RDLFFBQUFBLElBQUksRUFBRSx1Q0FEUTtBQUVkQyxRQUFBQSxhQUFhLEVBQUUsMEJBRkQ7QUFHZEMsUUFBQUEsYUFBYSxFQUFFLEtBSEQ7QUFJZEMsUUFBQUEsT0FBTyxFQUFFLElBSks7QUFLZEMsUUFBQUEsUUFBUSxFQUFFLElBTEk7QUFNZEMsUUFBQUEsS0FBSyxFQUFFLENBQUUsT0FBRixDQU5PO0FBT2RDLFFBQUFBLElBQUksRUFBRTtBQVBRLE9BQWxCO0FBU0E7O0FBRUosU0FBSyxTQUFMO0FBQ0lQLE1BQUFBLFVBQVUsQ0FBQyxRQUFELENBQVYsR0FBdUI7QUFDbkJDLFFBQUFBLElBQUksRUFBRSxvQkFEYTtBQUVuQkMsUUFBQUEsYUFBYSxFQUFFLHlCQUZJO0FBR25CRSxRQUFBQSxPQUFPLEVBQUUsSUFIVTtBQUluQkMsUUFBQUEsUUFBUSxFQUFFLElBSlM7QUFLbkJHLFFBQUFBLFVBQVUsRUFBRSxNQUxPO0FBTW5CQyxRQUFBQSxlQUFlLEVBQUUsTUFBTUMsSUFBSSxDQUFDQyxrQkFBTDtBQU5KLE9BQXZCO0FBUUE7O0FBRUosU0FBSyxRQUFMO0FBQ0lYLE1BQUFBLFVBQVUsQ0FBQyxRQUFELENBQVYsR0FBdUI7QUFDbkJDLFFBQUFBLElBQUksRUFBRSxvQkFEYTtBQUVuQkksUUFBQUEsUUFBUSxFQUFFO0FBRlMsT0FBdkI7QUFJQUwsTUFBQUEsVUFBVSxDQUFDLFNBQUQsQ0FBVixHQUF3QjtBQUNwQkMsUUFBQUEsSUFBSSxFQUFFLG9DQURjO0FBRXBCSyxRQUFBQSxLQUFLLEVBQUUsQ0FBRSxJQUFGLEVBQVEsTUFBUixDQUZhO0FBR3BCRCxRQUFBQSxRQUFRLEVBQUU7QUFIVSxPQUF4QjtBQUtBOztBQUVKLFNBQUssUUFBTDtBQUNJTCxNQUFBQSxVQUFVLENBQUMsTUFBRCxDQUFWLEdBQXFCO0FBQ2pCQyxRQUFBQSxJQUFJLEVBQUUsMkJBRFc7QUFFakJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLFdBQUYsQ0FGVTtBQUdqQkosUUFBQUEsYUFBYSxFQUFFLDBDQUhFO0FBSWpCRSxRQUFBQSxPQUFPLEVBQUUsSUFKUTtBQUtqQkMsUUFBQUEsUUFBUSxFQUFFLElBTE87QUFNakJHLFFBQUFBLFVBQVUsRUFBRSxNQU5LO0FBT2pCQyxRQUFBQSxlQUFlLEVBQUUsTUFBTUcsTUFBTSxDQUFDQyxJQUFQLENBQVlILElBQUksQ0FBQ0ksaUJBQWpCLENBUE47QUFRakJDLFFBQUFBLFlBQVksRUFBRSxNQUFNO0FBQUVDLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDhDQUFaLEVBQTRESCxpQkFBaUIsQ0FBQ0osSUFBSSxDQUFDUSxNQUFMLENBQVksTUFBWixDQUFELENBQTdFO0FBQXNHO0FBUjNHLE9BQXJCO0FBVUE7O0FBRUosU0FBSyxTQUFMO0FBQ0lsQixNQUFBQSxVQUFVLENBQUMsTUFBRCxDQUFWLEdBQXFCO0FBQ2pCQyxRQUFBQSxJQUFJLEVBQUUsMkJBRFc7QUFFakJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLFdBQUYsQ0FGVTtBQUdqQkosUUFBQUEsYUFBYSxFQUFFLDBDQUhFO0FBSWpCRSxRQUFBQSxPQUFPLEVBQUUsSUFKUTtBQUtqQkMsUUFBQUEsUUFBUSxFQUFFLElBTE87QUFNakJHLFFBQUFBLFVBQVUsRUFBRSxNQU5LO0FBT2pCQyxRQUFBQSxlQUFlLEVBQUUsTUFBTUcsTUFBTSxDQUFDQyxJQUFQLENBQVlILElBQUksQ0FBQ0ksaUJBQWpCLENBUE47QUFRakJDLFFBQUFBLFlBQVksRUFBRSxNQUFNO0FBQUVDLFVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLDhDQUFaLEVBQTRESCxpQkFBaUIsQ0FBQ0osSUFBSSxDQUFDUSxNQUFMLENBQVksTUFBWixDQUFELENBQTdFO0FBQXNHO0FBUjNHLE9BQXJCO0FBVUE7O0FBRUosU0FBSyxnQkFBTDtBQUNJOztBQUVKO0FBRUk7QUF6RVI7O0FBNEVBLFNBQU9sQixVQUFQO0FBQ0gsQ0FoRkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5Db21tYW5kcyA9IHsgICAgXG4gICAgJ2J1aWxkJzogJ0dlbmVyYXRlIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMuJyxcbiAgICAnZ3JhcGhxbCc6ICdHZW5lcmF0ZSBncmFwaHFsIHNjaGVtYXMuJyxcbiAgICAnbWlncmF0ZSc6ICdDcmVhdGUgZGF0YWJhc2Ugc3RydWN0dXJlLicsICAgICAgICBcbiAgICAnZGF0YXNldCc6ICdMaXN0IGF2YWlsYWJsZSBkYXRhIHNldC4nLFxuICAgICdpbXBvcnQnOiAnSW1wb3J0IGRhdGEgc2V0LicsXG4gICAgJ2V4cG9ydCc6ICdFeHBvcnQgZGF0YSBmcm9tIGRhdGFiYXNlLicsXG4gICAgJ3JldmVyc2UnOiAnUmV2ZXJzZSBlbmdpbmVlcmluZyBmcm9tIGEgZGF0YWJzZS4nLFxuICAgICdsaXN0VmFsaWRhdG9ycyc6ICdMaXN0IGFsbCBidWlsdGluIHZhbGlkYXRvcnMuJ1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge0NvbW1hbmRMaW5lfSBjbGkgLSBDb21tYW5kTGluZSBvYmplY3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29tbWFuZCAtIENvbW1hbmRcbiAqL1xuZXhwb3J0cy5nZXRDb21tYW5kT3B0aW9ucyA9IChjbGksIGNvbW1hbmQpID0+IHtcbiAgICBsZXQgY21kT3B0aW9ucyA9IHt9O1xuXG4gICAgc3dpdGNoIChjb21tYW5kKSB7XG4gICAgICAgIGNhc2UgJ2J1aWxkJzpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2dyYXBocWwnOlxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbWlncmF0ZSc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydyJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1Jlc2V0IGFsbCBkYXRhIGlmIHRoZSBkYXRhYmFzZSBleGlzdHMnLFxuICAgICAgICAgICAgICAgIHByb21wdE1lc3NhZ2U6ICdSZXNldCBleGlzdGluZyBkYXRhYmFzZT8nLFxuICAgICAgICAgICAgICAgIHByb21wdERlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ3Jlc2V0JyBdLFxuICAgICAgICAgICAgICAgIGJvb2w6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhazsgICAgICAgIFxuXG4gICAgICAgIGNhc2UgJ2RhdGFzZXQnOiBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3NjaGVtYSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGxpc3QnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCBhIHNjaGVtYTonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gY29yZS5nZXRTY2hlbWFzSW5Db25maWcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ltcG9ydCc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydzY2hlbWEnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIHNjaGVtYSB0byBsaXN0JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY21kT3B0aW9uc1snZGF0YXNldCddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgbmFtZSBvZiB0aGUgZGF0YSBzZXQgdG8gaW1wb3J0JywgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2RzJywgJ2RhdGEnIF0sXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZXhwb3J0JzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2Nvbm4nXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2Nvbm5lY3RvcicgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBPYmplY3Qua2V5cyhjb3JlLmNvbm5lY3Rpb25TdHJpbmdzKSxcbiAgICAgICAgICAgICAgICBhZnRlcklucXVpcmU6ICgpID0+IHsgY29uc29sZS5sb2coJ1RoZSBjb25lbmN0aW9uIHN0cmluZyBvZiBzZWxlY3RlZCBjb25uZWN0b3I6JywgY29ubmVjdGlvblN0cmluZ3NbY29yZS5vcHRpb24oJ2Nvbm4nKV0pOyB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTsgICAgICAgICAgIFxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmV2ZXJzZSc6ICAgICAgICBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2Nvbm4nXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2Nvbm5lY3RvcicgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBPYmplY3Qua2V5cyhjb3JlLmNvbm5lY3Rpb25TdHJpbmdzKSxcbiAgICAgICAgICAgICAgICBhZnRlcklucXVpcmU6ICgpID0+IHsgY29uc29sZS5sb2coJ1RoZSBjb25lbmN0aW9uIHN0cmluZyBvZiBzZWxlY3RlZCBjb25uZWN0b3I6JywgY29ubmVjdGlvblN0cmluZ3NbY29yZS5vcHRpb24oJ2Nvbm4nKV0pOyB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpc3RWYWxpZGF0b3JzJzpcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvL21vZHVsZSBnZW5lcmFsIG9wdGlvbnNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBjbWRPcHRpb25zO1xufTtcblxuIl19