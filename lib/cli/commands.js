"use strict";

require("source-map-support/register");

exports.Commands = {
  'build': 'Generate database scripts and entity models.',
  'graphql': 'Generate graphql schemas.',
  'migrate': 'Create database structure.',
  'import': 'Import data set.',
  'export': 'Export data from database.',
  'reverse': 'Reverse engineering from a databse.'
};

exports.getCommandOptions = (cli, command) => {
  let cmdOptions = {};

  switch (command) {
    case 'build':
      break;

    case 'graphql':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        bool: true
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        required: true
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        alias: ['ds', 'data'],
        required: true
      };
      cmdOptions['ignore'] = {
        desc: 'Ignore exception on duplicate',
        alias: ['ignore-duplicate'],
        bool: true
      };
      break;

    case 'export':
      cmdOptions['schema'] = {
        desc: 'The schema to export',
        required: true
      };
      cmdOptions['override'] = {
        desc: 'Override same day output',
        alias: ['f'],
        bool: true
      };
      break;

    case 'reverse':
      cmdOptions['schema'] = {
        desc: 'The schema to reverse',
        required: true
      };
      cmdOptions['override'] = {
        desc: 'Override same day output',
        alias: ['f'],
        bool: true
      };
      break;

    default:
      break;
  }

  return cmdOptions;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkNvbW1hbmRzIiwiZ2V0Q29tbWFuZE9wdGlvbnMiLCJjbGkiLCJjb21tYW5kIiwiY21kT3B0aW9ucyIsImRlc2MiLCJwcm9tcHRNZXNzYWdlIiwicHJvbXB0RGVmYXVsdCIsImlucXVpcmUiLCJyZXF1aXJlZCIsImFsaWFzIiwiYm9vbCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQUEsT0FBTyxDQUFDQyxRQUFSLEdBQW1CO0FBQ2YsV0FBUyw4Q0FETTtBQUVmLGFBQVcsMkJBRkk7QUFHZixhQUFXLDRCQUhJO0FBSWYsWUFBVSxrQkFKSztBQUtmLFlBQVUsNEJBTEs7QUFNZixhQUFXO0FBTkksQ0FBbkI7O0FBYUFELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEIsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEtBQWtCO0FBQzFDLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjs7QUFFQSxVQUFRRCxPQUFSO0FBQ0ksU0FBSyxPQUFMO0FBQ0k7O0FBRUosU0FBSyxTQUFMO0FBQ0k7O0FBRUosU0FBSyxTQUFMO0FBQ0lDLE1BQUFBLFVBQVUsQ0FBQyxHQUFELENBQVYsR0FBa0I7QUFDZEMsUUFBQUEsSUFBSSxFQUFFLHVDQURRO0FBRWRDLFFBQUFBLGFBQWEsRUFBRSwwQkFGRDtBQUdkQyxRQUFBQSxhQUFhLEVBQUUsS0FIRDtBQUlkQyxRQUFBQSxPQUFPLEVBQUUsSUFKSztBQUtkQyxRQUFBQSxRQUFRLEVBQUUsSUFMSTtBQU1kQyxRQUFBQSxLQUFLLEVBQUUsQ0FBRSxPQUFGLENBTk87QUFPZEMsUUFBQUEsSUFBSSxFQUFFO0FBUFEsT0FBbEI7QUFTQTs7QUFFSixTQUFLLFFBQUw7QUFDSVAsTUFBQUEsVUFBVSxDQUFDLFFBQUQsQ0FBVixHQUF1QjtBQUNuQkMsUUFBQUEsSUFBSSxFQUFFLG9CQURhO0FBRW5CSSxRQUFBQSxRQUFRLEVBQUU7QUFGUyxPQUF2QjtBQUlBTCxNQUFBQSxVQUFVLENBQUMsU0FBRCxDQUFWLEdBQXdCO0FBQ3BCQyxRQUFBQSxJQUFJLEVBQUUsb0NBRGM7QUFFcEJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLElBQUYsRUFBUSxNQUFSLENBRmE7QUFHcEJELFFBQUFBLFFBQVEsRUFBRTtBQUhVLE9BQXhCO0FBS0FMLE1BQUFBLFVBQVUsQ0FBQyxRQUFELENBQVYsR0FBdUI7QUFDbkJDLFFBQUFBLElBQUksRUFBRSwrQkFEYTtBQUVuQkssUUFBQUEsS0FBSyxFQUFFLENBQUUsa0JBQUYsQ0FGWTtBQUduQkMsUUFBQUEsSUFBSSxFQUFFO0FBSGEsT0FBdkI7QUFLQTs7QUFFSixTQUFLLFFBQUw7QUFDSVAsTUFBQUEsVUFBVSxDQUFDLFFBQUQsQ0FBVixHQUF1QjtBQUNuQkMsUUFBQUEsSUFBSSxFQUFFLHNCQURhO0FBRW5CSSxRQUFBQSxRQUFRLEVBQUU7QUFGUyxPQUF2QjtBQUlBTCxNQUFBQSxVQUFVLENBQUMsVUFBRCxDQUFWLEdBQXlCO0FBQ3JCQyxRQUFBQSxJQUFJLEVBQUUsMEJBRGU7QUFFckJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLEdBQUYsQ0FGYztBQUdyQkMsUUFBQUEsSUFBSSxFQUFFO0FBSGUsT0FBekI7QUFLQTs7QUFFSixTQUFLLFNBQUw7QUFDSVAsTUFBQUEsVUFBVSxDQUFDLFFBQUQsQ0FBVixHQUF1QjtBQUNuQkMsUUFBQUEsSUFBSSxFQUFFLHVCQURhO0FBRW5CSSxRQUFBQSxRQUFRLEVBQUU7QUFGUyxPQUF2QjtBQUlBTCxNQUFBQSxVQUFVLENBQUMsVUFBRCxDQUFWLEdBQXlCO0FBQ3JCQyxRQUFBQSxJQUFJLEVBQUUsMEJBRGU7QUFFckJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLEdBQUYsQ0FGYztBQUdyQkMsUUFBQUEsSUFBSSxFQUFFO0FBSGUsT0FBekI7QUFLQTs7QUFFSjtBQUVJO0FBOURSOztBQWlFQSxTQUFPUCxVQUFQO0FBQ0gsQ0FyRUQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5Db21tYW5kcyA9IHsgICAgXG4gICAgJ2J1aWxkJzogJ0dlbmVyYXRlIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMuJyxcbiAgICAnZ3JhcGhxbCc6ICdHZW5lcmF0ZSBncmFwaHFsIHNjaGVtYXMuJyxcbiAgICAnbWlncmF0ZSc6ICdDcmVhdGUgZGF0YWJhc2Ugc3RydWN0dXJlLicsICAgICAgICAgICAgXG4gICAgJ2ltcG9ydCc6ICdJbXBvcnQgZGF0YSBzZXQuJyxcbiAgICAnZXhwb3J0JzogJ0V4cG9ydCBkYXRhIGZyb20gZGF0YWJhc2UuJyxcbiAgICAncmV2ZXJzZSc6ICdSZXZlcnNlIGVuZ2luZWVyaW5nIGZyb20gYSBkYXRhYnNlLidcbn07XG5cbi8qKlxuICogQHBhcmFtIHtDb21tYW5kTGluZX0gY2xpIC0gQ29tbWFuZExpbmUgb2JqZWN0LlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbW1hbmQgLSBDb21tYW5kXG4gKi9cbmV4cG9ydHMuZ2V0Q29tbWFuZE9wdGlvbnMgPSAoY2xpLCBjb21tYW5kKSA9PiB7XG4gICAgbGV0IGNtZE9wdGlvbnMgPSB7fTtcblxuICAgIHN3aXRjaCAoY29tbWFuZCkge1xuICAgICAgICBjYXNlICdidWlsZCc6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdncmFwaHFsJzpcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21pZ3JhdGUnOlxuICAgICAgICAgICAgY21kT3B0aW9uc1snciddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdSZXNldCBhbGwgZGF0YSBpZiB0aGUgZGF0YWJhc2UgZXhpc3RzJyxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUmVzZXQgZXhpc3RpbmcgZGF0YWJhc2U/JyxcbiAgICAgICAgICAgICAgICBwcm9tcHREZWZhdWx0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdyZXNldCcgXSxcbiAgICAgICAgICAgICAgICBib29sOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7ICAgICAgICBcblxuICAgICAgICBjYXNlICdpbXBvcnQnOlxuICAgICAgICAgICAgY21kT3B0aW9uc1snc2NoZW1hJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBzY2hlbWEgdG8gbGlzdCcsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2RhdGFzZXQnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIG5hbWUgb2YgdGhlIGRhdGEgc2V0IHRvIGltcG9ydCcsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdkcycsICdkYXRhJyBdLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2lnbm9yZSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdJZ25vcmUgZXhjZXB0aW9uIG9uIGR1cGxpY2F0ZScsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdpZ25vcmUtZHVwbGljYXRlJyBdLFxuICAgICAgICAgICAgICAgIGJvb2w6IHRydWUgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZXhwb3J0JzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3NjaGVtYSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGV4cG9ydCcsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgICAgICAgIFxuICAgICAgICAgICAgfTsgICAgICBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ292ZXJyaWRlJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ092ZXJyaWRlIHNhbWUgZGF5IG91dHB1dCcsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2YnIF0sXG4gICAgICAgICAgICAgICAgYm9vbDogdHJ1ZVxuICAgICAgICAgICAgfTsgICAgICAgICAgICBcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JldmVyc2UnOiAgICAgICAgXG4gICAgICAgICAgICBjbWRPcHRpb25zWydzY2hlbWEnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIHNjaGVtYSB0byByZXZlcnNlJyxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY21kT3B0aW9uc1snb3ZlcnJpZGUnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnT3ZlcnJpZGUgc2FtZSBkYXkgb3V0cHV0JyxcbiAgICAgICAgICAgICAgICBhbGlhczogWyAnZicgXSxcbiAgICAgICAgICAgICAgICBib29sOiB0cnVlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgLy9tb2R1bGUgZ2VuZXJhbCBvcHRpb25zXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gY21kT3B0aW9ucztcbn07XG5cbiJdfQ==