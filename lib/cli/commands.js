"use strict";

require("source-map-support/register");

exports.Commands = {
  'build': 'Generate database scripts and entity models.',
  'migrate': 'Create database structure.',
  'dataset': 'List available data set.',
  'import': 'Import data set.',
  'export': 'Export data from database.',
  'reverse': 'Reverse engineering from a databse.',
  'listValidators': 'List all builtin validators.'
};

exports.getCommandOptions = (cli, command) => {
  let cmdOptions = {};

  switch (command) {
    case 'build':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        bool: true
      };
      break;

    case 'dataset':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        required: true
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        alias: ['ds', 'data'],
        required: true
      };
      break;

    case 'export':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'reverse':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'listValidators':
      break;

    default:
      break;
  }

  return cmdOptions;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkNvbW1hbmRzIiwiZ2V0Q29tbWFuZE9wdGlvbnMiLCJjbGkiLCJjb21tYW5kIiwiY21kT3B0aW9ucyIsImRlc2MiLCJwcm9tcHRNZXNzYWdlIiwicHJvbXB0RGVmYXVsdCIsImlucXVpcmUiLCJyZXF1aXJlZCIsImFsaWFzIiwiYm9vbCIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJjb3JlIiwiZ2V0U2NoZW1hc0luQ29uZmlnIiwiT2JqZWN0Iiwia2V5cyIsImNvbm5lY3Rpb25TdHJpbmdzIiwiYWZ0ZXJJbnF1aXJlIiwiY29uc29sZSIsImxvZyIsIm9wdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQUEsT0FBTyxDQUFDQyxRQUFSLEdBQW1CO0FBQ2YsV0FBUyw4Q0FETTtBQUVmLGFBQVcsNEJBRkk7QUFHZixhQUFXLDBCQUhJO0FBSWYsWUFBVSxrQkFKSztBQUtmLFlBQVUsNEJBTEs7QUFNZixhQUFXLHFDQU5JO0FBT2Ysb0JBQWtCO0FBUEgsQ0FBbkI7O0FBY0FELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEIsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEtBQWtCO0FBQzFDLE1BQUlDLFVBQVUsR0FBRyxFQUFqQjs7QUFFQSxVQUFRRCxPQUFSO0FBQ0ksU0FBSyxPQUFMO0FBQ0k7O0FBRUosU0FBSyxTQUFMO0FBQ0lDLE1BQUFBLFVBQVUsQ0FBQyxHQUFELENBQVYsR0FBa0I7QUFDZEMsUUFBQUEsSUFBSSxFQUFFLHVDQURRO0FBRWRDLFFBQUFBLGFBQWEsRUFBRSwwQkFGRDtBQUdkQyxRQUFBQSxhQUFhLEVBQUUsS0FIRDtBQUlkQyxRQUFBQSxPQUFPLEVBQUUsSUFKSztBQUtkQyxRQUFBQSxRQUFRLEVBQUUsSUFMSTtBQU1kQyxRQUFBQSxLQUFLLEVBQUUsQ0FBRSxPQUFGLENBTk87QUFPZEMsUUFBQUEsSUFBSSxFQUFFO0FBUFEsT0FBbEI7QUFTQTs7QUFFSixTQUFLLFNBQUw7QUFDSVAsTUFBQUEsVUFBVSxDQUFDLFFBQUQsQ0FBVixHQUF1QjtBQUNuQkMsUUFBQUEsSUFBSSxFQUFFLG9CQURhO0FBRW5CQyxRQUFBQSxhQUFhLEVBQUUseUJBRkk7QUFHbkJFLFFBQUFBLE9BQU8sRUFBRSxJQUhVO0FBSW5CQyxRQUFBQSxRQUFRLEVBQUUsSUFKUztBQUtuQkcsUUFBQUEsVUFBVSxFQUFFLE1BTE87QUFNbkJDLFFBQUFBLGVBQWUsRUFBRSxNQUFNQyxJQUFJLENBQUNDLGtCQUFMO0FBTkosT0FBdkI7QUFRQTs7QUFFSixTQUFLLFFBQUw7QUFDSVgsTUFBQUEsVUFBVSxDQUFDLFFBQUQsQ0FBVixHQUF1QjtBQUNuQkMsUUFBQUEsSUFBSSxFQUFFLG9CQURhO0FBRW5CSSxRQUFBQSxRQUFRLEVBQUU7QUFGUyxPQUF2QjtBQUlBTCxNQUFBQSxVQUFVLENBQUMsU0FBRCxDQUFWLEdBQXdCO0FBQ3BCQyxRQUFBQSxJQUFJLEVBQUUsb0NBRGM7QUFFcEJLLFFBQUFBLEtBQUssRUFBRSxDQUFFLElBQUYsRUFBUSxNQUFSLENBRmE7QUFHcEJELFFBQUFBLFFBQVEsRUFBRTtBQUhVLE9BQXhCO0FBS0E7O0FBRUosU0FBSyxRQUFMO0FBQ0lMLE1BQUFBLFVBQVUsQ0FBQyxNQUFELENBQVYsR0FBcUI7QUFDakJDLFFBQUFBLElBQUksRUFBRSwyQkFEVztBQUVqQkssUUFBQUEsS0FBSyxFQUFFLENBQUUsV0FBRixDQUZVO0FBR2pCSixRQUFBQSxhQUFhLEVBQUUsMENBSEU7QUFJakJFLFFBQUFBLE9BQU8sRUFBRSxJQUpRO0FBS2pCQyxRQUFBQSxRQUFRLEVBQUUsSUFMTztBQU1qQkcsUUFBQUEsVUFBVSxFQUFFLE1BTks7QUFPakJDLFFBQUFBLGVBQWUsRUFBRSxNQUFNRyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsSUFBSSxDQUFDSSxpQkFBakIsQ0FQTjtBQVFqQkMsUUFBQUEsWUFBWSxFQUFFLE1BQU07QUFBRUMsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksOENBQVosRUFBNERILGlCQUFpQixDQUFDSixJQUFJLENBQUNRLE1BQUwsQ0FBWSxNQUFaLENBQUQsQ0FBN0U7QUFBc0c7QUFSM0csT0FBckI7QUFVQTs7QUFFSixTQUFLLFNBQUw7QUFDSWxCLE1BQUFBLFVBQVUsQ0FBQyxNQUFELENBQVYsR0FBcUI7QUFDakJDLFFBQUFBLElBQUksRUFBRSwyQkFEVztBQUVqQkssUUFBQUEsS0FBSyxFQUFFLENBQUUsV0FBRixDQUZVO0FBR2pCSixRQUFBQSxhQUFhLEVBQUUsMENBSEU7QUFJakJFLFFBQUFBLE9BQU8sRUFBRSxJQUpRO0FBS2pCQyxRQUFBQSxRQUFRLEVBQUUsSUFMTztBQU1qQkcsUUFBQUEsVUFBVSxFQUFFLE1BTks7QUFPakJDLFFBQUFBLGVBQWUsRUFBRSxNQUFNRyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsSUFBSSxDQUFDSSxpQkFBakIsQ0FQTjtBQVFqQkMsUUFBQUEsWUFBWSxFQUFFLE1BQU07QUFBRUMsVUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksOENBQVosRUFBNERILGlCQUFpQixDQUFDSixJQUFJLENBQUNRLE1BQUwsQ0FBWSxNQUFaLENBQUQsQ0FBN0U7QUFBc0c7QUFSM0csT0FBckI7QUFVQTs7QUFFSixTQUFLLGdCQUFMO0FBQ0k7O0FBRUo7QUFFSTtBQXRFUjs7QUF5RUEsU0FBT2xCLFVBQVA7QUFDSCxDQTdFRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLkNvbW1hbmRzID0geyAgICBcbiAgICAnYnVpbGQnOiAnR2VuZXJhdGUgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscy4nLFxuICAgICdtaWdyYXRlJzogJ0NyZWF0ZSBkYXRhYmFzZSBzdHJ1Y3R1cmUuJywgICAgICAgIFxuICAgICdkYXRhc2V0JzogJ0xpc3QgYXZhaWxhYmxlIGRhdGEgc2V0LicsXG4gICAgJ2ltcG9ydCc6ICdJbXBvcnQgZGF0YSBzZXQuJyxcbiAgICAnZXhwb3J0JzogJ0V4cG9ydCBkYXRhIGZyb20gZGF0YWJhc2UuJyxcbiAgICAncmV2ZXJzZSc6ICdSZXZlcnNlIGVuZ2luZWVyaW5nIGZyb20gYSBkYXRhYnNlLicsXG4gICAgJ2xpc3RWYWxpZGF0b3JzJzogJ0xpc3QgYWxsIGJ1aWx0aW4gdmFsaWRhdG9ycy4nXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Q29tbWFuZExpbmV9IGNsaSAtIENvbW1hbmRMaW5lIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21tYW5kIC0gQ29tbWFuZFxuICovXG5leHBvcnRzLmdldENvbW1hbmRPcHRpb25zID0gKGNsaSwgY29tbWFuZCkgPT4ge1xuICAgIGxldCBjbWRPcHRpb25zID0ge307XG5cbiAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgY2FzZSAnYnVpbGQnOlxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbWlncmF0ZSc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydyJ10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1Jlc2V0IGFsbCBkYXRhIGlmIHRoZSBkYXRhYmFzZSBleGlzdHMnLFxuICAgICAgICAgICAgICAgIHByb21wdE1lc3NhZ2U6ICdSZXNldCBleGlzdGluZyBkYXRhYmFzZT8nLFxuICAgICAgICAgICAgICAgIHByb21wdERlZmF1bHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ3Jlc2V0JyBdLFxuICAgICAgICAgICAgICAgIGJvb2w6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhazsgICAgICAgIFxuXG4gICAgICAgIGNhc2UgJ2RhdGFzZXQnOiBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3NjaGVtYSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGxpc3QnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCBhIHNjaGVtYTonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgcHJvbXB0VHlwZTogJ2xpc3QnLFxuICAgICAgICAgICAgICAgIGNob2ljZXNQcm92aWRlcjogKCkgPT4gY29yZS5nZXRTY2hlbWFzSW5Db25maWcoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ltcG9ydCc6XG4gICAgICAgICAgICBjbWRPcHRpb25zWydzY2hlbWEnXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIHNjaGVtYSB0byBsaXN0JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY21kT3B0aW9uc1snZGF0YXNldCddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgbmFtZSBvZiB0aGUgZGF0YSBzZXQgdG8gaW1wb3J0JywgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2RzJywgJ2RhdGEnIF0sXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZXhwb3J0JzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2Nvbm4nXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2Nvbm5lY3RvcicgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBPYmplY3Qua2V5cyhjb3JlLmNvbm5lY3Rpb25TdHJpbmdzKSxcbiAgICAgICAgICAgICAgICBhZnRlcklucXVpcmU6ICgpID0+IHsgY29uc29sZS5sb2coJ1RoZSBjb25lbmN0aW9uIHN0cmluZyBvZiBzZWxlY3RlZCBjb25uZWN0b3I6JywgY29ubmVjdGlvblN0cmluZ3NbY29yZS5vcHRpb24oJ2Nvbm4nKV0pOyB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTsgICAgICAgICAgIFxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmV2ZXJzZSc6ICAgICAgICBcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ2Nvbm4nXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnVGhlIGRhdGEgc291cmNlIGNvbm5lY3RvcicsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ2Nvbm5lY3RvcicgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCB0aGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yOicsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBPYmplY3Qua2V5cyhjb3JlLmNvbm5lY3Rpb25TdHJpbmdzKSxcbiAgICAgICAgICAgICAgICBhZnRlcklucXVpcmU6ICgpID0+IHsgY29uc29sZS5sb2coJ1RoZSBjb25lbmN0aW9uIHN0cmluZyBvZiBzZWxlY3RlZCBjb25uZWN0b3I6JywgY29ubmVjdGlvblN0cmluZ3NbY29yZS5vcHRpb24oJ2Nvbm4nKV0pOyB9ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpc3RWYWxpZGF0b3JzJzpcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvL21vZHVsZSBnZW5lcmFsIG9wdGlvbnNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBjbWRPcHRpb25zO1xufTtcblxuIl19