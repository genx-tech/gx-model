"use strict";

require("source-map-support/register");

exports.Commands = {
  'build': 'Generate database scripts and entity models.',
  'graphql': 'Generate graphql schemas.',
  'migrate': 'Create database structure.',
  'dataset': 'List available data set.',
  'import': 'Import data set.',
  'export': 'Export data from database.',
  'reverse': 'Reverse engineering from a databse.',
  'listValidators': 'List all builtin validators.'
};

exports.getCommandOptions = (cli, command) => {
  let cmdOptions = {};

  switch (command) {
    case 'build':
      break;

    case 'graphql':
      break;

    case 'migrate':
      cmdOptions['r'] = {
        desc: 'Reset all data if the database exists',
        promptMessage: 'Reset existing database?',
        promptDefault: false,
        inquire: true,
        required: true,
        alias: ['reset'],
        bool: true
      };
      break;

    case 'dataset':
      cmdOptions['s'] = {
        desc: 'The schema to list',
        promptMessage: 'Please select a schema:',
        inquire: true,
        required: true,
        alias: ['schema'],
        promptType: 'list',
        choicesProvider: () => core.getSchemasInConfig()
      };
      break;

    case 'import':
      cmdOptions['schema'] = {
        desc: 'The schema to list',
        required: true
      };
      cmdOptions['dataset'] = {
        desc: 'The name of the data set to import',
        alias: ['ds', 'data'],
        required: true
      };
      break;

    case 'export':
      cmdOptions['conn'] = {
        desc: 'The data source connector',
        alias: ['connector'],
        promptMessage: 'Please select the data source connector:',
        inquire: true,
        required: true,
        promptType: 'list',
        choicesProvider: () => Object.keys(core.connectionStrings),
        afterInquire: () => {
          console.log('The conenction string of selected connector:', connectionStrings[core.option('conn')]);
        }
      };
      break;

    case 'reverse':
      cmdOptions['s'] = {
        desc: 'The schema to reverse',
        alias: ['schema']
      };
      break;

    case 'listValidators':
      break;

    default:
      break;
  }

  return cmdOptions;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvY29tbWFuZHMuanMiXSwibmFtZXMiOlsiZXhwb3J0cyIsIkNvbW1hbmRzIiwiZ2V0Q29tbWFuZE9wdGlvbnMiLCJjbGkiLCJjb21tYW5kIiwiY21kT3B0aW9ucyIsImRlc2MiLCJwcm9tcHRNZXNzYWdlIiwicHJvbXB0RGVmYXVsdCIsImlucXVpcmUiLCJyZXF1aXJlZCIsImFsaWFzIiwiYm9vbCIsInByb21wdFR5cGUiLCJjaG9pY2VzUHJvdmlkZXIiLCJjb3JlIiwiZ2V0U2NoZW1hc0luQ29uZmlnIiwiT2JqZWN0Iiwia2V5cyIsImNvbm5lY3Rpb25TdHJpbmdzIiwiYWZ0ZXJJbnF1aXJlIiwiY29uc29sZSIsImxvZyIsIm9wdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQUEsT0FBTyxDQUFDQyxRQUFSLEdBQW1CO0FBQ2YsV0FBUyw4Q0FETTtBQUVmLGFBQVcsMkJBRkk7QUFHZixhQUFXLDRCQUhJO0FBSWYsYUFBVywwQkFKSTtBQUtmLFlBQVUsa0JBTEs7QUFNZixZQUFVLDRCQU5LO0FBT2YsYUFBVyxxQ0FQSTtBQVFmLG9CQUFrQjtBQVJILENBQW5COztBQWVBRCxPQUFPLENBQUNFLGlCQUFSLEdBQTRCLENBQUNDLEdBQUQsRUFBTUMsT0FBTixLQUFrQjtBQUMxQyxNQUFJQyxVQUFVLEdBQUcsRUFBakI7O0FBRUEsVUFBUUQsT0FBUjtBQUNJLFNBQUssT0FBTDtBQUNJOztBQUVKLFNBQUssU0FBTDtBQUNJOztBQUVKLFNBQUssU0FBTDtBQUNJQyxNQUFBQSxVQUFVLENBQUMsR0FBRCxDQUFWLEdBQWtCO0FBQ2RDLFFBQUFBLElBQUksRUFBRSx1Q0FEUTtBQUVkQyxRQUFBQSxhQUFhLEVBQUUsMEJBRkQ7QUFHZEMsUUFBQUEsYUFBYSxFQUFFLEtBSEQ7QUFJZEMsUUFBQUEsT0FBTyxFQUFFLElBSks7QUFLZEMsUUFBQUEsUUFBUSxFQUFFLElBTEk7QUFNZEMsUUFBQUEsS0FBSyxFQUFFLENBQUUsT0FBRixDQU5PO0FBT2RDLFFBQUFBLElBQUksRUFBRTtBQVBRLE9BQWxCO0FBU0E7O0FBRUosU0FBSyxTQUFMO0FBQ0lQLE1BQUFBLFVBQVUsQ0FBQyxHQUFELENBQVYsR0FBa0I7QUFDZEMsUUFBQUEsSUFBSSxFQUFFLG9CQURRO0FBRWRDLFFBQUFBLGFBQWEsRUFBRSx5QkFGRDtBQUdkRSxRQUFBQSxPQUFPLEVBQUUsSUFISztBQUlkQyxRQUFBQSxRQUFRLEVBQUUsSUFKSTtBQUtkQyxRQUFBQSxLQUFLLEVBQUUsQ0FBRSxRQUFGLENBTE87QUFNZEUsUUFBQUEsVUFBVSxFQUFFLE1BTkU7QUFPZEMsUUFBQUEsZUFBZSxFQUFFLE1BQU1DLElBQUksQ0FBQ0Msa0JBQUw7QUFQVCxPQUFsQjtBQVNBOztBQUVKLFNBQUssUUFBTDtBQUNJWCxNQUFBQSxVQUFVLENBQUMsUUFBRCxDQUFWLEdBQXVCO0FBQ25CQyxRQUFBQSxJQUFJLEVBQUUsb0JBRGE7QUFFbkJJLFFBQUFBLFFBQVEsRUFBRTtBQUZTLE9BQXZCO0FBSUFMLE1BQUFBLFVBQVUsQ0FBQyxTQUFELENBQVYsR0FBd0I7QUFDcEJDLFFBQUFBLElBQUksRUFBRSxvQ0FEYztBQUVwQkssUUFBQUEsS0FBSyxFQUFFLENBQUUsSUFBRixFQUFRLE1BQVIsQ0FGYTtBQUdwQkQsUUFBQUEsUUFBUSxFQUFFO0FBSFUsT0FBeEI7QUFLQTs7QUFFSixTQUFLLFFBQUw7QUFDSUwsTUFBQUEsVUFBVSxDQUFDLE1BQUQsQ0FBVixHQUFxQjtBQUNqQkMsUUFBQUEsSUFBSSxFQUFFLDJCQURXO0FBRWpCSyxRQUFBQSxLQUFLLEVBQUUsQ0FBRSxXQUFGLENBRlU7QUFHakJKLFFBQUFBLGFBQWEsRUFBRSwwQ0FIRTtBQUlqQkUsUUFBQUEsT0FBTyxFQUFFLElBSlE7QUFLakJDLFFBQUFBLFFBQVEsRUFBRSxJQUxPO0FBTWpCRyxRQUFBQSxVQUFVLEVBQUUsTUFOSztBQU9qQkMsUUFBQUEsZUFBZSxFQUFFLE1BQU1HLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSCxJQUFJLENBQUNJLGlCQUFqQixDQVBOO0FBUWpCQyxRQUFBQSxZQUFZLEVBQUUsTUFBTTtBQUFFQyxVQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSw4Q0FBWixFQUE0REgsaUJBQWlCLENBQUNKLElBQUksQ0FBQ1EsTUFBTCxDQUFZLE1BQVosQ0FBRCxDQUE3RTtBQUFzRztBQVIzRyxPQUFyQjtBQVVBOztBQUVKLFNBQUssU0FBTDtBQUNJbEIsTUFBQUEsVUFBVSxDQUFDLEdBQUQsQ0FBVixHQUFrQjtBQUNkQyxRQUFBQSxJQUFJLEVBQUUsdUJBRFE7QUFFZEssUUFBQUEsS0FBSyxFQUFFLENBQUUsUUFBRjtBQUZPLE9BQWxCO0FBSUE7O0FBRUosU0FBSyxnQkFBTDtBQUNJOztBQUVKO0FBRUk7QUFwRVI7O0FBdUVBLFNBQU9OLFVBQVA7QUFDSCxDQTNFRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLkNvbW1hbmRzID0geyAgICBcbiAgICAnYnVpbGQnOiAnR2VuZXJhdGUgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscy4nLFxuICAgICdncmFwaHFsJzogJ0dlbmVyYXRlIGdyYXBocWwgc2NoZW1hcy4nLFxuICAgICdtaWdyYXRlJzogJ0NyZWF0ZSBkYXRhYmFzZSBzdHJ1Y3R1cmUuJywgICAgICAgIFxuICAgICdkYXRhc2V0JzogJ0xpc3QgYXZhaWxhYmxlIGRhdGEgc2V0LicsXG4gICAgJ2ltcG9ydCc6ICdJbXBvcnQgZGF0YSBzZXQuJyxcbiAgICAnZXhwb3J0JzogJ0V4cG9ydCBkYXRhIGZyb20gZGF0YWJhc2UuJyxcbiAgICAncmV2ZXJzZSc6ICdSZXZlcnNlIGVuZ2luZWVyaW5nIGZyb20gYSBkYXRhYnNlLicsXG4gICAgJ2xpc3RWYWxpZGF0b3JzJzogJ0xpc3QgYWxsIGJ1aWx0aW4gdmFsaWRhdG9ycy4nXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Q29tbWFuZExpbmV9IGNsaSAtIENvbW1hbmRMaW5lIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBjb21tYW5kIC0gQ29tbWFuZFxuICovXG5leHBvcnRzLmdldENvbW1hbmRPcHRpb25zID0gKGNsaSwgY29tbWFuZCkgPT4ge1xuICAgIGxldCBjbWRPcHRpb25zID0ge307XG5cbiAgICBzd2l0Y2ggKGNvbW1hbmQpIHtcbiAgICAgICAgY2FzZSAnYnVpbGQnOlxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZ3JhcGhxbCc6XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdtaWdyYXRlJzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3InXSA9IHtcbiAgICAgICAgICAgICAgICBkZXNjOiAnUmVzZXQgYWxsIGRhdGEgaWYgdGhlIGRhdGFiYXNlIGV4aXN0cycsXG4gICAgICAgICAgICAgICAgcHJvbXB0TWVzc2FnZTogJ1Jlc2V0IGV4aXN0aW5nIGRhdGFiYXNlPycsXG4gICAgICAgICAgICAgICAgcHJvbXB0RGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5xdWlyZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhbGlhczogWyAncmVzZXQnIF0sXG4gICAgICAgICAgICAgICAgYm9vbDogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrOyAgICAgICAgXG5cbiAgICAgICAgY2FzZSAnZGF0YXNldCc6IFxuICAgICAgICAgICAgY21kT3B0aW9uc1sncyddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGxpc3QnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBwcm9tcHRNZXNzYWdlOiAnUGxlYXNlIHNlbGVjdCBhIHNjaGVtYTonLFxuICAgICAgICAgICAgICAgIGlucXVpcmU6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgYWxpYXM6IFsgJ3NjaGVtYScgXSxcbiAgICAgICAgICAgICAgICBwcm9tcHRUeXBlOiAnbGlzdCcsXG4gICAgICAgICAgICAgICAgY2hvaWNlc1Byb3ZpZGVyOiAoKSA9PiBjb3JlLmdldFNjaGVtYXNJbkNvbmZpZygpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnaW1wb3J0JzpcbiAgICAgICAgICAgIGNtZE9wdGlvbnNbJ3NjaGVtYSddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIGxpc3QnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjbWRPcHRpb25zWydkYXRhc2V0J10gPSB7XG4gICAgICAgICAgICAgICAgZGVzYzogJ1RoZSBuYW1lIG9mIHRoZSBkYXRhIHNldCB0byBpbXBvcnQnLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBhbGlhczogWyAnZHMnLCAnZGF0YScgXSxcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdleHBvcnQnOlxuICAgICAgICAgICAgY21kT3B0aW9uc1snY29ubiddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgZGF0YSBzb3VyY2UgY29ubmVjdG9yJyxcbiAgICAgICAgICAgICAgICBhbGlhczogWyAnY29ubmVjdG9yJyBdLFxuICAgICAgICAgICAgICAgIHByb21wdE1lc3NhZ2U6ICdQbGVhc2Ugc2VsZWN0IHRoZSBkYXRhIHNvdXJjZSBjb25uZWN0b3I6JyxcbiAgICAgICAgICAgICAgICBpbnF1aXJlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHByb21wdFR5cGU6ICdsaXN0JyxcbiAgICAgICAgICAgICAgICBjaG9pY2VzUHJvdmlkZXI6ICgpID0+IE9iamVjdC5rZXlzKGNvcmUuY29ubmVjdGlvblN0cmluZ3MpLFxuICAgICAgICAgICAgICAgIGFmdGVySW5xdWlyZTogKCkgPT4geyBjb25zb2xlLmxvZygnVGhlIGNvbmVuY3Rpb24gc3RyaW5nIG9mIHNlbGVjdGVkIGNvbm5lY3RvcjonLCBjb25uZWN0aW9uU3RyaW5nc1tjb3JlLm9wdGlvbignY29ubicpXSk7IH0gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9OyAgICAgICAgICAgXG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXZlcnNlJzogICAgICAgIFxuICAgICAgICAgICAgY21kT3B0aW9uc1sncyddID0ge1xuICAgICAgICAgICAgICAgIGRlc2M6ICdUaGUgc2NoZW1hIHRvIHJldmVyc2UnLFxuICAgICAgICAgICAgICAgIGFsaWFzOiBbICdzY2hlbWEnIF0gICAgICAgIFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpc3RWYWxpZGF0b3JzJzpcbiAgICAgICAgICAgIGJyZWFrOyAgICBcbiAgICAgICAgXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAvL21vZHVsZSBnZW5lcmFsIG9wdGlvbnNcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBjbWRPcHRpb25zO1xufTtcblxuIl19