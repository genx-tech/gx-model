"use strict";

require("source-map-support/register");

const {
  Starters: {
    startCommand
  }
} = require('@genx/app');

const {
  _
} = require('rk-utils');

const pkg = require('../../package.json');

const AppInitiator = require('../AppInitiator');

const {
  Commands,
  getCommandOptions
} = require('./commands');

const afterCommandConfirmed = cli => {
  let cmd = cli.argv._[0];
  let options = getCommandOptions(cli, cmd);
  cli.usage.options = { ...cli.usage.options,
    ...options
  };
  cli.parse(cli.usage.options);
};

function main() {
  startCommand(app => {
    let cmd = app.commandLine;

    if (cmd.option('help')) {
      cmd.showUsage();
      return;
    }

    if (cmd.option('version')) {
      console.log(pkg.version);
      return;
    }

    let command = cmd.argv._[0];
    const appInitiator = new AppInitiator({
      app,
      cwd: process.cwd()
    });
    return appInitiator.run(command);
  }, {
    logger: {
      level: 'info'
    },
    commandName: 'geml',
    config: {
      "version": pkg.version,
      "commandLine": {
        "banner": `Gen-X entity modeling command line v${pkg.version}`,
        "program": "geml",
        "arguments": [{
          "name": "command",
          "required": true,
          "inquire": true,
          "promptType": "list",
          "promptMessage": "What command are you going to execute?",
          "choicesProvider": _.map(Commands, (desc, cmd) => ({
            name: `${cmd} - ${desc}`,
            value: cmd
          })),
          "afterInquire": afterCommandConfirmed,
          "onArgumentExists": afterCommandConfirmed
        }],
        "options": {
          "s": {
            "desc": "Silent mode",
            "alias": ["silent"],
            "bool": true,
            "default": false
          },
          "v": {
            "desc": "Show version information",
            "alias": ["version"],
            "bool": true,
            "default": false
          },
          "?": {
            "desc": "Show usage message",
            "alias": ["help"],
            "bool": true,
            "default": false
          },
          "c": {
            "desc": "Config path",
            "alias": ["conf", "config"]
          }
        },
        "silentMode": cli => cli.argv['silent'] || cli.argv['version'] || cli.argv['help'],
        "nonValidationMode": cli => cli.argv['version'] || cli.argv['help'],
        "showUsageOnError": true,
        "showArguments": true
      }
    }
  });
}

;

if (!module.parent) {
  main();
} else {
  module.exports = main;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGkvaW5kZXguanMiXSwibmFtZXMiOlsiU3RhcnRlcnMiLCJzdGFydENvbW1hbmQiLCJyZXF1aXJlIiwiXyIsInBrZyIsIkFwcEluaXRpYXRvciIsIkNvbW1hbmRzIiwiZ2V0Q29tbWFuZE9wdGlvbnMiLCJhZnRlckNvbW1hbmRDb25maXJtZWQiLCJjbGkiLCJjbWQiLCJhcmd2Iiwib3B0aW9ucyIsInVzYWdlIiwicGFyc2UiLCJtYWluIiwiYXBwIiwiY29tbWFuZExpbmUiLCJvcHRpb24iLCJzaG93VXNhZ2UiLCJjb25zb2xlIiwibG9nIiwidmVyc2lvbiIsImNvbW1hbmQiLCJhcHBJbml0aWF0b3IiLCJjd2QiLCJwcm9jZXNzIiwicnVuIiwibG9nZ2VyIiwibGV2ZWwiLCJjb21tYW5kTmFtZSIsImNvbmZpZyIsIm1hcCIsImRlc2MiLCJuYW1lIiwidmFsdWUiLCJtb2R1bGUiLCJwYXJlbnQiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxRQUFRLEVBQUU7QUFBRUMsSUFBQUE7QUFBRjtBQUFaLElBQWlDQyxPQUFPLENBQUMsV0FBRCxDQUE5Qzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBO0FBQUYsSUFBUUQsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTUUsR0FBRyxHQUFHRixPQUFPLENBQUMsb0JBQUQsQ0FBbkI7O0FBRUEsTUFBTUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBNUI7O0FBRUEsTUFBTTtBQUFFSSxFQUFBQSxRQUFGO0FBQVlDLEVBQUFBO0FBQVosSUFBa0NMLE9BQU8sQ0FBQyxZQUFELENBQS9DOztBQUVBLE1BQU1NLHFCQUFxQixHQUFJQyxHQUFELElBQVM7QUFDbkMsTUFBSUMsR0FBRyxHQUFHRCxHQUFHLENBQUNFLElBQUosQ0FBU1IsQ0FBVCxDQUFXLENBQVgsQ0FBVjtBQUNBLE1BQUlTLE9BQU8sR0FBR0wsaUJBQWlCLENBQUNFLEdBQUQsRUFBTUMs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QXVCRixHQUFHLENBQUNFLElBQUosQ0FBUyxNQUFULENBeEN6QztBQXlDWCw0QkFBb0IsSUF6Q1Q7QUEwQ1gseUJBQWlCO0FBMUNOO0FBRlg7QUFMVCxHQXJCUyxDQUFaO0FBMEVIOztBQUFBOztBQUVELElBQUksQ0FBQ3lCLE1BQU0sQ0FBQ0MsTUFBWixFQUFvQjtBQUNoQnRCLEVBQUFBLElBQUk7QUFDUCxDQUZELE1BRU87QUFDSHFCLEVBQUFBLE1BQU0sQ0FBQ0UsT0FBUCxHQUFpQnZCLElBQWpCO0FBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFN0YXJ0ZXJzOiB7IHN0YXJ0Q29tbWFuZCB9IH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHBrZyA9IHJlcXVpcmUoJy4uLy4uL3BhY2thZ2UuanNvbicpO1xuXG5jb25zdCBBcHBJbml0aWF0b3IgPSByZXF1aXJlKCcuLi9BcHBJbml0aWF0b3InKTtcblxuY29uc3QgeyBDb21tYW5kcywgZ2V0Q29tbWFuZE9wdGlvbnMgfSA9IHJlcXVpcmUoJy4vY29tbWFuZHMnKTtcblxuY29uc3QgYWZ0ZXJDb21tYW5kQ29uZmlybWVkID0gKGNsaSkgPT4ge1xuICAgIGxldCBjbWQgPSBjbGkuYXJndi5fWzBdO1xuICAgIGxldCBvcHRpb25zID0gZ2V0Q29tbWFuZE9wdGlvbnMoY2xpLCBjbWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgY2xpLnVzYWdlLm9wdGlvbnMgPSB7IC4uLmNsaS51c2FnZS5vcHRpb25zLCAuLi5vcHRpb25zIH07ICAgIFxuICAgIGNsaS5wYXJzZShjbGkudXNhZ2Uub3B0aW9ucyk7XG59O1xuXG5mdW5jdGlvbiBtYWluICgpIHtcbiAgICBzdGFydENvbW1hbmQoKGFwcCkgPT4ge1xuICAgICAgICBsZXQgY21kID0gYXBwLmNvbW1hbmRMaW5lO1xuXG4gICAgICAgIGlmIChjbWQub3B0aW9uKCdoZWxwJykpIHtcbiAgICAgICAgICAgIGNtZC5zaG93VXNhZ2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbWQub3B0aW9uKCd2ZXJzaW9uJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHBrZy52ZXJzaW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb21tYW5kID0gY21kLmFyZ3YuX1swXTtcblxuICAgICAgICBjb25zdCBhcHBJbml0aWF0b3IgPSBuZXcgQXBwSW5pdGlhdG9yKHsgIFxuICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgY3dkOiBwcm9jZXNzLmN3ZCgpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhcHBJbml0aWF0b3IucnVuKGNvbW1hbmQpO1xuICAgIH0sIHtcbiAgICAgICAgbG9nZ2VyOiB7XG4gICAgICAgICAgICBsZXZlbDogJ2luZm8nXG4gICAgICAgIH0sXG4gICAgICAgIGNvbW1hbmROYW1lOiAnZ2VtbCcsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgXCJ2ZXJzaW9uXCI6IHBrZy52ZXJzaW9uLFxuICAgICAgICAgICAgXCJjb21tYW5kTGluZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJiYW5uZXJcIjogYEdlbi1YIGVudGl0eSBtb2RlbGluZyBjb21tYW5kIGxpbmUgdiR7cGtnLnZlcnNpb259YCxcbiAgICAgICAgICAgICAgICBcInByb2dyYW1cIjogXCJnZW1sXCIsICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgXCJhcmd1bWVudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiY29tbWFuZFwiLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVxdWlyZWRcIjogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBcImlucXVpcmVcIjogdHJ1ZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb21wdFR5cGVcIjogXCJsaXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInByb21wdE1lc3NhZ2VcIjogXCJXaGF0IGNvbW1hbmQgYXJlIHlvdSBnb2luZyB0byBleGVjdXRlP1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaG9pY2VzUHJvdmlkZXJcIjogXy5tYXAoQ29tbWFuZHMsIChkZXNjLCBjbWQpID0+ICh7IG5hbWU6IGAke2NtZH0gLSAke2Rlc2N9YCwgdmFsdWU6IGNtZCB9KSksXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFmdGVySW5xdWlyZVwiOiBhZnRlckNvbW1hbmRDb25maXJtZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm9uQXJndW1lbnRFeGlzdHNcIjogYWZ0ZXJDb21tYW5kQ29uZmlybWVkXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLCAgXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zXCI6IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwic1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaWxlbnQgbW9kZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwic2lsZW50XCIgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYm9vbFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwidlwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJTaG93IHZlcnNpb24gaW5mb3JtYXRpb25cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpYXNcIjogWyBcInZlcnNpb25cIiBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib29sXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCI/XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY1wiOiBcIlNob3cgdXNhZ2UgbWVzc2FnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwiaGVscFwiIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvb2xcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFwiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIFwiY1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NcIjogXCJDb25maWcgcGF0aFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlhc1wiOiBbIFwiY29uZlwiLCBcImNvbmZpZ1wiIF1cbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInNpbGVudE1vZGVcIjogY2xpID0+IChjbGkuYXJndlsnc2lsZW50J10gfHwgY2xpLmFyZ3ZbJ3ZlcnNpb24nXSB8fCBjbGkuYXJndlsnaGVscCddKSxcbiAgICAgICAgICAgICAgICBcIm5vblZhbGlkYXRpb25Nb2RlXCI6IGNsaSA9PiAoY2xpLmFyZ3ZbJ3ZlcnNpb24nXSB8fCBjbGkuYXJndlsnaGVscCddKSxcbiAgICAgICAgICAgICAgICBcInNob3dVc2FnZU9uRXJyb3JcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInNob3dBcmd1bWVudHNcIjogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xuXG5pZiAoIW1vZHVsZS5wYXJlbnQpIHtcbiAgICBtYWluKCk7XG59IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gbWFpbjtcbn0iXX0=