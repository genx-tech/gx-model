{"version":3,"sources":["../../src/cli/commands.js"],"names":["exports","Commands","getCommandOptions","cli","command","cmdOptions","desc","alias","promptMessage","promptDefault","inquire","required","silentModeDefault","bool"],"mappings":"AAAA;;;;AAEAA,OAAO,CAACC,QAAR,GAAmB;AACf,UAAQ,gCADO;AAEf,WAAS,8CAFM;AAGf,aAAW,2BAHI;AAIf,aAAW,4BAJI;AAKf,YAAU,kBALK;AAMf,YAAU,4BANK;AAOf,aAAW;AAPI,CAAnB;;AAcAD,OAAO,CAACE,iBAAR,GAA4B,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC1C,MAAIC,UAAU,GAAG,EAAjB;;AAEA,UAAQD,OAAR;AACI,SAAK,MAAL;AACIC,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,8EADa;AAEnBC,QAAAA,KAAK,EAAE,CAAE,GAAF;AAFY,OAAvB;AAIAF,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,8BADa;AAEnBE,QAAAA,aAAa,EAAE,cAFI;AAGnBC,QAAAA,aAAa,EAAE,QAHI;AAInBC,QAAAA,OAAO,EAAE,IAJU;AAKnBC,QAAAA,QAAQ,EAAE,IALS;AAMnBC,QAAAA,iBAAiB,EAAE;AANA,OAAvB;AAQA;;AAEJ,SAAK,OAAL;AACI;;AAEJ,SAAK,SAAL;AACI;;AAEJ,SAAK,SAAL;AACIP,MAAAA,UAAU,CAAC,GAAD,CAAV,GAAkB;AACdC,QAAAA,IAAI,EAAE,uCADQ;AAEdE,QAAAA,aAAa,EAAE,0BAFD;AAGdC,QAAAA,aAAa,EAAE,KAHD;AAIdC,QAAAA,OAAO,EAAE,IAJK;AAKdC,QAAAA,QAAQ,EAAE,IALI;AAMdJ,QAAAA,KAAK,EAAE,CAAE,OAAF,CANO;AAOdM,QAAAA,IAAI,EAAE;AAPQ,OAAlB;AASA;;AAEJ,SAAK,QAAL;AACIR,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,oBADa;AAEnBK,QAAAA,QAAQ,EAAE;AAFS,OAAvB;AAIAN,MAAAA,UAAU,CAAC,SAAD,CAAV,GAAwB;AACpBC,QAAAA,IAAI,EAAE,oCADc;AAEpBC,QAAAA,KAAK,EAAE,CAAE,IAAF,EAAQ,MAAR,CAFa;AAGpBI,QAAAA,QAAQ,EAAE;AAHU,OAAxB;AAKAN,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,+BADa;AAEnBC,QAAAA,KAAK,EAAE,CAAE,kBAAF,CAFY;AAGnBM,QAAAA,IAAI,EAAE;AAHa,OAAvB;AAKA;;AAEJ,SAAK,QAAL;AACIR,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,sBADa;AAEnBK,QAAAA,QAAQ,EAAE;AAFS,OAAvB;AAIAN,MAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB;AACrBC,QAAAA,IAAI,EAAE,0BADe;AAErBC,QAAAA,KAAK,EAAE,CAAE,GAAF,CAFc;AAGrBM,QAAAA,IAAI,EAAE;AAHe,OAAzB;AAKA;;AAEJ,SAAK,SAAL;AACIR,MAAAA,UAAU,CAAC,QAAD,CAAV,GAAuB;AACnBC,QAAAA,IAAI,EAAE,uBADa;AAEnBK,QAAAA,QAAQ,EAAE;AAFS,OAAvB;AAIAN,MAAAA,UAAU,CAAC,UAAD,CAAV,GAAyB;AACrBC,QAAAA,IAAI,EAAE,0BADe;AAErBC,QAAAA,KAAK,EAAE,CAAE,GAAF,CAFc;AAGrBM,QAAAA,IAAI,EAAE;AAHe,OAAzB;AAKA;;AAEJ;AAEI;AA7ER;;AAgFA,SAAOR,UAAP;AACH,CApFD","sourcesContent":["\"use strict\";\n\nexports.Commands = {    \n    'init': 'Initialize geml configuration.',\n    'build': 'Generate database scripts and entity models.',\n    'graphql': 'Generate graphql schemas.',\n    'migrate': 'Create database structure.',            \n    'import': 'Import data set.',\n    'export': 'Export data from database.',\n    'reverse': 'Reverse engineering from a databse.'\n};\n\n/**\n * @param {CommandLine} cli - CommandLine object.\n * @param {string} command - Command\n */\nexports.getCommandOptions = (cli, command) => {\n    let cmdOptions = {};\n\n    switch (command) {\n        case 'init':\n            cmdOptions['module'] = {\n                desc: 'App module name, set this to add geml to an app module instead of the server', \n                alias: [ 'm' ]\n            };\n            cmdOptions['schema'] = {\n                desc: 'Default schema to initialize',\n                promptMessage: 'Schema name?',\n                promptDefault: 'sample',\n                inquire: true,\n                required: true,\n                silentModeDefault: 'sample'\n            };\n            break;\n\n        case 'build':\n            break;\n\n        case 'graphql':\n            break;\n\n        case 'migrate':\n            cmdOptions['r'] = {\n                desc: 'Reset all data if the database exists',\n                promptMessage: 'Reset existing database?',\n                promptDefault: false,\n                inquire: true,\n                required: true,\n                alias: [ 'reset' ],\n                bool: true\n            };\n            break;        \n\n        case 'import':\n            cmdOptions['schema'] = {\n                desc: 'The schema to list',                               \n                required: true                \n            };\n            cmdOptions['dataset'] = {\n                desc: 'The name of the data set to import',                \n                alias: [ 'ds', 'data' ],\n                required: true                \n            };\n            cmdOptions['ignore'] = {\n                desc: 'Ignore exception on duplicate',                \n                alias: [ 'ignore-duplicate' ],\n                bool: true                \n            };\n            break;\n\n        case 'export':\n            cmdOptions['schema'] = {\n                desc: 'The schema to export',\n                required: true        \n            };      \n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };            \n            break;\n\n        case 'reverse':        \n            cmdOptions['schema'] = {\n                desc: 'The schema to reverse',\n                required: true        \n            };\n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };\n            break;\n        \n        default:\n            //module general options\n            break;\n    }\n\n    return cmdOptions;\n};\n\n"],"file":"commands.js"}