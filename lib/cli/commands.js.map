{"version":3,"file":"commands.js","names":["exports","Commands","getCommandOptions","cli","command","cmdOptions","desc","promptMessage","promptDefault","inquire","required","silentModeDefault","alias","promptType","choicesProvider","argv","bool","default"],"sources":["../../src/cli/commands.js"],"sourcesContent":["\"use strict\";\n\nexports.Commands = {    \n    'init': 'Initialize geml configuration.',\n    'clean': 'Remove auto-generated files.',\n    'connect': 'Set data source connection.',\n    'build': 'Generate database scripts and entity models.',\n    'graphql': 'Generate graphql schemas.',\n    'migrate': 'Create database structure.',            \n    'import': 'Import data set.',\n    'export': 'Export data from database.',\n    'reverse': 'Reverse engineering from a databse.'\n};\n\n/**\n * @param {CommandLine} cli - CommandLine object.\n * @param {string} command - Command\n */\nexports.getCommandOptions = (cli, command) => {\n    let cmdOptions = {};\n\n    switch (command) {\n        case 'init':\n            cmdOptions['schema'] = {\n                desc: 'Default schema to initialize',\n                promptMessage: 'Schema name?',\n                promptDefault: 'sample',\n                inquire: true,\n                required: true,\n                silentModeDefault: 'sample'\n            };\n            break;\n\n        case 'connect':\n            cmdOptions['schema'] = {\n                desc: 'Schema to set up connection',\n                promptMessage: 'Schema name?',                \n                inquire: true,\n                required: true\n            };\n            cmdOptions['dbms'] = {\n                alias: [ 'data-source-type' ],\n                desc: 'Data source type to connect',\n                promptMessage: 'Data source type?',                \n                promptType: \"list\",\n                inquire: true,                \n                required: true,\n                choicesProvider: [ 'mysql', 'mongodb', 'rabbitmq'  ]\n            };\n            cmdOptions['ds'] = {\n                alias: [ 'data-source-name' ],\n                desc: 'Data source name',\n                promptMessage: 'Data source name?',                \n                promptDefault: cli => cli.argv['schema'],                \n                inquire: true,                \n                required: true\n            };\n            cmdOptions['conn'] = {\n                alias: [ 'connection-string' ],\n                desc: 'Data source connection string (like URL), e.g. mysql://localhost',\n                promptMessage: 'Connection string?',                     \n                inquire: true,                \n                required: true\n            };\n            break;    \n\n        case 'clean':\n            cmdOptions['json-only'] = {\n                desc: 'Delete intermediate files (JSON files) only',\n                bool: true,\n                default: false,\n            };\n            break;\n\n        case 'build':\n            break;\n\n        case 'graphql':\n            break;\n\n        case 'migrate':\n            cmdOptions['r'] = {\n                desc: 'Reset all data if the database exists',\n                promptMessage: 'Reset existing database?',\n                promptDefault: false,\n                inquire: true,\n                required: true,\n                alias: [ 'reset' ],\n                bool: true\n            };\n            break;        \n\n        case 'import':\n            cmdOptions['schema'] = {\n                desc: 'The schema to list',                               \n                required: true                \n            };\n            cmdOptions['dataset'] = {\n                desc: 'The name of the data set to import',                \n                alias: [ 'ds', 'data' ],\n                required: true                \n            };\n            cmdOptions['ignore'] = {\n                desc: 'Ignore exception on duplicate',                \n                alias: [ 'ignore-duplicate' ],\n                bool: true                \n            };\n            break;\n\n        case 'export':\n            cmdOptions['schema'] = {\n                desc: 'The schema to export',\n                required: true        \n            };      \n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };            \n            break;\n\n        case 'reverse':        \n            cmdOptions['schema'] = {\n                desc: 'The schema to reverse',\n                required: true        \n            };\n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };\n            break;\n        \n        default:\n            //module general options\n            break;\n    }\n\n    return cmdOptions;\n};\n\n"],"mappings":"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"}