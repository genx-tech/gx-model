{"version":3,"sources":["../../src/cli/commands.js"],"names":["exports","Commands","getCommandOptions","cli","command","cmdOptions","desc","promptMessage","promptDefault","inquire","required","silentModeDefault","alias","promptType","choicesProvider","argv","bool"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.Commands = {    \n    'init': 'Initialize geml configuration.',\n    'clean': 'Remove auto-generated files.',\n    'connect': 'Set data source connection.',\n    'build': 'Generate database scripts and entity models.',\n    'graphql': 'Generate graphql schemas.',\n    'migrate': 'Create database structure.',            \n    'import': 'Import data set.',\n    'export': 'Export data from database.',\n    'reverse': 'Reverse engineering from a databse.'\n};\n\n/**\n * @param {CommandLine} cli - CommandLine object.\n * @param {string} command - Command\n */\nexports.getCommandOptions = (cli, command) => {\n    let cmdOptions = {};\n\n    switch (command) {\n        case 'init':\n            cmdOptions['schema'] = {\n                desc: 'Default schema to initialize',\n                promptMessage: 'Schema name?',\n                promptDefault: 'sample',\n                inquire: true,\n                required: true,\n                silentModeDefault: 'sample'\n            };\n            break;\n\n        case 'connect':\n            cmdOptions['schema'] = {\n                desc: 'Schema to set up connection',\n                promptMessage: 'Schema name?',                \n                inquire: true,\n                required: true\n            };\n            cmdOptions['dbms'] = {\n                alias: [ 'data-source-type' ],\n                desc: 'Data source type to connect',\n                promptMessage: 'Data source type?',                \n                promptType: \"list\",\n                inquire: true,                \n                required: true,\n                choicesProvider: [ 'mysql', 'mongodb', 'rabbitmq'  ]\n            };\n            cmdOptions['ds'] = {\n                alias: [ 'data-source-name' ],\n                desc: 'Data source name',\n                promptMessage: 'Data source name?',                \n                promptDefault: cli => cli.argv['schema'],                \n                inquire: true,                \n                required: true\n            };\n            cmdOptions['conn'] = {\n                alias: [ 'connection-string' ],\n                desc: 'Data source connection string (like URL), e.g. mysql://localhost',\n                promptMessage: 'Connection string?',                     \n                inquire: true,                \n                required: true\n            };\n            break;    \n\n        case 'build':\n            break;\n\n        case 'graphql':\n            break;\n\n        case 'migrate':\n            cmdOptions['r'] = {\n                desc: 'Reset all data if the database exists',\n                promptMessage: 'Reset existing database?',\n                promptDefault: false,\n                inquire: true,\n                required: true,\n                alias: [ 'reset' ],\n                bool: true\n            };\n            break;        \n\n        case 'import':\n            cmdOptions['schema'] = {\n                desc: 'The schema to list',                               \n                required: true                \n            };\n            cmdOptions['dataset'] = {\n                desc: 'The name of the data set to import',                \n                alias: [ 'ds', 'data' ],\n                required: true                \n            };\n            cmdOptions['ignore'] = {\n                desc: 'Ignore exception on duplicate',                \n                alias: [ 'ignore-duplicate' ],\n                bool: true                \n            };\n            break;\n\n        case 'export':\n            cmdOptions['schema'] = {\n                desc: 'The schema to export',\n                required: true        \n            };      \n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };            \n            break;\n\n        case 'reverse':        \n            cmdOptions['schema'] = {\n                desc: 'The schema to reverse',\n                required: true        \n            };\n            cmdOptions['override'] = {\n                desc: 'Override same day output',\n                alias: [ 'f' ],\n                bool: true\n            };\n            break;\n        \n        default:\n            //module general options\n            break;\n    }\n\n    return cmdOptions;\n};\n\n"],"file":"commands.js"}