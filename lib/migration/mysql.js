"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_,
  quote
} = require('rk-utils');

class MySQLMigration {
  constructor(app, context, db) {
    this.app = app;
    this.modelPath = context.modelPath;
    this.scriptPath = context.scriptPath;
    this.db = db;
    this.dbScriptPath = path.join(this.scriptPath, this.db.driver, this.db.connector.database);
  }

  async reset_() {
    return this.db.connector.execute_(`DROP DATABASE IF EXISTS ??`, [this.db.connector.database], {
      createDatabase: true
    });
  }

  async create_(extraOptions) {
    let sqlFiles = ['entities.sql', 'relations.sql', 'procedures.sql'];
    let sqlCreate = 'CREATE DATABASE IF NOT EXISTS ??';

    if (extraOptions && !_.isEmpty(extraOptions.db)) {
      sqlCreate += ' ' + _.reduce(extraOptions.db, (r, v, k) => {
        return r + ' ' + _.upperCase(k) + ' ' + quote(v.toString(), '"');
      }, '');
    }

    let result = await this.db.connector.execute_(sqlCreate, [this.db.connector.database], {
      createDatabase: true
    });

    if (result.warningStatus == 0) {
      this.app.log('info', `Created database "${this.db.connector.database}".`);
    } else {
      this.app.log('warn', `Database "${this.db.connector.database}" exists.`);
    }

    return eachAsync_(sqlFiles, async file => {
      let sqlFile = path.join(this.dbScriptPath, file);

      if (!fs.existsSync(sqlFile)) {
        throw new Error(`Database script "${sqlFile}" not found. Try run "oolong build" first.`);
      }

      let sql = _.trim(fs.readFileSync(sqlFile, {
        encoding: 'utf8'
      }));

      if (sql) {
        result = _.castArray((await this.db.connector.execute_(sql, null, {
          multipleStatements: 1
        })));

        let warningRows = _.reduce(result, (sum, row) => {
          sum += row.warningStatus;
          return sum;
        }, 0);

        if (warningRows > 0) {
          this.app.log('warn', `${warningRows} warning(s) reported while running "${file}".`);
        } else {
          this.app.log('info', `Database scripts "${sqlFile}" run successfully.`);
        }
      }
    });
  }

  async load_(dataFile) {
    let ext = path.extname(dataFile);
    this.app.log('verbose', `Loading data file "${dataFile}" ...`);

    if (ext === '.json') {
      let data = fs.readJsonSync(dataFile, {
        encoding: 'utf8'
      });

      if (Array.isArray(data)) {
        let entityName = path.basename(dataFile, ext);
        await this._loadSingleEntityRecords_(entityName, data);
      } else {
        await this._loadMultiEntityRecords_(data);
      }
    } else if (ext === '.sql') {
      let sql = fs.readFileSync(dataFile, {
        encoding: 'utf8'
      });
      let result = await this.db.connector.execute_(sql, null, {
        multipleStatements: 1
      });
      this.app.log('verbose', `Executed SQL file: ${dataFile}`, result);
    } else if (ext === '.xlsx') {
      const Excel = require('exceljs');

      let workbook = new Excel.Workbook();
      await workbook.xlsx.readFile(dataFile);
      let data = {};
      workbook.eachSheet((worksheet, sheetId) => {
        let colKeys;
        let entityName = worksheet.name;
        let entityData = [];
        data[entityName] = entityData;
        worksheet.eachRow(function (row, rowNumber) {
          if (!colKeys) {
            colKeys = _.drop(row.values);
          } else {
            let record = _.fromPairs(_.zip(colKeys, _.drop(row.values)));

            entityData.push(record);
          }
        });
      });
      await this._loadMultiEntityRecords_(data);
    } else if (ext === '.js') {
      let executor = require(dataFile);

      await executor(this.app, this.db.connector);
    } else {
      throw new Error('Unsupported data file format.');
    }
  }

  async _loadMultiEntityRecords_(data) {
    try {
      await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');
      await eachAsync_(data, async (records, entityName) => {
        let items = Array.isArray(records) ? records : [records];
        return eachAsync_(items, item => this.db.model(entityName).create_(item, {
          $migration: true
        }));
      });
    } catch (error) {
      throw error;
    } finally {
      await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');
    }
  }

  async _loadSingleEntityRecords_(entityName, data) {
    try {
      await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');
      await eachAsync_(data, item => this.db.model(entityName).create_(item, {
        $migration: true
      }));
    } catch (error) {
      throw error;
    } finally {
      await db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');
    }
  }

}

module.exports = MySQLMigration;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,