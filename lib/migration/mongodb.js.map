{"version":3,"file":"mongodb.js","names":["path","require","_","eachAsync_","fs","MongoDbMigration","constructor","context","schemaName","connector","appModule","logger","modelPath","scriptSourcePath","dbScriptPath","join","driver","database","reset_","execute_","db","dropDatabase","create_","extraOptions","load_","dataFile","ext","extname","log","collection","basename","docs","readJsonSync","encoding","_loadData_","executor","Error","doc","insertOne_","module","exports"],"sources":["../../src/migration/mongodb.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\n/**\n * MySQL migration.\n * @class\n */\nclass MongoDbMigration {\n    /**     \n     * @param {object} context\n     * @param {Connector} connector\n     */\n    constructor(context, schemaName, connector) {\n        this.appModule = context.appModule;\n        this.logger = context.logger;\n        this.modelPath = context.modelPath;\n        this.scriptSourcePath = context.scriptSourcePath;\n        this.schemaName = schemaName;\n        this.connector = connector;\n\n        this.dbScriptPath = path.join(this.scriptSourcePath, this.connector.driver, this.connector.database);\n    }\n\n    async reset_() {\n        return this.connector.execute_(db => db.dropDatabase());\n    }\n\n    async create_(extraOptions) {        \n        \n    }\n\n    async load_(dataFile) {\n        let ext = path.extname(dataFile);\n        this.logger.log('verbose', `Loading data file \"${dataFile}\" ...`);\n        \n        let collection = path.basename(dataFile, ext);\n\n        if (ext === '.json') {\n            let docs = fs.readJsonSync(dataFile, {encoding: 'utf8'});\n\n            await this._loadData_(collection, docs);\n        } else if (ext === '.js') {           \n            let executor = require(dataFile);\n            await executor(this.appModule, this.connector);\n        } else {\n            throw new Error('Unsupported data file format.');\n        }\n    }\n\n    async _loadData_(collection, docs) { \n        await eachAsync_(docs, doc => this.connector.insertOne_(collection, doc));\n    }\n}\n\nmodule.exports = MongoDbMigration;"],"mappings":"AAAA;;;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC,CAAF;EAAKC;AAAL,IAAoBF,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;EAAEG;AAAF,IAASH,OAAO,CAAC,WAAD,CAAtB;;AAMA,MAAMI,gBAAN,CAAuB;EAKnBC,WAAW,CAACC,OAAD,EAAUC,UAAV,EAAsBC,SAAtB,EAAiC;IACxC,KAAKC,SAAL,GAAiBH,OAAO,CAACG,SAAzB;IACA,KAAKC,MAAL,GAAcJ,OAAO,CAACI,MAAtB;IACA,KAAKC,SAAL,GAAiBL,OAAO,CAACK,SAAzB;IACA,KAAKC,gBAAL,GAAwBN,OAAO,CAACM,gBAAhC;IACA,KAAKL,UAAL,GAAkBA,UAAlB;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IAEA,KAAKK,YAAL,GAAoBd,IAAI,CAACe,IAAL,CAAU,KAAKF,gBAAf,EAAiC,KAAKJ,SAAL,CAAeO,MAAhD,EAAwD,KAAKP,SAAL,CAAeQ,QAAvE,CAApB;EACH;;EAEW,MAANC,MAAM,GAAG;IACX,OAAO,KAAKT,SAAL,CAAeU,QAAf,CAAwBC,EAAE,IAAIA,EAAE,CAACC,YAAH,EAA9B,CAAP;EACH;;EAEY,MAAPC,OAAO,CAACC,YAAD,EAAe,CAE3B;;EAEU,MAALC,KAAK,CAACC,QAAD,EAAW;IAClB,IAAIC,GAAG,GAAG1B,IAAI,CAAC2B,OAAL,CAAaF,QAAb,CAAV;IACA,KAAKd,MAAL,CAAYiB,GAAZ,CAAgB,SAAhB,EAA4B,sBAAqBH,QAAS,OAA1D;IAEA,IAAII,UAAU,GAAG7B,IAAI,CAAC8B,QAAL,CAAcL,QAAd,EAAwBC,GAAxB,CAAjB;;IAEA,IAAIA,GAAG,KAAK,OAAZ,EAAqB;MACjB,IAAIK,IAAI,GAAG3B,EAAE,CAAC4B,YAAH,CAAgBP,QAAhB,EAA0B;QAACQ,QAAQ,EAAE;MAAX,CAA1B,CAAX;MAEA,MAAM,KAAKC,UAAL,CAAgBL,UAAhB,EAA4BE,IAA5B,CAAN;IACH,CAJD,MAIO,IAAIL,GAAG,KAAK,KAAZ,EAAmB;MACtB,IAAIS,QAAQ,GAAGlC,OAAO,CAACwB,QAAD,CAAtB;;MACA,MAAMU,QAAQ,CAAC,KAAKzB,SAAN,EAAiB,KAAKD,SAAtB,CAAd;IACH,CAHM,MAGA;MACH,MAAM,IAAI2B,KAAJ,CAAU,+BAAV,CAAN;IACH;EACJ;;EAEe,MAAVF,UAAU,CAACL,UAAD,EAAaE,IAAb,EAAmB;IAC/B,MAAM5B,UAAU,CAAC4B,IAAD,EAAOM,GAAG,IAAI,KAAK5B,SAAL,CAAe6B,UAAf,CAA0BT,UAA1B,EAAsCQ,GAAtC,CAAd,CAAhB;EACH;;AA5CkB;;AA+CvBE,MAAM,CAACC,OAAP,GAAiBnC,gBAAjB"}