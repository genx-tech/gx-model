{"version":3,"file":"mysql.js","names":["path","require","_","eachAsync_","quote","fs","MySQLMigration","constructor","app","context","db","modelPath","scriptPath","dbScriptPath","join","driver","schemaName","reset_","connector","execute_","database","createDatabase","create_","extraOptions","sqlFiles","sqlCreate","isEmpty","reduce","r","v","k","upperCase","toString","result","warningStatus","log","file","sqlFile","existsSync","Error","sql","trim","readFileSync","encoding","castArray","multipleStatements","warningRows","sum","row","load_","dataFile","ignoreDuplicate","ext","extname","data","readJsonSync","Array","isArray","entityName","basename","_loadSingleEntityRecords_","_loadMultiEntityRecords_","Excel","workbook","Workbook","xlsx","readFile","eachSheet","worksheet","sheetId","colKeys","name","entityData","eachRow","rowNumber","drop","values","record","fromPairs","zip","push","executor","writeIndexFile","outputDir","items","indexFile","writeFileSync","export_","entitiesToExport","skipIndexFile","ensureDirSync","exportConfig","dataFileName","Entity","model","findAll_","dataset","forOwn","rules","enabled","processRule","forEach","entity","baseFileName","writeJsonSync","meta","spaces","records","_loadRecordsByModel_","error","connOptions","insertIgnore","$skipModifiers","$update","item","opts","$migration","$retrieveDbResult","updateOne_","undefined","processed","$result","affectedRows","key","getUniqueKeyValuePairsFrom","JSON","stringify","module","exports"],"sources":["../../src/migration/mysql.js"],"sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _, eachAsync_, quote } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\n/**\n * MySQL migration.\n * @class\n */\nclass MySQLMigration {\n    /** \n     * @param {ServiceContainer} app    \n     * @param {object} context\n     * @param {Db} db\n     */\n    constructor(app, context, db) {\n        this.app = app;        \n        this.modelPath = context.modelPath;\n        this.scriptPath = context.scriptPath;        \n        this.db = db;\n\n        this.dbScriptPath = path.join(this.scriptPath, this.db.driver, this.db.schemaName);\n    }\n\n    async reset_() {\n        return this.db.connector.execute_(`DROP DATABASE IF EXISTS ??`, [ this.db.connector.database ], { createDatabase: true });\n    }\n\n    async create_(extraOptions) {        \n        let sqlFiles = [ 'entities.sql', 'relations.sql', 'procedures.sql' ];\n\n        let sqlCreate = 'CREATE DATABASE IF NOT EXISTS ??';\n\n        if (extraOptions && !_.isEmpty(extraOptions.db)) {\n            sqlCreate += ' ' + _.reduce(extraOptions.db, (r, v, k) => {\n                return r + ' ' + _.upperCase(k) + ' ' + quote(v.toString(), '\"');\n            }, '');\n        }\n        \n        let result = await this.db.connector.execute_(sqlCreate, \n            [ this.db.connector.database ], \n            { createDatabase: true }\n        );\n        \n        if (result.warningStatus == 0) {\n            this.app.log('info', `Created database \"${this.db.connector.database}\".`);\n        } else {\n            this.app.log('warn', `Database \"${this.db.connector.database}\" exists.`);\n        }                        \n\n        return eachAsync_(sqlFiles, async (file) => {\n            let sqlFile = path.join(this.dbScriptPath, file);\n            if (!fs.existsSync(sqlFile)) {\n                throw new Error(`Database script \"${sqlFile}\" not found.`);\n            }\n\n            let sql = _.trim(fs.readFileSync(sqlFile, { encoding: 'utf8' }));\n            if (sql) {\n                result = _.castArray(await this.db.connector.execute_(sql, null, { multipleStatements: 1 }));\n\n                let warningRows = _.reduce(result, (sum, row) => {\n                    sum += row.warningStatus;\n                    return sum;\n                }, 0);\n\n                if (warningRows > 0) {\n                    this.app.log('warn', `${warningRows} warning(s) reported while running \"${file}\".`);\n                } else {\n                    this.app.log('info', `Database scripts \"${sqlFile}\" run successfully.`);\n                }\n            }\n        });\n    }\n\n    async load_(dataFile, ignoreDuplicate) {\n        let ext = path.extname(dataFile);\n        this.app.log('verbose', `Loading data file \"${dataFile}\" ...`);\n\n        if (ext === '.json') {\n            let data = fs.readJsonSync(dataFile, {encoding: 'utf8'});\n\n            if (Array.isArray(data)) {\n                let entityName = path.basename(dataFile, ext);\n                await this._loadSingleEntityRecords_(entityName, data, ignoreDuplicate);\n            } else {\n                await this._loadMultiEntityRecords_(data, ignoreDuplicate);\n            }\n            this.app.log('info', `Loaded JSON data file: ${dataFile}`);\n        } else if (ext === '.sql') {\n            let sql = fs.readFileSync(dataFile, {encoding: 'utf8'});\n            let result = await this.db.connector.execute_(sql, null, { multipleStatements: 1 });\n            this.app.log('info', `Executed SQL file: ${dataFile}`, result);\n        } else if (ext === '.xlsx') {\n\n            const Excel = require('exceljs');\n            let workbook = new Excel.Workbook();\n            await workbook.xlsx.readFile(dataFile);     \n            \n            let data = {};\n\n            workbook.eachSheet((worksheet, sheetId) => {\n                let colKeys;\n\n                let entityName = worksheet.name;\n                let entityData = [];\n                data[entityName] = entityData;\n                \n                worksheet.eachRow(function(row, rowNumber) {                   \n                    \n                    if (!colKeys) {\n                        colKeys = _.drop(row.values);    \n                    } else {\n                        let record = _.fromPairs(_.zip(colKeys, _.drop(row.values)));\n                        entityData.push(record);\n                    }\n                });\n            });\n\n            await this._loadMultiEntityRecords_(data);\n\n            this.app.log('info', `Imported excel data file: ${dataFile}`);\n        } else if (ext === '.js') {           \n            let executor = require(dataFile);\n            await executor(this.app, this.db.connector);\n\n            this.app.log('info', `Ran data script: ${dataFile}`);\n        } else {\n            throw new Error('Unsupported data file format.');\n        }\n    }\n\n    writeIndexFile(outputDir, items) {\n        const indexFile = path.join(outputDir, 'index.list');\n\n        fs.writeFileSync(indexFile, items.join('\\n'), 'utf8');\n        this.app.log('info', 'Generated data files list: ' + indexFile);\n    }\n\n    async export_(entitiesToExport, outputDir, skipIndexFile) {\n        fs.ensureDirSync(outputDir);\n\n        const items = [];\n\n        await eachAsync_(entitiesToExport, async (exportConfig, dataFileName) => {\n            const entityName = exportConfig.entityName || dataFileName;\n            this.app.log('verbose', 'Exporting data of entity: ' + entityName);\n\n            const Entity = this.db.model(entityName);\n            const data = await Entity.findAll_(exportConfig.dataset);\n\n            _.forOwn(exportConfig.rules, (enabled, name) => {\n                if (enabled) {\n                    const processRule = require(`./rules/${name}.js`);\n                    data.forEach(entity => processRule(this.db, Entity, entity));\n                }                    \n            });\n\n            const baseFileName = `${dataFileName}.json`;\n            items.push(baseFileName);\n\n            const dataFile = path.join(outputDir, baseFileName);\n\n            fs.writeJsonSync(dataFile, {\n                [Entity.meta.name]: data\n            }, { spaces: 4 });\n\n            this.app.log('info', 'Generated entity data file: ' + dataFile);\n        });\n\n        if (!skipIndexFile) {\n            this.writeIndexFile(outputDir, items);\n        }\n        \n        return items;\n    }\n\n    async _loadMultiEntityRecords_(data, ignoreDuplicate) {        \n\n        try {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');\n\n            await eachAsync_(data, async (records, entityName) => {                \n                let items = Array.isArray(records) ? records : [ records ];\n                return this._loadRecordsByModel_(entityName, items, ignoreDuplicate);\n            });\n        } catch (error) {\n            throw error;\n        } finally {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');\n        }\n    }\n\n    async _loadSingleEntityRecords_(entityName, data, ignoreDuplicate) {\n        try {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=0;');\n\n            await this._loadRecordsByModel_(entityName, data, ignoreDuplicate);\n        } catch (error) {\n            throw error;\n        } finally {\n            await this.db.connector.execute_('SET FOREIGN_KEY_CHECKS=1;');\n        }\n    }\n\n    async _loadRecordsByModel_(entityName, items, ignoreDuplicate) {\n        const connOptions = {};\n        if (ignoreDuplicate) {\n            connOptions.insertIgnore = true;\n        }\n\n        const Entity = this.db.model(entityName);\n\n        return eachAsync_(items, async ({ $skipModifiers, $update, ...item }) => {\n            const opts = { $migration: true, $skipModifiers, $retrieveDbResult: true };\n\n            if ($update) {\n                await Entity.updateOne_(item, undefined, connOptions);\n            } else {                \n                const processed = await Entity.create_(item, opts, connOptions);\n                if (opts.$result.affectedRows === 0) {\n                    const key = Entity.getUniqueKeyValuePairsFrom(processed);\n                    this.app.log('info', `Duplicate record ${JSON.stringify(key)} is ignored.`);\n                }       \n            }                 \n        });  \n    }\n}\n\nmodule.exports = MySQLMigration;"],"mappings":"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"}