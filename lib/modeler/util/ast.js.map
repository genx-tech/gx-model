{"version":3,"sources":["../../../src/modeler/util/ast.js"],"names":["_","require","escodegen","esprima","AST_OBJECT_TYPES","astParams","params","Array","isArray","map","p","astId","isPlainObject","type","oolType","defaultValue","name","astLiteral","Error","JSON","stringify","mapArgs","args","isEmpty","a","astValue","mapBody","body","astBlock","astProgram","strict","astExpression","astRequire","varName","requirePath","isObjDestruct","astObjPat","astCall","astLeadingComments","comment","length","astVarDeclare","left","right","isConstant","isNil","astClassDeclare","className","superClassName","ast","astMemberMethod","generator","async","isStatic","astAnonymousFunction","join","last","astIf","test","consequent","alternate","astBinExp","operator","astLogicalExp","functionName","astVarRef","astYield","target","delegate","astAwait","astArrayAccess","index","elementStyle","split","result","pop","astThis","keys","k","astMember","key","any","shorthand","startsWith","value","e","indexOf","literal","tokenize","regex","pattern","flags","props","forOwn","push","isObject","astAddMember","obj","member","properties","astPushInBody","expr","concat","castArray","astFunction","astArrowFunction","astMatchObject","idList","id","astAssign","astConditional","astThrow","astNot","astReturn","val","astToCode","generate","format","indent","style","base","adjustMultilineComment","newline","space","json","renumber","hexadecimal","quotes","escapeless","compact","parentheses","semicolons","safeConcatenation","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\n/**\n * @module\n * @ignore\n */\n\nconst { _ } = require('@genx/july');\nconst escodegen = require('escodegen');\nconst esprima = require('esprima');\n\nconst AST_OBJECT_TYPES = [\n    'ThisExpression',\n    'MemberExpression',\n    'BinaryExpression',\n    'UnaryExpression',\n    'ArrowFunctionExpression',\n    'FunctionExpression',\n    'ArrayExpression',\n    'ObjectExpression',\n    'CallExpression',\n    'YieldExpression',\n    'AwaitExpression',\n    'AssignmentExpression',\n    'Literal',\n    'Identifier'\n];\n\nfunction astParams(params) {\n    params = Array.isArray(params) ? params : [ params ];\n\n    return params.map(p => {\n         if (typeof p === 'string') {\n             return astId(p);\n         }\n\n        if (_.isPlainObject(p)) {\n            if (p.type === 'Identifier' || p.type === 'AssignmentPattern') {\n                return p;\n            }\n\n            if (p.oolType === 'Parameter') {\n                if (p.defaultValue) {\n                    return {\n                        \"type\": \"AssignmentPattern\",\n                        \"left\": {\n                            \"type\": \"Identifier\",\n                            \"name\": p.name\n                        },\n                        \"right\": astLiteral(p.defaultValue)\n                    };\n                }\n\n                return astId(p.name);\n            }\n        }\n\n        throw new Error('Invalid param: ' + JSON.stringify(p));\n    });\n}\n\nfunction mapArgs(args) {\n    args = Array.isArray(args) ? args : [ args ];\n\n    if (_.isEmpty(args)) return [];\n\n    return args.map(a => {\n        if (_.isPlainObject(a) && 'type' in a) {\n            return a;\n        }\n\n        return astValue(a);\n    });\n}\n\nfunction mapBody(body) {\n    if (Array.isArray(body)) {\n        return astBlock(body);\n    }\n    \n    if (_.isPlainObject(body) && 'type' in body) {\n        return body;\n    }\n\n    return astValue(body);\n}\n\nfunction astProgram(strict = true) {\n    return {\n        \"type\": \"Program\",\n        \"body\": strict ? [astExpression(astValue('use strict'))] : [],\n        \"sourceType\": \"script\"\n    };\n}\n\nfunction astRequire(varName, requirePath, isObjDestruct = false) {\n    return {\n        \"type\": \"VariableDeclaration\",\n        \"declarations\": [\n            {\n                \"type\": \"VariableDeclarator\",\n                \"id\": isObjDestruct ? astObjPat(varName) : astId(varName),\n                \"init\": astCall('require', [ astValue(requirePath) ])\n            }\n        ],\n        \"kind\": \"const\"\n    };\n}\n\nfunction astLeadingComments(comment, type = 'Line') {\n    return comment ? { \"leadingComments\": [\n        {\n            \"type\": type,\n            \"value\": comment,\n            \"range\": [\n                1,\n                comment.length+3\n            ]\n        }\n    ]} : {};\n}\n\nfunction astVarDeclare(left, right, isConstant = false, isObjDestruct = false, comment = false) {\n    return {\n        \"type\": \"VariableDeclaration\",\n        \"declarations\": [\n            {\n                \"type\": \"VariableDeclarator\",\n                \"id\": isObjDestruct ? astObjPat(left) : astId(left),\n                \"init\": _.isNil(right) ? null : astValue(right)\n            }\n        ],\n        \"kind\": isConstant ? \"const\" : \"let\",\n        ...astLeadingComments(comment)\n    };\n}\n\nfunction astClassDeclare(className, superClassName, body, comment = false) {\n    let ast = {\n        \"type\": \"ClassDeclaration\",\n        \"id\": astId(className),\n        ...(comment ? astLeadingComments(`*\\n * ${comment}\\n * @class\\n `, 'Block') : {})\n    };\n\n    if (superClassName) {\n        ast['superClass'] = astId(superClassName);\n    }\n\n    ast['body'] = {\n        \"type\": \"ClassBody\",\n        \"body\": body ? (Array.isArray(body) ? body : [ body ]) : []\n    };\n\n    return ast;\n}\n\nfunction astMemberMethod(name, params, body, generator = false, async = false, isStatic = false, comment = false) {\n    return {\n        \"type\": \"MethodDefinition\",\n        \"key\": astId(name),\n        \"computed\": false,\n        \"value\": astAnonymousFunction(params, body, generator, async),\n        \"kind\": \"method\",\n        \"static\": isStatic,\n        //\"*\\n * \\n * @param identity\\n * @param password\\n * @returns {*}\\n \"\n        ...(comment ? astLeadingComments(`*\\n * ${comment}${params.map(p => `\\n * @param ${p}`).join('')}${Array.isArray(body) && _.last(body).type === 'ReturnStatement' ? '\\n * @returns {*}' : ''}\\n `, 'Block') : {})\n    };\n}\n\nfunction astIf(test, consequent, alternate, comment = false) {\n    return {\n        \"type\": \"IfStatement\",\n        \"test\": astValue(test),\n        \"consequent\": mapBody(consequent),\n        \"alternate\": _.isNil(alternate) ? null : mapBody(alternate),\n        ...astLeadingComments(comment)\n    };\n}\n\nfunction astBinExp(left, operator, right) {\n    return {\n        \"type\": \"BinaryExpression\",\n        \"operator\": operator,\n        \"left\": astValue(left),\n        \"right\": astValue(right)\n    }\n}\n\nfunction astLogicalExp(left, operator, right) {\n    return {\n        \"type\": \"LogicalExpression\",\n        \"operator\": operator,\n        \"left\": astValue(left),\n        \"right\": astValue(right)\n    }\n}\n\nfunction astCall(functionName, args) {\n    return {\n        \"type\": \"CallExpression\",\n        \"callee\": _.isPlainObject(functionName) ? functionName : astVarRef(functionName),\n        \"arguments\": mapArgs(args)\n    };\n}\n\nfunction astYield(target, delegate = false) {\n    return {\n        \"type\": \"YieldExpression\",\n        \"argument\": target,\n        \"delegate\": delegate\n    };\n}\n\nfunction astAwait(functionName, args) {\n    return {\n        \"type\": \"AwaitExpression\",\n        \"argument\": astCall(functionName, args)\n    };\n}\n\nfunction astArrayAccess(name, index) {\n    return {\n        \"type\": \"MemberExpression\",\n        \"computed\": true,\n        \"object\": astVarRef(name),\n        \"property\": {\n            \"type\": \"Literal\",\n            \"value\": index,\n            \"raw\": `${index}`\n        }\n    }\n}\n\nfunction astVarRef(name, elementStyle = false) {\n    if (_.isPlainObject(name)) {\n        if (name.type === 'MemberExpression' || name.type === 'Identifier') {\n            return name;\n        }\n\n        if (name.oolType === 'ObjectReference') {\n            return astVarRef(name.name, elementStyle);\n        }\n\n        throw new Error('Invalid reference: ' + JSON.stringify(name));\n    }\n\n    let p = name.split('.');\n    if (p.length > 1) {\n        //p.reverse();\n        let result = {\n            \"type\": \"MemberExpression\",\n            \"computed\": elementStyle,\n            \"property\": elementStyle ? astLiteral(p.pop()) : astId(p.pop())\n        };\n\n        let last = result;\n\n        while (p.length > 1) {\n            last[\"object\"] = {\n                \"type\": \"MemberExpression\",\n                \"computed\": elementStyle,\n                \"property\": elementStyle ? astLiteral(p.pop()) : astId(p.pop())\n            };\n\n            last = last[\"object\"];\n        }\n\n        last[\"object\"] = p[0] === 'this' \n            ? astThis()\n            : astId(p[0]);\n\n        return result;\n    } else {\n        return astId(name);\n    }\n}\n\nfunction astThis() {\n    return { \"type\": \"ThisExpression\" };\n}\n\nfunction astId(name) {\n    if (typeof name === 'string') {\n        return {\n            \"type\": \"Identifier\",\n            \"name\": name\n        };\n    } else if (_.isPlainObject(name) && name.type === 'Identifier') {\n        return name;\n    }\n\n    throw new Error('Invalid identifier name: ' + JSON.stringify(name));\n}\n\nfunction astObjPat(keys) {\n    return {\n        \"type\": \"ObjectPattern\",\n        \"properties\": _.map(keys, (k) => ({\n            \"type\": \"Property\",\n            \"key\": astId(k),\n            \"computed\": false,\n            \"value\": astId(k),\n            \"kind\": \"init\",\n            \"method\": false,\n            \"shorthand\": true\n        }))\n    };\n}\n\nfunction astMember(key, any, shorthand = false) {\n    return {\n        \"type\": \"Property\",\n        \"key\": key.startsWith(':') ? astLiteral(key) : astId(key),\n        \"computed\": false,\n        \"value\": any,\n        \"kind\": \"init\",\n        \"method\": false,\n        \"shorthand\": shorthand\n    };\n}\n\nfunction astValue(value) {\n    if (Array.isArray(value)) {\n        return {\n            \"type\": \"ArrayExpression\",\n            \"elements\": _.map(value, e => astValue(e))\n        };\n    }\n\n    if (_.isPlainObject(value)) {\n        if (AST_OBJECT_TYPES.indexOf(value.type) !== -1) {\n            return value;\n        }\n\n        if (value.oolType === 'ObjectReference') {\n            return astVarRef(value.name, true);\n        }\n\n        if (value.oolType === 'RegExp') {\n            let [ literal ] = esprima.tokenize(value.value);\n            return {\n                \"type\": \"NewExpression\",\n                \"callee\": {\n                    \"type\": \"Identifier\",\n                    \"name\": \"RegExp\"\n                },\n                \"arguments\": [\n                    astLiteral(literal.regex.pattern),\n                    ...(literal.regex.flags ? [ astLiteral(literal.regex.flags) ] : [])\n                ]\n            };\n        }\n\n        let props = [];\n\n        _.forOwn(value, (any, key) => {\n            props.push(astMember(key, astValue(any)));\n        });\n\n        return {\n            \"type\": \"ObjectExpression\",\n            \"properties\": props\n        };\n    }\n\n    if (_.isObject(value)) {\n        throw new Error('Only plain object supported. Given: ' + JSON.stringify(value));\n    }\n\n    return astLiteral(value);\n}\n\nfunction astLiteral(value) {\n    return {\n        \"type\": \"Literal\",\n        \"value\": value,\n        \"raw\": JSON.stringify(value)\n    };\n}\n\nfunction astAddMember(obj, member) {\n    obj.properties.push(member);\n}\n\nfunction astPushInBody(obj, expr) {\n    if (Array.isArray(obj.body)) {\n        obj.body = obj.body.concat(_.castArray(expr));\n    } else {\n        obj.body.body = obj.body.body.concat(_.castArray(expr));\n    }\n}\n\nfunction astFunction(name, params, body, generator = false, async = false) {\n    return {\n        \"type\": \"FunctionDeclaration\",\n        \"id\": astId(name),\n        \"generator\": generator,\n        \"expression\": false,\n        \"async\": async,\n        \"defaults\": [],\n        \"params\": astParams(params),\n        \"body\": astBlock(body)\n    };\n}\n\nfunction astAnonymousFunction(params, body, generator = false, async = false) {\n    return {\n        \"type\": \"FunctionExpression\",\n        \"id\": null,\n        \"params\": astParams(params),\n        \"defaults\": [],\n        \"body\": astBlock(body),\n        \"generator\": generator,\n        \"expression\": false,\n        \"async\": async\n    };\n}\n\nfunction astArrowFunction(params, body, generator = false, async = false) {\n    return {\n        \"type\": \"ArrowFunctionExpression\",\n        \"id\": null,\n        \"params\": astParams(params),\n        \"body\": mapBody(body),\n        \"generator\": generator,\n        \"expression\": true,\n        \"async\": async\n    }\n}\n\nfunction astBlock(body) {\n    return {\n        \"type\": \"BlockStatement\",\n        \"body\": Array.isArray(body) ? body : [ body ]\n    };\n}\n\nfunction astMatchObject(idList, right, isConstant = true) {\n    return {\n        \"type\": \"VariableDeclaration\",\n        \"declarations\": [\n            {\n                \"type\": \"VariableDeclarator\",\n                \"id\": {\n                    \"type\": \"ObjectPattern\",\n                    \"properties\": _.map(idList, id => astMember(id, astId(id), true))\n                },\n                \"init\": right\n            }\n        ],\n        \"kind\": isConstant ? \"const\" : \"let\"\n    };\n}\n\nfunction astExpression(expr, comment = false) {\n    return {\n        \"type\": \"ExpressionStatement\",\n        \"expression\": expr,\n        ...astLeadingComments(comment)\n    };\n}\n\nfunction astAssign(left, right, comment = false) {\n    return astExpression({\n        \"type\": \"AssignmentExpression\",\n        \"operator\": \"=\",\n        \"left\": astVarRef(left),\n        \"right\": astValue(right)\n    }, comment);\n}\n\nfunction astConditional(test, consequent, alternate) {\n    return {\n        \"type\": \"ConditionalExpression\",\n        \"test\": astValue(test),\n        \"consequent\": astValue(consequent),\n        \"alternate\": astValue(alternate)\n    }\n}\n\nfunction astThrow(name, args) {\n    return {\n        \"type\": \"ThrowStatement\",\n        \"argument\": {\n            \"type\": \"NewExpression\",\n            \"callee\": astVarRef(name),\n            \"arguments\": mapArgs(args)\n        }\n    };\n}\n\nfunction astNot(expr) {\n    return {\n        \"type\": \"UnaryExpression\",\n        \"operator\": \"!\",\n        \"argument\": astValue(expr),\n        \"prefix\": true\n    };\n}\n\nfunction astReturn(val) {\n    return {\n        \"type\": \"ReturnStatement\",\n        \"argument\": astValue(val)\n    };\n}\n\nfunction astToCode(ast) {       \n    return escodegen.generate(ast, {\n        format: {\n            indent: {\n                style: '    ',\n                base: 0,\n                adjustMultilineComment: false\n            },\n            newline: '\\n',\n            space: ' ',\n            json: false,\n            renumber: false,\n            hexadecimal: false,\n            quotes: 'single',\n            escapeless: false,\n            compact: false,\n            parentheses: true,\n            semicolons: true,\n            safeConcatenation: false\n        },\n        comment: true\n    });\n}\n\nmodule.exports = {\n    astProgram,\n    astRequire,\n    astVarDeclare,\n    astClassDeclare,\n    astMemberMethod,\n    astCall,\n    astYield,\n    astAwait,\n    astThis,\n    astId,\n    astVarRef,\n    astValue,\n    astFunction,\n    astAnonymousFunction,\n    astArrowFunction,\n    astIf,\n    astConditional,\n    astBinExp,\n    astLogicalExp,\n    astBlock,\n    astMatchObject,\n    astExpression,\n    astAssign,\n    astAddMember,\n    astMember,\n    astPushInBody,\n    astThrow,\n    astNot,\n    astReturn,\n    astLiteral,\n    astParams,\n    astArrayAccess,\n    astToCode\n};"],"file":"ast.js"}