{"version":3,"file":"Modeler.js","names":["EventEmitter","require","path","_","quote","pushIntoBucket","get","naming","bin2Hex","fs","GemlUtils","pluralize","isDotSeparateName","extractDotSeparateName","Entity","Types","UNSUPPORTED_DEFAULT_VALUE","Set","MySQLModeler","constructor","context","linker","connector","dbOptions","outputPath","scriptPath","_events","_dbOptions","db","mapKeys","value","key","upperCase","table","_references","_relationEntities","_processedRef","modeling","schema","schemaToConnector","skipGeneration","log","name","modelingSchema","clone","pendingEntities","Object","keys","entities","length","entityName","shift","entity","isEmpty","info","associations","assocs","_preProcessAssociations","assocNames","reduce","result","v","forEach","assoc","_processAssociation","emit","sqlFilesDir","join","dbFilePath","fkFilePath","tableSQL","relationSQL","data","each","assert","addIndexes","complianceCheck","errors","message","warnings","Error","features","forOwn","f","featureName","Array","isArray","ff","_featureReducer","_createTableStatement","dataSet","runtimeEnv","records","entityData","record","isPlainObject","fields","keyField","auto","defaultByDb","translateOolValue","gemlModule","push","assign","nodes","refs","srcEntityName","ref","_addForeignKeyStatement","_writeFile","initIdxFiles","envData","entitiesData","initFileName","pathNodes","initFilePath","idxFilePath","JSON","stringify","list","filePath","manual","existsSync","lines","readFileSync","split","line","startsWith","concat","funcSQL","spFilePath","_toColumnReference","oorType","_translateJoinCondition","localField","anchor","remoteField","map","rf","ret","by","withExtra","_oolConditionToQueryCondition","with","$and","_getAllRelatedFields","undefined","srcField","type","destEntity","entityKeyField","getKeyField","destEntityName","destEntityNameAsFieldName","destSchemaName","actualDestEntityName","destSchema","schemas","linked","ensureGetEntity","destKeyField","includes","excludes","types","association","cb","remoteFields","isNil","indexOf","backRef","getReferenceTo","connectedByParts","connectedByField","connEntityName","entityNaming","tag1","tag2","has","connectedByParts2","connectedByField2","connEntity","_addRelationEntity","_updateRelationEntity","localFieldName","addAssociation","on","field","remoteFieldName","add","hasFeature","deletionCheck","oolType","operator","left","right","prefixNaming","connBackRef1","connBackRef2","src","dest","destFieldName","referencedField","tag","destField","hasField","joinOn","addAssocField","fieldProps","localFieldObj","constraints","constraintOnUpdate","onUpdate","constraintOnDelete","onDelete","optional","_addReference","oolCon","_translateReference","$eq","$ne","arg","argument","$or","asKey","base","other","translated","console","refName","leftField","rightField","lf","refs4LeftEntity","found","find","item","_getReferenceOfField","reference","_hasReferenceOfField","_getReferenceBetween","_hasReferenceBetween","feature","generator","autoIncrementId","once","extraOpts","startFrom","isCreateTimestamp","isUpdateTimestamp","changeLogSettings","deploymentSettings","dataSource","content","ensureFileSync","writeFileSync","relationEntityName","entity1Name","entity2Name","entity1RefField","entity2RefField","entityInfo","indexes","unique","link","addEntity","relationEntity","entity1","entity2","hasRefToEntity1","hasRefToEntity2","keyEntity1","keyEntity2","allCascade","oolOpToSql","op","oolToSql","doc","ool","params","isMemberAccess","p","upperFirst","entityNode","parseReferenceInDocument","alias","quoteIdentifier","_orderByToSql","ascend","_viewDocumentToSQL","view","sql","cloneDeep","getDocumentHierarchy","colList","joins","_buildViewSelect","selectBy","select","groupBy","col","orderBy","skip","limit","columnDefinition","quoteListOrValue","index","substr","extraProps","props","relation","refTable","schemaName","refEntityName","targetConnector","database","foreignKeyFieldNaming","leftPart","camelCase","rightPart","pascalCase","endsWith","quoteString","str","replace","obj","isProc","intColumnDefinition","floatColumnDefinition","textColumnDefinition","boolColumnDefinition","binaryColumnDefinition","datetimeColumnDefinition","enumColumnDefinition","columnNullable","defaultValue","digits","unsigned","exact","totalDigits","bytes","double","decimalDigits","fixedLength","maxLength","range","values","hasOwnProperty","createByDb","updateByDb","tokenName","toUpperCase","BOOLEAN","sanitize","isInteger","toString","parseInt","isNumber","parseFloat","DATETIME","toSQL","includeOffset","removeTableNamePrefix","removeTablePrefix","trim","snakeCase","trimEnd","module","exports"],"sources":["../../../../src/modeler/database/mysql/Modeler.js"],"sourcesContent":["\"use strict\";\n\nconst EventEmitter = require(\"events\");\nconst path = require(\"path\");\n\nconst { _, quote, pushIntoBucket, get, naming, bin2Hex } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nconst GemlUtils = require(\"../../../lang/GemlUtils\");\nconst { pluralize, isDotSeparateName, extractDotSeparateName } = GemlUtils;\nconst Entity = require(\"../../../lang/Entity\");\nconst { Types } = require(\"@genx/data\");\n\nconst UNSUPPORTED_DEFAULT_VALUE = new Set([\"BLOB\", \"TEXT\", \"JSON\", \"GEOMETRY\"]);\n\n/**\n * Ooolong database modeler for mysql db.\n * @class\n */\nclass MySQLModeler {\n    /**\n     * @param {object} context\n     * @property {Linker} context.linker - Geml DSL linker\n     * @property {string} context.scriptPath - Generated script path\n     * @param {object} dbOptions\n     * @property {object} dbOptions.db\n     * @property {object} dbOptions.table\n     */\n    constructor(context, linker, connector, dbOptions) {\n        this.linker = linker;\n        this.outputPath = context.scriptPath;\n        this.connector = connector;\n\n        this._events = new EventEmitter();\n\n        this._dbOptions = dbOptions\n            ? {\n                  db: _.mapKeys(dbOptions.db, (value, key) => _.upperCase(key)),\n                  table: _.mapKeys(dbOptions.table, (value, key) => _.upperCase(key)),\n              }\n            : {};\n\n        this._references = {};\n        this._relationEntities = {};\n        this._processedRef = new Set();\n    }\n\n    modeling(schema, schemaToConnector, skipGeneration) {\n        if (!skipGeneration) {\n            this.linker.log(\"info\", 'Generating mysql scripts for schema \"' + schema.name + '\"...');\n        }\n\n        let modelingSchema = schema.clone();\n\n        this.linker.log(\"debug\", \"Building relations...\");\n\n        let pendingEntities = Object.keys(modelingSchema.entities);\n\n        while (pendingEntities.length > 0) {\n            let entityName = pendingEntities.shift();\n            let entity = modelingSchema.entities[entityName];\n\n            if (!_.isEmpty(entity.info.associations)) {\n                this.linker.log(\"debug\", `Processing associations of entity \"${entityName}\"...`);\n\n                let assocs = this._preProcessAssociations(entity);\n\n                let assocNames = assocs.reduce((result, v) => {\n                    result[v] = v;\n                    return result;\n                }, {});\n\n                entity.info.associations.forEach((assoc) =>\n                    this._processAssociation(modelingSchema, entity, assoc, assocNames, pendingEntities)\n                );\n            }\n        }\n\n        this._events.emit(\"afterRelationshipBuilding\");\n\n        // build SQL scripts\n        // change from database name to schema name\n        // let sqlFilesDir = path.join(\"mysql\", this.connector.database);   \n        let sqlFilesDir = path.join(\"mysql\", schema.name);        \n        let dbFilePath = path.join(sqlFilesDir, \"entities.sql\");\n        let fkFilePath = path.join(sqlFilesDir, \"relations.sql\");\n\n        let tableSQL = \"\",\n            relationSQL = \"\",\n            data = {};\n\n        //let mapOfEntityNameToCodeName = {};\n\n        _.each(modelingSchema.entities, (entity, entityName) => {\n            assert: entityName === entity.name;\n            //mapOfEntityNameToCodeName[entityName] = entity.code;\n\n            entity.addIndexes();\n\n            let result = MySQLModeler.complianceCheck(entity);\n            if (result.errors.length) {\n                let message = \"\";\n                if (result.warnings.length > 0) {\n                    message += \"Warnings: \\n\" + result.warnings.join(\"\\n\") + \"\\n\";\n                }\n                message += result.errors.join(\"\\n\");\n\n                throw new Error(message);\n            }\n\n            if (entity.features) {\n                _.forOwn(entity.features, (f, featureName) => {\n                    if (Array.isArray(f)) {\n                        f.forEach((ff) => this._featureReducer(modelingSchema, entity, featureName, ff));\n                    } else {\n                        this._featureReducer(modelingSchema, entity, featureName, f);\n                    }\n                });\n            }\n\n            if (!skipGeneration) {\n                tableSQL += this._createTableStatement(entityName, entity /*, mapOfEntityNameToCodeName*/) + \"\\n\";\n\n                if (entity.info.data) {\n                    entity.info.data.forEach(({ dataSet, runtimeEnv, records }) => {\n                        //intiSQL += `-- Initial data for entity: ${entityName}\\n`;\n\n                        let entityData = [];\n\n                        if (Array.isArray(records)) {\n                            records.forEach((record) => {\n                                if (!_.isPlainObject(record)) {\n                                    let fields = Object.keys(entity.fields);\n                                    if (fields.length !== 2) {\n                                        throw new Error(\n                                            `Invalid data syntax: entity \"${entity.name}\" has more than 2 fields.`\n                                        );\n                                    }\n\n                                    let keyField = entity.fields[fields[0]];\n\n                                    if (!keyField.auto && !keyField.defaultByDb) {\n                                        throw new Error(\n                                            `The key field \"${entity.name}\" has no default value or auto-generated value.`\n                                        );\n                                    }\n\n                                    record = { [fields[1]]: this.linker.translateOolValue(entity.gemlModule, record) };\n                                } else {\n                                    record = this.linker.translateOolValue(entity.gemlModule, record);\n                                }\n\n                                entityData.push(record);\n                            });\n                        } else {\n                            _.forOwn(records, (record, key) => {\n                                if (!_.isPlainObject(record)) {\n                                    let fields = Object.keys(entity.fields);\n                                    if (fields.length !== 2) {\n                                        throw new Error(\n                                            `Invalid data syntax: entity \"${entity.name}\" has more than 2 fields.`\n                                        );\n                                    }\n\n                                    record = {\n                                        [entity.key]: key,\n                                        [fields[1]]: this.linker.translateOolValue(entity.gemlModule, record),\n                                    };\n                                } else {\n                                    record = Object.assign(\n                                        { [entity.key]: key },\n                                        this.linker.translateOolValue(entity.gemlModule, record)\n                                    );\n                                }\n\n                                entityData.push(record);\n                                //intiSQL += 'INSERT INTO `' + entityName + '` SET ' + _.map(record, (v,k) => '`' + k + '` = ' + JSON.stringify(v)).join(', ') + ';\\n';\n                            });\n                        }\n\n                        if (!_.isEmpty(entityData)) {\n                            dataSet || (dataSet = \"_init\");\n                            runtimeEnv || (runtimeEnv = \"default\");\n\n                            let nodes = [dataSet, runtimeEnv];\n\n                            nodes.push(entityName);\n\n                            let key = nodes.join(\".\");\n\n                            pushIntoBucket(data, key, entityData, true);\n                        }\n                    });\n\n                    //intiSQL += '\\n';\n                }\n            }\n        });\n\n        if (!skipGeneration) {\n            _.forOwn(this._references, (refs, srcEntityName) => {\n                _.each(refs, (ref) => {\n                    relationSQL +=\n                        this._addForeignKeyStatement(\n                            srcEntityName,\n                            ref,\n                            schemaToConnector /*, mapOfEntityNameToCodeName*/\n                        ) + \"\\n\";\n                });\n            });\n\n            this._writeFile(path.join(this.outputPath, dbFilePath), tableSQL);\n            this._writeFile(path.join(this.outputPath, fkFilePath), relationSQL);\n\n            let initIdxFiles = {};\n\n            if (!_.isEmpty(data)) {\n                _.forOwn(data, (envData, dataSet) => {\n                    _.forOwn(envData, (entitiesData, runtimeEnv) => {\n                        _.forOwn(entitiesData, (records, entityName) => {\n                            let initFileName = `0-${entityName}.json`;\n\n                            let pathNodes = [sqlFilesDir, \"data\", dataSet || \"_init\"];\n\n                            if (runtimeEnv !== \"default\") {\n                                pathNodes.push(runtimeEnv);\n                            }\n\n                            let initFilePath = path.join(...pathNodes, initFileName);\n                            let idxFilePath = path.join(...pathNodes, \"index.list\");\n\n                            pushIntoBucket(initIdxFiles, [idxFilePath], initFileName);\n\n                            this._writeFile(\n                                path.join(this.outputPath, initFilePath),\n                                JSON.stringify({ [entityName]: records }, null, 4)\n                            );\n                        });\n                    });\n                });\n            }\n\n            //console.dir(initIdxFiles, {depth: 10});\n\n            _.forOwn(initIdxFiles, (list, filePath) => {\n                let idxFilePath = path.join(this.outputPath, filePath);\n\n                let manual = [];\n\n                if (fs.existsSync(idxFilePath)) {\n                    let lines = fs.readFileSync(idxFilePath, \"utf8\").split(\"\\n\");\n                    lines.forEach((line) => {\n                        if (!line.startsWith(\"0-\")) {\n                            manual.push(line);\n                        }\n                    });\n                }\n\n                this._writeFile(idxFilePath, list.concat(manual).join(\"\\n\"));\n            });\n\n            let funcSQL = \"\";\n\n            //process view\n            /*\n            _.each(modelingSchema.views, (view, viewName) => {\n                view.inferTypeInfo(modelingSchema);\n\n                funcSQL += `CREATE PROCEDURE ${dbService.getViewSPName(viewName)}(`;\n                \n                if (!_.isEmpty(view.params)) {\n                    let paramSQLs = [];\n                    view.params.forEach(param => {\n                        paramSQLs.push(`p${_.upperFirst(param.name)} ${MySQLModeler.columnDefinition(param, true)}`);\n                    });\n\n                    funcSQL += paramSQLs.join(', ');\n                }\n\n                funcSQL += `)\\nCOMMENT 'SP for view ${viewName}'\\nREADS SQL DATA\\nBEGIN\\n`;\n\n                funcSQL += this._viewDocumentToSQL(modelingSchema, view) + ';';\n\n                funcSQL += '\\nEND;\\n\\n';\n            });\n            */\n\n            let spFilePath = path.join(sqlFilesDir, \"procedures.sql\");\n            this._writeFile(path.join(this.outputPath, spFilePath), funcSQL);\n        }\n\n        return modelingSchema;\n    }\n\n    _toColumnReference(name) {\n        return { oorType: \"ColumnReference\", name };\n    }\n\n    _translateJoinCondition(context, localField, anchor, remoteField) {\n        if (Array.isArray(remoteField)) {\n            return remoteField.map((rf) => this._translateJoinCondition(context, localField, anchor, rf));\n        }\n\n        if (_.isPlainObject(remoteField)) {\n            let ret = { [localField]: this._toColumnReference(anchor + \".\" + remoteField.by) };\n            let withExtra = this._oolConditionToQueryCondition(context, remoteField.with);\n\n            if (localField in withExtra) {\n                return { $and: [ret, withExtra] };\n            }\n\n            return { ...ret, ...withExtra };\n        }\n\n        return { [localField]: this._toColumnReference(anchor + \".\" + remoteField) };\n    }\n\n    _getAllRelatedFields(remoteField) {\n        if (!remoteField) return undefined;\n\n        if (Array.isArray(remoteField)) {\n            return remoteField.map((rf) => this._getAllRelatedFields(rf));\n        }\n\n        if (_.isPlainObject(remoteField)) {\n            return remoteField.by;\n        }\n\n        return remoteField;\n    }\n\n    _preProcessAssociations(entity) {\n        return entity.info.associations.map((assoc) => {\n            if (assoc.srcField) return assoc.srcField;\n\n            if (assoc.type === \"hasMany\") {\n                return pluralize(assoc.destEntity);\n            }\n\n            return assoc.destEntity;\n        });\n    }\n\n    /**\n     * hasMany/hasOne - belongsTo\n     * hasMany/hasOne - hasMany/hasOne [by] [with]\n     * hasMany - semi connection\n     * refersTo - semi connection\n     *\n     * remoteField:\n     *   1. fieldName\n     *   2. array of fieldName\n     *   3. { by , with }\n     *   4. array of fieldName and { by , with } mixed\n     *\n     * @param {*} schema\n     * @param {*} entity\n     * @param {*} assoc\n     */\n    _processAssociation(schema, entity, assoc, assocNames, pendingEntities) {\n        let entityKeyField = entity.getKeyField();\n        assert: !Array.isArray(entityKeyField);\n\n        this.linker.log(\"debug\", `Processing \"${entity.name}\" ${JSON.stringify(assoc)}`);\n\n        let destEntityName = assoc.destEntity,\n            destEntity,\n            destEntityNameAsFieldName;\n\n        if (isDotSeparateName(destEntityName)) {\n            //cross db reference\n            let [destSchemaName, actualDestEntityName] = extractDotSeparateName(destEntityName);\n\n            let destSchema = schema.linker.schemas[destSchemaName];\n            if (!destSchema.linked) {\n                throw new Error(\n                    `The destination schema ${destSchemaName} has not been linked yet. Currently only support one-way reference for cross db relation.`\n                );\n            }\n\n            destEntity = destSchema.entities[actualDestEntityName];\n            destEntityNameAsFieldName = actualDestEntityName;\n        } else {\n            destEntity = schema.ensureGetEntity(entity.gemlModule, destEntityName, pendingEntities);\n            if (!destEntity) {\n                throw new Error(`Entity \"${entity.name}\" references to an unexisting entity \"${destEntityName}\".`);\n            }\n\n            destEntityNameAsFieldName = destEntityName;\n        }\n\n        if (!destEntity) {\n            throw new Error(`Entity \"${entity.name}\" references to an unexisting entity \"${destEntityName}\".`);\n        }\n\n        let destKeyField = destEntity.getKeyField();\n        assert: destKeyField,\n            `Empty key field \"${destEntity.keyField}\". Dest entity: ${destEntityName}, current entity: ${entity.name}`;\n\n        if (Array.isArray(destKeyField)) {\n            throw new Error(`Destination entity \"${destEntityName}\" with combination primary key is not supported.`);\n        }\n\n        switch (assoc.type) {\n            case \"hasOne\":\n            case \"hasMany\":\n                let includes;\n                let excludes = {\n                    types: [\"refersTo\"],\n                    association: assoc,\n                };\n\n                if (assoc.by) {\n                    excludes.types.push(\"belongsTo\");\n                    includes = {\n                        by: (cb) => cb && cb.split(\".\")[0] === assoc.by.split(\".\")[0],\n                    };\n\n                    if (assoc.with) {\n                        includes.with = assoc.with;\n                    }\n                } else {\n                    let remoteFields = this._getAllRelatedFields(assoc.remoteField);\n\n                    includes = {\n                        srcField: (remoteField) => {\n                            remoteField || (remoteField = entity.name);\n\n                            return (\n                                _.isNil(remoteFields) ||\n                                (Array.isArray(remoteFields)\n                                    ? remoteFields.indexOf(remoteField) > -1\n                                    : remoteFields === remoteField)\n                            );\n                        },\n                    };\n                }\n\n                let backRef = destEntity.getReferenceTo(entity.name, includes, excludes);\n                if (backRef) {\n                    if (backRef.type === \"hasMany\" || backRef.type === \"hasOne\") {\n                        if (!assoc.by) {\n                            throw new Error(\n                                '\"m2n\" association requires \"by\" property. Entity: ' +\n                                    entity.name +\n                                    \" destination: \" +\n                                    destEntityName\n                            );\n                        }\n\n                        // one/many to one/many relation\n\n                        let connectedByParts = assoc.by.split(\".\");\n                        assert: connectedByParts.length <= 2;\n\n                        // connected by field is usually a refersTo assoc\n                        let connectedByField = (connectedByParts.length > 1 && connectedByParts[1]) || entity.name;\n                        let connEntityName = GemlUtils.entityNaming(connectedByParts[0]);\n\n                        assert: connEntityName;\n\n                        let tag1 = `${entity.name}:${assoc.type === \"hasMany\" ? \"m\" : \"1\"}-${destEntityName}:${\n                            backRef.type === \"hasMany\" ? \"n\" : \"1\"\n                        } by ${connEntityName}`;\n                        let tag2 = `${destEntityName}:${backRef.type === \"hasMany\" ? \"m\" : \"1\"}-${entity.name}:${\n                            assoc.type === \"hasMany\" ? \"n\" : \"1\"\n                        } by ${connEntityName}`;\n\n                        if (assoc.srcField) {\n                            tag1 += \" \" + assoc.srcField;\n                        }\n\n                        if (backRef.srcField) {\n                            tag2 += \" \" + backRef.srcField;\n                        }\n\n                        if (this._processedRef.has(tag1) || this._processedRef.has(tag2)) {\n                            //already processed, skip\n                            return;\n                        }\n\n                        let connectedByParts2 = backRef.by.split(\".\");\n                        let connectedByField2 =\n                            (connectedByParts2.length > 1 && connectedByParts2[1]) || destEntityNameAsFieldName;\n\n                        if (connectedByField === connectedByField2) {\n                            throw new Error('Cannot use the same \"by\" field in a relation entity.');\n                        }\n\n                        let connEntity = schema.ensureGetEntity(entity.gemlModule, connEntityName, pendingEntities);\n                        if (!connEntity) {\n                            //create a\n                            connEntity = this._addRelationEntity(\n                                schema,\n                                connEntityName,\n                                entity.name,\n                                destEntityName,\n                                connectedByField,\n                                connectedByField2\n                            );\n                            pendingEntities.push(connEntity.name);\n                            this.linker.log(\"debug\", `New entity \"${connEntity.name}\" added by association.`);\n                        }\n\n                        this._updateRelationEntity(\n                            connEntity,\n                            entity,\n                            destEntity,\n                            entity.name,\n                            destEntityName,\n                            connectedByField,\n                            connectedByField2\n                        );\n\n                        let localFieldName = assoc.srcField || pluralize(destEntityNameAsFieldName);\n\n                        entity.addAssociation(localFieldName, {\n                            entity: connEntityName,\n                            key: connEntity.key,\n                            on: this._translateJoinCondition(\n                                { ...assocNames, [connEntityName]: localFieldName },\n                                entity.key,\n                                localFieldName,\n                                assoc.with\n                                    ? {\n                                          by: connectedByField,\n                                          with: assoc.with,\n                                      }\n                                    : connectedByField\n                            ),\n                            field: connectedByField,\n                            ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                            assoc: connectedByField2,\n                        });\n\n                        let remoteFieldName = backRef.srcField || pluralize(entity.name);\n\n                        destEntity.addAssociation(remoteFieldName, {\n                            entity: connEntityName,\n                            key: connEntity.key,\n                            on: this._translateJoinCondition(\n                                { ...assocNames, [connEntityName]: remoteFieldName },\n                                destEntity.key,\n                                remoteFieldName,\n                                backRef.with\n                                    ? {\n                                          by: connectedByField2,\n                                          with: backRef.with,\n                                      }\n                                    : connectedByField2\n                            ),\n                            field: connectedByField2,\n                            ...(backRef.type === \"hasMany\" ? { list: true } : {}),\n                            assoc: connectedByField,\n                        });\n\n                        this._processedRef.add(tag1);\n                        this.linker.log(\"verbose\", `Processed 2-way reference: ${tag1}`);\n\n                        this._processedRef.add(tag2);\n                        this.linker.log(\"verbose\", `Processed 2-way reference: ${tag2}`);\n                    } else if (backRef.type === \"belongsTo\") {\n                        if (assoc.by) {\n                            throw new Error(\"todo: belongsTo by. entity: \" + entity.name);\n                        } else {\n                            //leave it to the referenced entity\n                            let anchor =\n                                assoc.srcField ||\n                                (assoc.type === \"hasMany\"\n                                    ? pluralize(destEntityNameAsFieldName)\n                                    : destEntityNameAsFieldName);\n                            let remoteField = assoc.remoteField || backRef.srcField || entity.name;\n\n                            //check if the target entity has logical deletion feature\n                            if (destEntity.hasFeature(\"logicalDeletion\")) {\n                                let deletionCheck = {\n                                    oolType: \"BinaryExpression\",\n                                    operator: \"!=\",\n                                    left: {\n                                        oolType: \"ObjectReference\",\n                                        name: `${destEntityName}.${destEntity.features[\"logicalDeletion\"].field}`,\n                                    },\n                                    right: true,\n                                };\n\n                                if (_.isPlainObject(remoteField)) {\n                                    remoteField.with = {\n                                        oolType: \"LogicalExpression\",\n                                        operator: \"and\",\n                                        left: remoteField.with,\n                                        right: deletionCheck,\n                                    };\n                                } else if (assoc.with) {\n                                    assoc.with = {\n                                        oolType: \"LogicalExpression\",\n                                        operator: \"and\",\n                                        left: assoc.with,\n                                        right: deletionCheck,\n                                    };\n                                } else {\n                                    assoc.with = deletionCheck;\n                                }\n                            }\n\n                            entity.addAssociation(anchor, {\n                                entity: destEntityName,\n                                key: destEntity.key,\n                                on: this._translateJoinCondition(\n                                    { ...assocNames, [destEntityName]: anchor },\n                                    entity.key,\n                                    anchor,\n                                    assoc.with\n                                        ? {\n                                              by: remoteField,\n                                              with: assoc.with,\n                                          }\n                                        : remoteField\n                                ),\n                                ...(typeof remoteField === \"string\" ? { field: remoteField } : {}),\n                                ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                            });\n                        }\n                    } else {\n                        throw new Error(\n                            \"Unexpected path. Entity: \" +\n                                entity.name +\n                                \", association: \" +\n                                JSON.stringify(assoc, null, 2)\n                        );\n                    }\n                } else {\n                    // semi association\n\n                    let connectedByParts = assoc.by\n                        ? assoc.by.split(\".\")\n                        : [GemlUtils.prefixNaming(entity.name, destEntityName)];\n                    assert: connectedByParts.length <= 2;\n\n                    let connectedByField = (connectedByParts.length > 1 && connectedByParts[1]) || entity.name;\n                    let connEntityName = GemlUtils.entityNaming(connectedByParts[0]);\n\n                    assert: connEntityName;\n\n                    let tag1 = `${entity.name}:${\n                        assoc.type === \"hasMany\" ? \"m\" : \"1\"\n                    }-${destEntityName}:* by ${connEntityName}`;\n\n                    if (assoc.srcField) {\n                        tag1 += \" \" + assoc.srcField;\n                    }\n\n                    assert: !this._processedRef.has(tag1);\n\n                    let connEntity = schema.ensureGetEntity(entity.gemlModule, connEntityName, pendingEntities);\n                    if (!connEntity) {\n                        //create a\n                        connEntity = this._addRelationEntity(\n                            schema,\n                            connEntityName,\n                            entity.name,\n                            destEntityName,\n                            connectedByField,\n                            destEntityNameAsFieldName\n                        );\n                        pendingEntities.push(connEntity.name);\n                        this.linker.log(\"debug\", `New entity \"${connEntity.name}\" added by association.`);\n                    }\n\n                    //todo: get back ref from connection entity\n                    let connBackRef1 = connEntity.getReferenceTo(entity.name, {\n                        type: \"refersTo\",\n                        srcField: (f) => _.isNil(f) || f == connectedByField,\n                    });\n\n                    if (!connBackRef1) {\n                        throw new Error(\n                            `Cannot find back reference to \"${entity.name}\" from relation entity \"${connEntityName}\".`\n                        );\n                    }\n\n                    let connBackRef2 = connEntity.getReferenceTo(\n                        destEntityName,\n                        { type: \"refersTo\" },\n                        { association: connBackRef1 }\n                    );\n\n                    if (!connBackRef2) {\n                        throw new Error(\n                            `Cannot find back reference to \"${destEntityName}\" from relation entity \"${connEntityName}\".`\n                        );\n                    }\n\n                    let connectedByField2 = connBackRef2.srcField || destEntityNameAsFieldName;\n\n                    if (connectedByField === connectedByField2) {\n                        throw new Error(\n                            'Cannot use the same \"by\" field in a relation entity. Detail: ' +\n                                JSON.stringify({\n                                    src: entity.name,\n                                    dest: destEntityName,\n                                    srcField: assoc.srcField,\n                                    by: connectedByField,\n                                })\n                        );\n                    }\n\n                    this._updateRelationEntity(\n                        connEntity,\n                        entity,\n                        destEntity,\n                        entity.name,\n                        destEntityName,\n                        connectedByField,\n                        connectedByField2\n                    );\n\n                    let localFieldName = assoc.srcField || pluralize(destEntityNameAsFieldName);\n\n                    entity.addAssociation(localFieldName, {\n                        entity: connEntityName,\n                        key: connEntity.key,\n                        on: this._translateJoinCondition(\n                            {\n                                ...assocNames,\n                                [destEntityName]: localFieldName + \".\" + connectedByField2,\n                                [connEntityName]: localFieldName,\n                            },\n                            entity.key,\n                            localFieldName,\n                            assoc.with\n                                ? {\n                                      by: connectedByField,\n                                      with: assoc.with,\n                                  }\n                                : connectedByField\n                        ),\n                        field: connectedByField,\n                        ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                        assoc: connectedByField2,\n                    });\n\n                    this._processedRef.add(tag1);\n                    this.linker.log(\"verbose\", `Processed 1-way reference: ${tag1}`);\n                }\n\n                break;\n\n            case \"refersTo\":\n            case \"belongsTo\":\n                let localField = assoc.srcField || destEntityNameAsFieldName;\n                let destFieldName = destKeyField.name;\n                let referencedField = destKeyField;\n\n                if (assoc.type === \"refersTo\") {\n                    let tag = `${entity.name}:1-${destEntityName}:* ${localField}`;\n\n                    if (assoc.destField) {\n                        if (!destEntity.hasField(assoc.destField)) {\n                            throw new Error(\n                                `The field \"${assoc.destField}\" being referenced is not a field of entity \"${destEntityName}\".`\n                            );\n                        }\n\n                        destFieldName = assoc.destField;\n                        referencedField = destEntity.fields[destFieldName];\n                    }\n\n                    tag += \"->\" + assoc.destField;\n\n                    if (this._processedRef.has(tag)) {\n                        //already processed by connection, skip\n                        return;\n                    }\n\n                    this._processedRef.add(tag);\n                    this.linker.log(\"verbose\", `Processed week reference: ${tag}`);\n                }\n\n                let joinOn = { [localField]: this._toColumnReference(localField + \".\" + destFieldName) };\n\n                if (assoc.with) {\n                    Object.assign(\n                        joinOn,\n                        this._oolConditionToQueryCondition({ ...assocNames, [destEntityName]: localField }, assoc.with)\n                    );\n                }\n\n                entity.addAssocField(localField, destEntity, referencedField, assoc.fieldProps);\n                entity.addAssociation(localField, {\n                    type: assoc.type,\n                    entity: destEntityName,\n                    key: destEntity.key,\n                    field: destFieldName,\n                    on: joinOn,\n                });\n\n                //foreign key constraits\n                let localFieldObj = entity.fields[localField];\n\n                let constraints = {};\n\n                if (localFieldObj.constraintOnUpdate) {\n                    constraints.onUpdate = localFieldObj.constraintOnUpdate;\n                }\n\n                if (localFieldObj.constraintOnDelete) {\n                    constraints.onDelete = localFieldObj.constraintOnDelete;\n                }\n\n                if (assoc.type === \"belongsTo\") {\n                    constraints.onUpdate || (constraints.onUpdate = \"CASCADE\");\n                    constraints.onDelete || (constraints.onDelete = \"CASCADE\");\n                } else if (localFieldObj.optional) {\n                    constraints.onUpdate || (constraints.onUpdate = \"SET NULL\");\n                    constraints.onDelete || (constraints.onDelete = \"SET NULL\");\n                }\n\n                constraints.onUpdate || (constraints.onUpdate = \"NO ACTION\");\n                constraints.onDelete || (constraints.onDelete = \"NO ACTION\");\n\n                this._addReference(entity.name, localField, destEntityName, destFieldName, constraints);\n                break;\n        }\n    }\n\n    _oolConditionToQueryCondition(context, oolCon) {\n        assert: oolCon.oolType;\n\n        if (oolCon.oolType === \"BinaryExpression\") {\n            if (oolCon.operator === \"==\") {\n                let left = oolCon.left;\n                if (left.oolType && left.oolType === \"ObjectReference\") {\n                    left = this._translateReference(context, left.name, true);\n                }\n\n                let right = oolCon.right;\n                if (right.oolType && right.oolType === \"ObjectReference\") {\n                    right = this._translateReference(context, right.name);\n                }\n\n                return {\n                    [left]: { $eq: right },\n                };\n            } else if (oolCon.operator === \"!=\") {\n                let left = oolCon.left;\n                if (left.oolType && left.oolType === \"ObjectReference\") {\n                    left = this._translateReference(context, left.name, true);\n                }\n\n                let right = oolCon.right;\n                if (right.oolType && right.oolType === \"ObjectReference\") {\n                    right = this._translateReference(context, right.name);\n                }\n\n                return {\n                    [left]: { $ne: right },\n                };\n            }\n        } else if (oolCon.oolType === \"UnaryExpression\") {\n            let arg;\n\n            switch (oolCon.operator) {\n                case \"is-null\":\n                    arg = oolCon.argument;\n                    if (arg.oolType && arg.oolType === \"ObjectReference\") {\n                        arg = this._translateReference(context, arg.name, true);\n                    }\n\n                    return {\n                        [arg]: { $eq: null },\n                    };\n\n                case \"is-not-null\":\n                    arg = oolCon.argument;\n                    if (arg.oolType && arg.oolType === \"ObjectReference\") {\n                        arg = this._translateReference(context, arg.name, true);\n                    }\n\n                    return {\n                        [arg]: { $ne: null },\n                    };\n\n                default:\n                    throw new Error(\"Unknown UnaryExpression operator: \" + oolCon.operator);\n            }\n        } else if (oolCon.oolType === \"LogicalExpression\") {\n            switch (oolCon.operator) {\n                case \"and\":\n                    return {\n                        $and: [\n                            this._oolConditionToQueryCondition(context, oolCon.left),\n                            this._oolConditionToQueryCondition(context, oolCon.right),\n                        ],\n                    };\n\n                case \"or\":\n                    return {\n                        $or: [\n                            this._oolConditionToQueryCondition(context, oolCon.left),\n                            this._oolConditionToQueryCondition(context, oolCon.right),\n                        ],\n                    };\n            }\n        }\n\n        throw new Error(\"Unknown syntax: \" + JSON.stringify(oolCon));\n    }\n\n    _translateReference(context, ref, asKey) {\n        let [base, ...other] = ref.split(\".\");\n\n        let translated = context[base];\n        if (!translated) {\n            console.log(context);\n            throw new Error(`Referenced object \"${ref}\" not found in context.`);\n        }\n\n        let refName = [translated, ...other].join(\".\");\n\n        if (asKey) {\n            return refName;\n        }\n\n        return this._toColumnReference(refName);\n    }\n\n    _addReference(left, leftField, right, rightField, constraints) {\n        if (Array.isArray(leftField)) {\n            leftField.forEach((lf) => this._addReference(left, lf, right, rightField, constraints));\n            return;\n        }\n\n        if (_.isPlainObject(leftField)) {\n            this._addReference(left, leftField.by, right.rightField, constraints);\n            return;\n        }\n\n        assert: typeof leftField === \"string\";\n\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            refs4LeftEntity = [];\n            this._references[left] = refs4LeftEntity;\n        } else {\n            let found = _.find(\n                refs4LeftEntity,\n                (item) => item.leftField === leftField && item.right === right && item.rightField === rightField\n            );\n\n            if (found) return;\n        }\n\n        refs4LeftEntity.push({ leftField, right, rightField, constraints });\n    }\n\n    _getReferenceOfField(left, leftField) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            return undefined;\n        }\n\n        let reference = _.find(refs4LeftEntity, (item) => item.leftField === leftField);\n\n        if (!reference) {\n            return undefined;\n        }\n\n        return reference;\n    }\n\n    _hasReferenceOfField(left, leftField) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) return false;\n\n        return undefined !== _.find(refs4LeftEntity, (item) => item.leftField === leftField);\n    }\n\n    _getReferenceBetween(left, right) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            return undefined;\n        }\n\n        let reference = _.find(refs4LeftEntity, (item) => item.right === right);\n\n        if (!reference) {\n            return undefined;\n        }\n\n        return reference;\n    }\n\n    _hasReferenceBetween(left, right) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) return false;\n\n        return undefined !== _.find(refs4LeftEntity, (item) => item.right === right);\n    }\n\n    _featureReducer(schema, entity, featureName, feature) {\n        let field;\n\n        switch (featureName) {\n            case \"autoId\":\n                field = entity.fields[feature.field];\n\n                if (field.type === \"integer\" && !field.generator) {\n                    field.autoIncrementId = true;\n                    if (\"startFrom\" in feature) {\n                        this._events.once(\"setTableOptions:\" + entity.name, (extraOpts) => {\n                            extraOpts[\"AUTO_INCREMENT\"] = feature.startFrom;\n                        });\n                    }\n                }\n                break;\n\n            case \"createTimestamp\":\n                field = entity.fields[feature.field];\n                field.isCreateTimestamp = true;\n                break;\n\n            case \"updateTimestamp\":\n                field = entity.fields[feature.field];\n                field.isUpdateTimestamp = true;\n                break;\n\n            case \"userEditTracking\":\n                break;\n\n            case \"logicalDeletion\":\n                break;\n\n            case \"atLeastOneNotNull\":\n                break;\n\n            case \"validateAllFieldsOnCreation\":\n                break;\n\n            case \"stateTracking\":\n                break;\n\n            case \"i18n\":\n                break;\n\n            case \"changeLog\":\n                let changeLogSettings = get(schema.deploymentSettings, \"features.changeLog\");\n\n                if (!changeLogSettings) {\n                    throw new Error(\n                        `Missing \"changeLog\" feature settings in deployment config for schema [${schema.name}].`\n                    );\n                }\n\n                if (!changeLogSettings.dataSource) {\n                    throw new Error(`\"changeLog.dataSource\" is required. Schema: ${schema.name}`);\n                }\n\n                Object.assign(feature, changeLogSettings);\n                break;\n\n            default:\n                throw new Error('Unsupported feature \"' + featureName + '\".');\n        }\n    }\n\n    _writeFile(filePath, content) {\n        fs.ensureFileSync(filePath);\n        fs.writeFileSync(filePath, content);\n\n        this.linker.log(\"info\", \"Generated db script: \" + filePath);\n    }\n\n    _addRelationEntity(\n        schema,\n        relationEntityName,\n        entity1Name /* for cross db */,\n        entity2Name /* for cross db */,\n        entity1RefField,\n        entity2RefField\n    ) {\n        let entityInfo = {\n            features: [\"autoId\", \"createTimestamp\"],\n            indexes: [\n                {\n                    fields: [entity1RefField, entity2RefField],\n                    unique: true,\n                },\n            ],\n            associations: [\n                {\n                    type: \"refersTo\",\n                    destEntity: entity1Name,\n                    srcField: entity1RefField,\n                },\n                {\n                    type: \"refersTo\",\n                    destEntity: entity2Name,\n                    srcField: entity2RefField,\n                },\n            ],\n        };\n\n        let entity = new Entity(this.linker, relationEntityName, schema.gemlModule, entityInfo);\n        entity.link();\n\n        schema.addEntity(entity);\n\n        return entity;\n    }\n\n    /**\n     *\n     * @param {*} relationEntity\n     * @param {*} entity1\n     * @param {*} entity2\n     * @param {*} entity1Name\n     * @param {*} entity2Name\n     * @param {*} connectedByField\n     * @param {*} connectedByField2\n     */\n    _updateRelationEntity(\n        relationEntity,\n        entity1,\n        entity2,\n        entity1Name /* for cross db */,\n        entity2Name /* for cross db */,\n        connectedByField,\n        connectedByField2\n    ) {\n        let relationEntityName = relationEntity.name;\n\n        this._relationEntities[relationEntityName] = true;\n\n        if (relationEntity.info.associations) {\n            // check if the relation entity has the refersTo both side of associations\n            let hasRefToEntity1 = false,\n                hasRefToEntity2 = false;\n\n            _.each(relationEntity.info.associations, (assoc) => {\n                if (\n                    assoc.type === \"refersTo\" &&\n                    assoc.destEntity === entity1Name &&\n                    (assoc.srcField || entity1Name) === connectedByField\n                ) {\n                    hasRefToEntity1 = true;\n                }\n\n                if (\n                    assoc.type === \"refersTo\" &&\n                    assoc.destEntity === entity2Name &&\n                    (assoc.srcField || entity2Name) === connectedByField2\n                ) {\n                    hasRefToEntity2 = true;\n                }\n            });\n\n            if (hasRefToEntity1 && hasRefToEntity2) {\n                //yes, don't need to add refersTo to the relation entity\n                return;\n            }\n        }\n\n        let tag1 = `${relationEntityName}:1-${entity1Name}:* ${connectedByField}`;\n        let tag2 = `${relationEntityName}:1-${entity2Name}:* ${connectedByField2}`;\n\n        if (this._processedRef.has(tag1)) {\n            assert: this._processedRef.has(tag2);\n\n            //already processed, skip\n            return;\n        }\n\n        this._processedRef.add(tag1);\n        this.linker.log(\"verbose\", `Processed bridging reference: ${tag1}`);\n\n        this._processedRef.add(tag2);\n        this.linker.log(\"verbose\", `Processed bridging reference: ${tag2}`);\n\n        let keyEntity1 = entity1.getKeyField();\n        if (Array.isArray(keyEntity1)) {\n            throw new Error(`Combination primary key is not supported. Entity: ${entity1Name}`);\n        }\n\n        let keyEntity2 = entity2.getKeyField();\n        if (Array.isArray(keyEntity2)) {\n            throw new Error(`Combination primary key is not supported. Entity: ${entity2Name}`);\n        }\n\n        relationEntity.addAssocField(connectedByField, entity1, keyEntity1);\n        relationEntity.addAssocField(connectedByField2, entity2, keyEntity2);\n\n        relationEntity.addAssociation(connectedByField, { entity: entity1Name });\n        relationEntity.addAssociation(connectedByField2, { entity: entity2Name });\n\n        let allCascade = { onUpdate: \"RESTRICT\", onDelete: \"RESTRICT\" };\n\n        this._addReference(relationEntityName, connectedByField, entity1Name, keyEntity1.name, allCascade);\n        this._addReference(relationEntityName, connectedByField2, entity2Name, keyEntity2.name, allCascade);\n    }\n\n    static oolOpToSql(op) {\n        switch (op) {\n            case \"=\":\n                return \"=\";\n\n            default:\n                throw new Error(\"oolOpToSql to be implemented.\");\n        }\n    }\n\n    static oolToSql(schema, doc, ool, params) {\n        if (!ool.oolType) {\n            return ool;\n        }\n\n        switch (ool.oolType) {\n            case \"BinaryExpression\":\n                let left, right;\n\n                if (ool.left.oolType) {\n                    left = MySQLModeler.oolToSql(schema, doc, ool.left, params);\n                } else {\n                    left = ool.left;\n                }\n\n                if (ool.right.oolType) {\n                    right = MySQLModeler.oolToSql(schema, doc, ool.right, params);\n                } else {\n                    right = ool.right;\n                }\n\n                return left + \" \" + MySQLModeler.oolOpToSql(ool.operator) + \" \" + right;\n\n            case \"ObjectReference\":\n                if (!GemlUtils.isMemberAccess(ool.name)) {\n                    if (params && _.find(params, (p) => p.name === ool.name) !== -1) {\n                        return \"p\" + _.upperFirst(ool.name);\n                    }\n\n                    throw new Error(`Referencing to a non-existing param \"${ool.name}\".`);\n                }\n\n                let { entityNode, entity, field } = GemlUtils.parseReferenceInDocument(schema, doc, ool.name);\n\n                return entityNode.alias + \".\" + MySQLModeler.quoteIdentifier(field.name);\n\n            default:\n                throw new Error(\"oolToSql to be implemented.\");\n        }\n    }\n\n    static _orderByToSql(schema, doc, ool) {\n        return (\n            MySQLModeler.oolToSql(schema, doc, { oolType: \"ObjectReference\", name: ool.field }) +\n            (ool.ascend ? \"\" : \" DESC\")\n        );\n    }\n\n    _viewDocumentToSQL(modelingSchema, view) {\n        let sql = \"  \";\n        //console.log('view: ' + view.name);\n        let doc = _.cloneDeep(view.getDocumentHierarchy(modelingSchema));\n        //console.dir(doc, {depth: 8, colors: true});\n\n        //let aliasMapping = {};\n        let [colList, alias, joins] = this._buildViewSelect(modelingSchema, doc, 0);\n\n        sql += \"SELECT \" + colList.join(\", \") + \" FROM \" + MySQLModeler.quoteIdentifier(doc.entity) + \" AS \" + alias;\n\n        if (!_.isEmpty(joins)) {\n            sql += \" \" + joins.join(\" \");\n        }\n\n        if (!_.isEmpty(view.selectBy)) {\n            sql +=\n                \" WHERE \" +\n                view.selectBy\n                    .map((select) => MySQLModeler.oolToSql(modelingSchema, doc, select, view.params))\n                    .join(\" AND \");\n        }\n\n        if (!_.isEmpty(view.groupBy)) {\n            sql +=\n                \" GROUP BY \" +\n                view.groupBy.map((col) => MySQLModeler._orderByToSql(modelingSchema, doc, col)).join(\", \");\n        }\n\n        if (!_.isEmpty(view.orderBy)) {\n            sql +=\n                \" ORDER BY \" +\n                view.orderBy.map((col) => MySQLModeler._orderByToSql(modelingSchema, doc, col)).join(\", \");\n        }\n\n        let skip = view.skip || 0;\n        if (view.limit) {\n            sql +=\n                \" LIMIT \" +\n                MySQLModeler.oolToSql(modelingSchema, doc, skip, view.params) +\n                \", \" +\n                MySQLModeler.oolToSql(modelingSchema, doc, view.limit, view.params);\n        } else if (view.skip) {\n            sql += \" OFFSET \" + MySQLModeler.oolToSql(modelingSchema, doc, view.skip, view.params);\n        }\n\n        return sql;\n    }\n\n    /*\n    _buildViewSelect(schema, doc, startIndex) {\n        let entity = schema.entities[doc.entity];\n        let alias = ntol(startIndex++);\n        doc.alias = alias;\n\n        let colList = Object.keys(entity.fields).map(k => alias + '.' + MySQLModeler.quoteIdentifier(k));\n        let joins = [];\n\n        if (!_.isEmpty(doc.subDocuments)) {\n            _.forOwn(doc.subDocuments, (doc, fieldName) => {\n                let [ subColList, subAlias, subJoins, startIndex2 ] = this._buildViewSelect(schema, doc, startIndex);\n                startIndex = startIndex2;\n                colList = colList.concat(subColList);\n                \n                joins.push('LEFT JOIN ' + MySQLModeler.quoteIdentifier(doc.entity) + ' AS ' + subAlias\n                    + ' ON ' + alias + '.' + MySQLModeler.quoteIdentifier(fieldName) + ' = ' +\n                    subAlias + '.' + MySQLModeler.quoteIdentifier(doc.linkWithField));\n\n                if (!_.isEmpty(subJoins)) {\n                    joins = joins.concat(subJoins);\n                }\n            });\n        }\n\n        return [ colList, alias, joins, startIndex ];\n    }*/\n\n    _createTableStatement(entityName, entity /*, mapOfEntityNameToCodeName*/) {\n        let sql = \"CREATE TABLE IF NOT EXISTS `\" + entityName + \"` (\\n\";\n\n        //column definitions\n        _.each(entity.fields, (field, name) => {\n            sql += \"  \" + MySQLModeler.quoteIdentifier(name) + \" \" + MySQLModeler.columnDefinition(field) + \",\\n\";\n        });\n\n        //primary key\n        sql += \"  PRIMARY KEY (\" + MySQLModeler.quoteListOrValue(entity.key) + \"),\\n\";\n\n        //other keys\n        if (entity.indexes && entity.indexes.length > 0) {\n            entity.indexes.forEach((index) => {\n                sql += \"  \";\n                if (index.unique) {\n                    sql += \"UNIQUE \";\n                }\n                sql += \"KEY (\" + MySQLModeler.quoteListOrValue(index.fields) + \"),\\n\";\n            });\n        }\n\n        let lines = [];\n        this._events.emit(\"beforeEndColumnDefinition:\" + entityName, lines);\n        if (lines.length > 0) {\n            sql += \"  \" + lines.join(\",\\n  \");\n        } else {\n            sql = sql.substr(0, sql.length - 2);\n        }\n\n        sql += \"\\n)\";\n\n        //table options\n        let extraProps = {};\n        this._events.emit(\"setTableOptions:\" + entityName, extraProps);\n        let props = Object.assign({}, this._dbOptions.table, extraProps);\n\n        sql = _.reduce(\n            props,\n            function (result, value, key) {\n                return result + \" \" + key + \"=\" + value;\n            },\n            sql\n        );\n\n        sql += \";\\n\";\n\n        return sql;\n    }\n\n    _addForeignKeyStatement(entityName, relation, schemaToConnector /*, mapOfEntityNameToCodeName*/) {\n        let refTable = relation.right;\n\n        if (refTable.indexOf(\".\") > 0) {\n            let [schemaName, refEntityName] = refTable.split(\".\");\n\n            let targetConnector = schemaToConnector[schemaName];\n            assert: targetConnector;\n\n            refTable = targetConnector.database + \"`.`\" + refEntityName;\n        }\n\n        let sql =\n            \"ALTER TABLE `\" +\n            entityName +\n            \"` ADD FOREIGN KEY (`\" +\n            relation.leftField +\n            \"`) \" +\n            \"REFERENCES `\" +\n            refTable +\n            \"` (`\" +\n            relation.rightField +\n            \"`) \";\n\n        sql += `ON UPDATE ${relation.constraints.onUpdate} ON DELETE ${relation.constraints.onDelete};\\n`;\n\n        return sql;\n    }\n\n    static foreignKeyFieldNaming(entityName, entity) {\n        let leftPart = naming.camelCase(entityName);\n        let rightPart = naming.pascalCase(entity.key);\n\n        if (_.endsWith(leftPart, rightPart)) {\n            return leftPart;\n        }\n\n        return leftPart + rightPart;\n    }\n\n    static quoteString(str) {\n        return \"'\" + str.replace(/'/g, \"\\\\'\") + \"'\";\n    }\n\n    static quoteIdentifier(str) {\n        return \"`\" + str + \"`\";\n    }\n\n    static quoteListOrValue(obj) {\n        return _.isArray(obj)\n            ? obj.map((v) => MySQLModeler.quoteIdentifier(v)).join(\", \")\n            : MySQLModeler.quoteIdentifier(obj);\n    }\n\n    static complianceCheck(entity) {\n        let result = { errors: [], warnings: [] };\n\n        if (!entity.key) {\n            result.errors.push(\"Primary key is not specified.\");\n        }\n\n        return result;\n    }\n\n    static columnDefinition(field, isProc) {\n        let col;\n\n        switch (field.type) {\n            case \"integer\":\n                col = MySQLModeler.intColumnDefinition(field);\n                break;\n\n            case \"number\":\n                col = MySQLModeler.floatColumnDefinition(field);\n                break;\n\n            case \"text\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            case \"boolean\":\n                col = MySQLModeler.boolColumnDefinition(field);\n                break;\n\n            case \"binary\":\n                col = MySQLModeler.binaryColumnDefinition(field);\n                break;\n\n            case \"datetime\":\n                col = MySQLModeler.datetimeColumnDefinition(field);\n                break;\n\n            case \"object\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            case \"enum\":\n                col = MySQLModeler.enumColumnDefinition(field);\n                break;\n\n            case \"array\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            default:\n                throw new Error('Unsupported type \"' + field.type + '\".');\n        }\n\n        let { sql, type } = col;\n\n        if (!isProc) {\n            sql += this.columnNullable(field);\n            sql += this.defaultValue(field, type);\n        }\n\n        return sql;\n    }\n\n    static intColumnDefinition(info) {\n        let sql, type;\n\n        if (info.digits) {\n            if (info.digits > 10) {\n                type = sql = \"BIGINT\";\n            } else if (info.digits > 7) {\n                type = sql = \"INT\";\n            } else if (info.digits > 4) {\n                type = sql = \"MEDIUMINT\";\n            } else if (info.digits > 2) {\n                type = sql = \"SMALLINT\";\n            } else {\n                type = sql = \"TINYINT\";\n            }\n\n            sql += `(${info.digits})`;\n        } else {\n            type = sql = \"INT\";\n        }\n\n        if (info.unsigned) {\n            sql += \" UNSIGNED\";\n        }\n\n        return { sql, type };\n    }\n\n    static floatColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.type == \"number\" && info.exact) {\n            type = sql = \"DECIMAL\";\n\n            if (info.totalDigits > 65) {\n                throw new Error(\"Total digits exceed maximum limit.\");\n            }\n        } else {\n            if (info.bytes === 8 || info.double || info.totalDigits > 23) {\n                type = sql = \"DOUBLE\";\n\n                if (info.totalDigits > 53) {\n                    throw new Error(\"Total digits exceed maximum limit.\");\n                }\n            } else {\n                type = sql = \"FLOAT\";\n            }\n        }\n\n        if (\"totalDigits\" in info) {\n            sql += \"(\" + info.totalDigits;\n            if (\"decimalDigits\" in info) {\n                sql += \", \" + info.decimalDigits;\n            }\n            sql += \")\";\n        } else {\n            if (\"decimalDigits\" in info) {\n                if (info.decimalDigits > 23) {\n                    sql += \"(53, \" + info.decimalDigits + \")\";\n                } else {\n                    sql += \"(23, \" + info.decimalDigits + \")\";\n                }\n            }\n        }\n\n        return { sql, type };\n    }\n\n    static textColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.fixedLength && info.fixedLength <= 255) {\n            sql = \"CHAR(\" + info.fixedLength + \")\";\n            type = \"CHAR\";\n        } else if (info.maxLength) {\n            if (info.maxLength > 16777215) {\n                type = sql = \"LONGTEXT\";\n            } else if (info.maxLength > 65535) {\n                type = sql = \"MEDIUMTEXT\";\n            } else if (info.maxLength > 2000) {\n                type = sql = \"TEXT\";\n            } else {\n                type = sql = \"VARCHAR\";\n                if (info.fixedLength) {\n                    sql += \"(\" + info.fixedLength + \")\";\n                } else {\n                    sql += \"(\" + info.maxLength + \")\";\n                }\n            }\n        } else {\n            type = sql = \"TEXT\";\n        }\n\n        return { sql, type };\n    }\n\n    static binaryColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.fixedLength <= 255) {\n            sql = \"BINARY(\" + info.fixedLength + \")\";\n            type = \"BINARY\";\n        } else if (info.maxLength) {\n            if (info.maxLength > 16777215) {\n                type = sql = \"LONGBLOB\";\n            } else if (info.maxLength > 65535) {\n                type = sql = \"MEDIUMBLOB\";\n            } else {\n                type = sql = \"VARBINARY\";\n                if (info.fixedLength) {\n                    sql += \"(\" + info.fixedLength + \")\";\n                } else {\n                    sql += \"(\" + info.maxLength + \")\";\n                }\n            }\n        } else {\n            type = sql = \"BLOB\";\n        }\n\n        return { sql, type };\n    }\n\n    static boolColumnDefinition() {\n        return { sql: \"TINYINT(1)\", type: \"TINYINT\" };\n    }\n\n    static datetimeColumnDefinition(info) {\n        let sql;\n\n        if (!info.range || info.range === \"datetime\") {\n            sql = \"DATETIME\";\n        } else if (info.range === \"date\") {\n            sql = \"DATE\";\n        } else if (info.range === \"time\") {\n            sql = \"TIME\";\n        } else if (info.range === \"year\") {\n            sql = \"YEAR\";\n        } else if (info.range === \"timestamp\") {\n            sql = \"TIMESTAMP\";\n        }\n\n        return { sql, type: sql };\n    }\n\n    static enumColumnDefinition(info) {\n        return { sql: \"ENUM(\" + _.map(info.values, (v) => MySQLModeler.quoteString(v)).join(\", \") + \")\", type: \"ENUM\" };\n    }\n\n    static columnNullable(info) {\n        if (info.hasOwnProperty(\"optional\") && info.optional) {\n            return \" NULL\";\n        }\n\n        return \" NOT NULL\";\n    }\n\n    static defaultValue(info, type) {\n        if (info.isCreateTimestamp) {\n            info.createByDb = true;\n            return \" DEFAULT CURRENT_TIMESTAMP\";\n        }\n\n        if (info.autoIncrementId) {\n            info.createByDb = true;\n            return \" AUTO_INCREMENT\";\n        }\n\n        if (info.isUpdateTimestamp) {\n            info.updateByDb = true;\n            return \" ON UPDATE CURRENT_TIMESTAMP\";\n        }\n\n        let sql = \"\";\n\n        if (!info.optional) {\n            if (info.hasOwnProperty(\"default\")) {\n                let defaultValue = info[\"default\"];\n\n                if (typeof defaultValue === \"object\" && defaultValue.oorType === \"SymbolToken\") {\n                    const tokenName = defaultValue.name.toUpperCase();\n\n                    switch (tokenName) {\n                        case \"NOW\":\n                            sql += \" DEFAULT NOW()\";\n                            info.createByDb = true;\n                            break;\n\n                        default:\n                            throw new Error(`Unsupported symbol token \"${tokenName}\".`);\n                    }\n                } else {\n                    switch (info.type) {\n                        case \"boolean\":\n                            sql += \" DEFAULT \" + (Types.BOOLEAN.sanitize(defaultValue) ? \"1\" : \"0\");\n                            break;\n\n                        case \"integer\":\n                            if (_.isInteger(defaultValue)) {\n                                sql += \" DEFAULT \" + defaultValue.toString();\n                            } else {\n                                sql += \" DEFAULT \" + parseInt(defaultValue).toString();\n                            }\n                            break;\n\n                        case \"text\":\n                        case \"enum\":\n                            sql += \" DEFAULT \" + quote(defaultValue);\n                            break;\n\n                        case \"number\":\n                            if (_.isNumber(defaultValue)) {\n                                sql += \" DEFAULT \" + defaultValue.toString();\n                            } else {\n                                sql += \" DEFAULT \" + parseFloat(defaultValue).toString();\n                            }\n                            break;\n\n                        case \"binary\":\n                            sql += \" DEFAULT \" + bin2Hex(defaultValue);\n                            break;\n\n                        case \"datetime\":\n                            sql +=\n                                \" DEFAULT \" +\n                                quote(Types.DATETIME.sanitize(defaultValue).toSQL({ includeOffset: false }));\n                            break;\n\n                        case \"object\":\n                        case \"array\":\n                            sql += \" DEFAULT \" + quote(JSON.stringify(defaultValue));\n                            break;\n\n                        default:\n                            throw new Error(`Invalid type \"${info.type}\"`);\n                    }\n                }\n            } else if (!info.hasOwnProperty(\"auto\")) {\n                if (UNSUPPORTED_DEFAULT_VALUE.has(type)) {\n                    return \"\";\n                }\n\n                if (info.type === \"boolean\" || info.type === \"integer\" || info.type === \"number\") {\n                    sql += \" DEFAULT 0\";\n                } else if (info.type === \"datetime\") {\n                    sql += \" DEFAULT CURRENT_TIMESTAMP\";\n                } else if (info.type === \"enum\") {\n                    sql += \" DEFAULT \" + quote(info.values[0]);\n                    info.createByDb = true;\n                } else {\n                    sql += ' DEFAULT \"\"';\n                }\n\n                //not explicit specified, will not treated as createByDb\n                //info.createByDb = true;\n            }\n        }     \n\n        return sql;\n    }\n\n    static removeTableNamePrefix(entityName, removeTablePrefix) {\n        if (removeTablePrefix) {\n            entityName = _.trim(_.snakeCase(entityName));\n\n            removeTablePrefix = _.trimEnd(_.snakeCase(removeTablePrefix), \"_\") + \"_\";\n\n            if (_.startsWith(entityName, removeTablePrefix)) {\n                entityName = entityName.substr(removeTablePrefix.length);\n            }\n        }\n\n        return GemlUtils.entityNaming(entityName);\n    }\n}\n\nmodule.exports = MySQLModeler;\n"],"mappings":"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"}