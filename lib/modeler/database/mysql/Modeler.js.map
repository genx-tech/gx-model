{"version":3,"sources":["../../../../src/modeler/database/mysql/Modeler.js"],"names":["EventEmitter","require","path","_","quote","pushIntoBucket","get","naming","bin2Hex","fs","GemlUtils","pluralize","isDotSeparateName","extractDotSeparateName","Entity","Types","UNSUPPORTED_DEFAULT_VALUE","Set","MySQLModeler","constructor","context","linker","connector","dbOptions","outputPath","scriptPath","_events","_dbOptions","db","mapKeys","value","key","upperCase","table","_references","_relationEntities","_processedRef","modeling","schema","schemaToConnector","skipGeneration","log","name","modelingSchema","clone","pendingEntities","Object","keys","entities","length","entityName","shift","entity","isEmpty","info","associations","assocs","_preProcessAssociations","assocNames","reduce","result","v","forEach","assoc","_processAssociation","emit","sqlFilesDir","join","database","dbFilePath","fkFilePath","tableSQL","relationSQL","data","each","assert","addIndexes","complianceCheck","errors","message","warnings","Error","features","forOwn","f","featureName","Array","isArray","ff","_featureReducer","_createTableStatement","dataSet","runtimeEnv","records","entityData","record","isPlainObject","fields","keyField","auto","defaultByDb","translateOolValue","gemlModule","push","assign","nodes","refs","srcEntityName","ref","_addForeignKeyStatement","_writeFile","initIdxFiles","envData","entitiesData","initFileName","pathNodes","initFilePath","idxFilePath","JSON","stringify","list","filePath","manual","existsSync","lines","readFileSync","split","line","startsWith","concat","funcSQL","spFilePath","_toColumnReference","oorType","_translateJoinCondition","localField","anchor","remoteField","map","rf","ret","by","withExtra","_oolConditionToQueryCondition","with","$and","_getAllRelatedFields","undefined","srcField","type","destEntity","entityKeyField","getKeyField","destEntityName","destEntityNameAsFieldName","destSchemaName","actualDestEntityName","destSchema","schemas","linked","ensureGetEntity","destKeyField","includes","excludes","types","association","cb","remoteFields","isNil","indexOf","backRef","getReferenceTo","connectedByParts","connectedByField","connEntityName","entityNaming","tag1","tag2","has","connectedByParts2","connectedByField2","connEntity","_addRelationEntity","_updateRelationEntity","localFieldName","addAssociation","on","field","remoteFieldName","add","hasFeature","deletionCheck","oolType","operator","left","right","prefixNaming","connBackRef1","connBackRef2","src","dest","destFieldName","referencedField","tag","destField","hasField","joinOn","addAssocField","fieldProps","localFieldObj","constraints","constraintOnUpdate","onUpdate","constraintOnDelete","onDelete","optional","_addReference","oolCon","_translateReference","$eq","$ne","arg","argument","$or","asKey","base","other","translated","console","refName","leftField","rightField","lf","refs4LeftEntity","found","find","item","_getReferenceOfField","reference","_hasReferenceOfField","_getReferenceBetween","_hasReferenceBetween","feature","generator","autoIncrementId","once","extraOpts","startFrom","isCreateTimestamp","isUpdateTimestamp","changeLogSettings","deploymentSettings","dataSource","content","ensureFileSync","writeFileSync","relationEntityName","entity1Name","entity2Name","entity1RefField","entity2RefField","entityInfo","indexes","unique","link","addEntity","relationEntity","entity1","entity2","hasRefToEntity1","hasRefToEntity2","keyEntity1","keyEntity2","allCascade","oolOpToSql","op","oolToSql","doc","ool","params","isMemberAccess","p","upperFirst","entityNode","parseReferenceInDocument","alias","quoteIdentifier","_orderByToSql","ascend","_viewDocumentToSQL","view","sql","cloneDeep","getDocumentHierarchy","colList","joins","_buildViewSelect","selectBy","select","groupBy","col","orderBy","skip","limit","columnDefinition","quoteListOrValue","index","substr","extraProps","props","relation","refTable","schemaName","refEntityName","targetConnector","foreignKeyFieldNaming","leftPart","camelCase","rightPart","pascalCase","endsWith","quoteString","str","replace","obj","isProc","intColumnDefinition","floatColumnDefinition","textColumnDefinition","boolColumnDefinition","binaryColumnDefinition","datetimeColumnDefinition","enumColumnDefinition","columnNullable","defaultValue","digits","unsigned","exact","totalDigits","decimalDigits","fixedLength","maxLength","range","values","hasOwnProperty","createByDb","updateByDb","tokenName","toUpperCase","BOOLEAN","sanitize","isInteger","toString","parseInt","isNumber","parseFloat","DATETIME","toSQL","includeOffset","removeTableNamePrefix","removeTablePrefix","trim","snakeCase","trimEnd","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst EventEmitter = require(\"events\");\nconst path = require(\"path\");\n\nconst { _, quote, pushIntoBucket, get, naming, bin2Hex } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nconst GemlUtils = require(\"../../../lang/GemlUtils\");\nconst { pluralize, isDotSeparateName, extractDotSeparateName } = GemlUtils;\nconst Entity = require(\"../../../lang/Entity\");\nconst { Types } = require(\"@genx/data\");\n\nconst UNSUPPORTED_DEFAULT_VALUE = new Set([\"BLOB\", \"TEXT\", \"JSON\", \"GEOMETRY\"]);\n\n/**\n * Ooolong database modeler for mysql db.\n * @class\n */\nclass MySQLModeler {\n    /**\n     * @param {object} context\n     * @property {OolongLinker} context.linker - Oolong DSL linker\n     * @property {string} context.scriptPath - Generated script path\n     * @param {object} dbOptions\n     * @property {object} dbOptions.db\n     * @property {object} dbOptions.table\n     */\n    constructor(context, linker, connector, dbOptions) {\n        this.linker = linker;\n        this.outputPath = context.scriptPath;\n        this.connector = connector;\n\n        this._events = new EventEmitter();\n\n        this._dbOptions = dbOptions\n            ? {\n                  db: _.mapKeys(dbOptions.db, (value, key) => _.upperCase(key)),\n                  table: _.mapKeys(dbOptions.table, (value, key) => _.upperCase(key)),\n              }\n            : {};\n\n        this._references = {};\n        this._relationEntities = {};\n        this._processedRef = new Set();\n    }\n\n    modeling(schema, schemaToConnector, skipGeneration) {\n        if (!skipGeneration) {\n            this.linker.log(\"info\", 'Generating mysql scripts for schema \"' + schema.name + '\"...');\n        }\n\n        let modelingSchema = schema.clone();\n\n        this.linker.log(\"debug\", \"Building relations...\");\n\n        let pendingEntities = Object.keys(modelingSchema.entities);\n\n        while (pendingEntities.length > 0) {\n            let entityName = pendingEntities.shift();\n            let entity = modelingSchema.entities[entityName];\n\n            if (!_.isEmpty(entity.info.associations)) {\n                this.linker.log(\"debug\", `Processing associations of entity \"${entityName}\"...`);\n\n                let assocs = this._preProcessAssociations(entity);\n\n                let assocNames = assocs.reduce((result, v) => {\n                    result[v] = v;\n                    return result;\n                }, {});\n\n                entity.info.associations.forEach((assoc) =>\n                    this._processAssociation(modelingSchema, entity, assoc, assocNames, pendingEntities)\n                );\n            }\n        }\n\n        this._events.emit(\"afterRelationshipBuilding\");\n\n        //build SQL scripts\n        let sqlFilesDir = path.join(\"mysql\", this.connector.database);\n        let dbFilePath = path.join(sqlFilesDir, \"entities.sql\");\n        let fkFilePath = path.join(sqlFilesDir, \"relations.sql\");\n\n        let tableSQL = \"\",\n            relationSQL = \"\",\n            data = {};\n\n        //let mapOfEntityNameToCodeName = {};\n\n        _.each(modelingSchema.entities, (entity, entityName) => {\n            assert: entityName === entity.name;\n            //mapOfEntityNameToCodeName[entityName] = entity.code;\n\n            entity.addIndexes();\n\n            let result = MySQLModeler.complianceCheck(entity);\n            if (result.errors.length) {\n                let message = \"\";\n                if (result.warnings.length > 0) {\n                    message += \"Warnings: \\n\" + result.warnings.join(\"\\n\") + \"\\n\";\n                }\n                message += result.errors.join(\"\\n\");\n\n                throw new Error(message);\n            }\n\n            if (entity.features) {\n                _.forOwn(entity.features, (f, featureName) => {\n                    if (Array.isArray(f)) {\n                        f.forEach((ff) => this._featureReducer(modelingSchema, entity, featureName, ff));\n                    } else {\n                        this._featureReducer(modelingSchema, entity, featureName, f);\n                    }\n                });\n            }\n\n            if (!skipGeneration) {\n                tableSQL += this._createTableStatement(entityName, entity /*, mapOfEntityNameToCodeName*/) + \"\\n\";\n\n                if (entity.info.data) {\n                    entity.info.data.forEach(({ dataSet, runtimeEnv, records }) => {\n                        //intiSQL += `-- Initial data for entity: ${entityName}\\n`;\n\n                        let entityData = [];\n\n                        if (Array.isArray(records)) {\n                            records.forEach((record) => {\n                                if (!_.isPlainObject(record)) {\n                                    let fields = Object.keys(entity.fields);\n                                    if (fields.length !== 2) {\n                                        throw new Error(\n                                            `Invalid data syntax: entity \"${entity.name}\" has more than 2 fields.`\n                                        );\n                                    }\n\n                                    let keyField = entity.fields[fields[0]];\n\n                                    if (!keyField.auto && !keyField.defaultByDb) {\n                                        throw new Error(\n                                            `The key field \"${entity.name}\" has no default value or auto-generated value.`\n                                        );\n                                    }\n\n                                    record = { [fields[1]]: this.linker.translateOolValue(entity.gemlModule, record) };\n                                } else {\n                                    record = this.linker.translateOolValue(entity.gemlModule, record);\n                                }\n\n                                entityData.push(record);\n                            });\n                        } else {\n                            _.forOwn(records, (record, key) => {\n                                if (!_.isPlainObject(record)) {\n                                    let fields = Object.keys(entity.fields);\n                                    if (fields.length !== 2) {\n                                        throw new Error(\n                                            `Invalid data syntax: entity \"${entity.name}\" has more than 2 fields.`\n                                        );\n                                    }\n\n                                    record = {\n                                        [entity.key]: key,\n                                        [fields[1]]: this.linker.translateOolValue(entity.gemlModule, record),\n                                    };\n                                } else {\n                                    record = Object.assign(\n                                        { [entity.key]: key },\n                                        this.linker.translateOolValue(entity.gemlModule, record)\n                                    );\n                                }\n\n                                entityData.push(record);\n                                //intiSQL += 'INSERT INTO `' + entityName + '` SET ' + _.map(record, (v,k) => '`' + k + '` = ' + JSON.stringify(v)).join(', ') + ';\\n';\n                            });\n                        }\n\n                        if (!_.isEmpty(entityData)) {\n                            dataSet || (dataSet = \"_init\");\n                            runtimeEnv || (runtimeEnv = \"default\");\n\n                            let nodes = [dataSet, runtimeEnv];\n\n                            nodes.push(entityName);\n\n                            let key = nodes.join(\".\");\n\n                            pushIntoBucket(data, key, entityData, true);\n                        }\n                    });\n\n                    //intiSQL += '\\n';\n                }\n            }\n        });\n\n        if (!skipGeneration) {\n            _.forOwn(this._references, (refs, srcEntityName) => {\n                _.each(refs, (ref) => {\n                    relationSQL +=\n                        this._addForeignKeyStatement(\n                            srcEntityName,\n                            ref,\n                            schemaToConnector /*, mapOfEntityNameToCodeName*/\n                        ) + \"\\n\";\n                });\n            });\n\n            this._writeFile(path.join(this.outputPath, dbFilePath), tableSQL);\n            this._writeFile(path.join(this.outputPath, fkFilePath), relationSQL);\n\n            let initIdxFiles = {};\n\n            if (!_.isEmpty(data)) {\n                _.forOwn(data, (envData, dataSet) => {\n                    _.forOwn(envData, (entitiesData, runtimeEnv) => {\n                        _.forOwn(entitiesData, (records, entityName) => {\n                            let initFileName = `0-${entityName}.json`;\n\n                            let pathNodes = [sqlFilesDir, \"data\", dataSet || \"_init\"];\n\n                            if (runtimeEnv !== \"default\") {\n                                pathNodes.push(runtimeEnv);\n                            }\n\n                            let initFilePath = path.join(...pathNodes, initFileName);\n                            let idxFilePath = path.join(...pathNodes, \"index.list\");\n\n                            pushIntoBucket(initIdxFiles, [idxFilePath], initFileName);\n\n                            this._writeFile(\n                                path.join(this.outputPath, initFilePath),\n                                JSON.stringify({ [entityName]: records }, null, 4)\n                            );\n                        });\n                    });\n                });\n            }\n\n            //console.dir(initIdxFiles, {depth: 10});\n\n            _.forOwn(initIdxFiles, (list, filePath) => {\n                let idxFilePath = path.join(this.outputPath, filePath);\n\n                let manual = [];\n\n                if (fs.existsSync(idxFilePath)) {\n                    let lines = fs.readFileSync(idxFilePath, \"utf8\").split(\"\\n\");\n                    lines.forEach((line) => {\n                        if (!line.startsWith(\"0-\")) {\n                            manual.push(line);\n                        }\n                    });\n                }\n\n                this._writeFile(idxFilePath, list.concat(manual).join(\"\\n\"));\n            });\n\n            let funcSQL = \"\";\n\n            //process view\n            /*\n            _.each(modelingSchema.views, (view, viewName) => {\n                view.inferTypeInfo(modelingSchema);\n\n                funcSQL += `CREATE PROCEDURE ${dbService.getViewSPName(viewName)}(`;\n                \n                if (!_.isEmpty(view.params)) {\n                    let paramSQLs = [];\n                    view.params.forEach(param => {\n                        paramSQLs.push(`p${_.upperFirst(param.name)} ${MySQLModeler.columnDefinition(param, true)}`);\n                    });\n\n                    funcSQL += paramSQLs.join(', ');\n                }\n\n                funcSQL += `)\\nCOMMENT 'SP for view ${viewName}'\\nREADS SQL DATA\\nBEGIN\\n`;\n\n                funcSQL += this._viewDocumentToSQL(modelingSchema, view) + ';';\n\n                funcSQL += '\\nEND;\\n\\n';\n            });\n            */\n\n            let spFilePath = path.join(sqlFilesDir, \"procedures.sql\");\n            this._writeFile(path.join(this.outputPath, spFilePath), funcSQL);\n        }\n\n        return modelingSchema;\n    }\n\n    _toColumnReference(name) {\n        return { oorType: \"ColumnReference\", name };\n    }\n\n    _translateJoinCondition(context, localField, anchor, remoteField) {\n        if (Array.isArray(remoteField)) {\n            return remoteField.map((rf) => this._translateJoinCondition(context, localField, anchor, rf));\n        }\n\n        if (_.isPlainObject(remoteField)) {\n            let ret = { [localField]: this._toColumnReference(anchor + \".\" + remoteField.by) };\n            let withExtra = this._oolConditionToQueryCondition(context, remoteField.with);\n\n            if (localField in withExtra) {\n                return { $and: [ret, withExtra] };\n            }\n\n            return { ...ret, ...withExtra };\n        }\n\n        return { [localField]: this._toColumnReference(anchor + \".\" + remoteField) };\n    }\n\n    _getAllRelatedFields(remoteField) {\n        if (!remoteField) return undefined;\n\n        if (Array.isArray(remoteField)) {\n            return remoteField.map((rf) => this._getAllRelatedFields(rf));\n        }\n\n        if (_.isPlainObject(remoteField)) {\n            return remoteField.by;\n        }\n\n        return remoteField;\n    }\n\n    _preProcessAssociations(entity) {\n        return entity.info.associations.map((assoc) => {\n            if (assoc.srcField) return assoc.srcField;\n\n            if (assoc.type === \"hasMany\") {\n                return pluralize(assoc.destEntity);\n            }\n\n            return assoc.destEntity;\n        });\n    }\n\n    /**\n     * hasMany/hasOne - belongsTo\n     * hasMany/hasOne - hasMany/hasOne [by] [with]\n     * hasMany - semi connection\n     * refersTo - semi connection\n     *\n     * remoteField:\n     *   1. fieldName\n     *   2. array of fieldName\n     *   3. { by , with }\n     *   4. array of fieldName and { by , with } mixed\n     *\n     * @param {*} schema\n     * @param {*} entity\n     * @param {*} assoc\n     */\n    _processAssociation(schema, entity, assoc, assocNames, pendingEntities) {\n        let entityKeyField = entity.getKeyField();\n        assert: !Array.isArray(entityKeyField);\n\n        this.linker.log(\"debug\", `Processing \"${entity.name}\" ${JSON.stringify(assoc)}`);\n\n        let destEntityName = assoc.destEntity,\n            destEntity,\n            destEntityNameAsFieldName;\n\n        if (isDotSeparateName(destEntityName)) {\n            //cross db reference\n            let [destSchemaName, actualDestEntityName] = extractDotSeparateName(destEntityName);\n\n            let destSchema = schema.linker.schemas[destSchemaName];\n            if (!destSchema.linked) {\n                throw new Error(\n                    `The destination schema ${destSchemaName} has not been linked yet. Currently only support one-way reference for cross db relation.`\n                );\n            }\n\n            destEntity = destSchema.entities[actualDestEntityName];\n            destEntityNameAsFieldName = actualDestEntityName;\n        } else {\n            destEntity = schema.ensureGetEntity(entity.gemlModule, destEntityName, pendingEntities);\n            if (!destEntity) {\n                throw new Error(`Entity \"${entity.name}\" references to an unexisting entity \"${destEntityName}\".`);\n            }\n\n            destEntityNameAsFieldName = destEntityName;\n        }\n\n        if (!destEntity) {\n            throw new Error(`Entity \"${entity.name}\" references to an unexisting entity \"${destEntityName}\".`);\n        }\n\n        let destKeyField = destEntity.getKeyField();\n        assert: destKeyField,\n            `Empty key field \"${destEntity.keyField}\". Dest entity: ${destEntityName}, current entity: ${entity.name}`;\n\n        if (Array.isArray(destKeyField)) {\n            throw new Error(`Destination entity \"${destEntityName}\" with combination primary key is not supported.`);\n        }\n\n        switch (assoc.type) {\n            case \"hasOne\":\n            case \"hasMany\":\n                let includes;\n                let excludes = {\n                    types: [\"refersTo\"],\n                    association: assoc,\n                };\n\n                if (assoc.by) {\n                    excludes.types.push(\"belongsTo\");\n                    includes = {\n                        by: (cb) => cb && cb.split(\".\")[0] === assoc.by.split(\".\")[0],\n                    };\n\n                    if (assoc.with) {\n                        includes.with = assoc.with;\n                    }\n                } else {\n                    let remoteFields = this._getAllRelatedFields(assoc.remoteField);\n\n                    includes = {\n                        srcField: (remoteField) => {\n                            remoteField || (remoteField = entity.name);\n\n                            return (\n                                _.isNil(remoteFields) ||\n                                (Array.isArray(remoteFields)\n                                    ? remoteFields.indexOf(remoteField) > -1\n                                    : remoteFields === remoteField)\n                            );\n                        },\n                    };\n                }\n\n                let backRef = destEntity.getReferenceTo(entity.name, includes, excludes);\n                if (backRef) {\n                    if (backRef.type === \"hasMany\" || backRef.type === \"hasOne\") {\n                        if (!assoc.by) {\n                            throw new Error(\n                                '\"m2n\" association requires \"by\" property. Entity: ' +\n                                    entity.name +\n                                    \" destination: \" +\n                                    destEntityName\n                            );\n                        }\n\n                        // one/many to one/many relation\n\n                        let connectedByParts = assoc.by.split(\".\");\n                        assert: connectedByParts.length <= 2;\n\n                        // connected by field is usually a refersTo assoc\n                        let connectedByField = (connectedByParts.length > 1 && connectedByParts[1]) || entity.name;\n                        let connEntityName = GemlUtils.entityNaming(connectedByParts[0]);\n\n                        assert: connEntityName;\n\n                        let tag1 = `${entity.name}:${assoc.type === \"hasMany\" ? \"m\" : \"1\"}-${destEntityName}:${\n                            backRef.type === \"hasMany\" ? \"n\" : \"1\"\n                        } by ${connEntityName}`;\n                        let tag2 = `${destEntityName}:${backRef.type === \"hasMany\" ? \"m\" : \"1\"}-${entity.name}:${\n                            assoc.type === \"hasMany\" ? \"n\" : \"1\"\n                        } by ${connEntityName}`;\n\n                        if (assoc.srcField) {\n                            tag1 += \" \" + assoc.srcField;\n                        }\n\n                        if (backRef.srcField) {\n                            tag2 += \" \" + backRef.srcField;\n                        }\n\n                        if (this._processedRef.has(tag1) || this._processedRef.has(tag2)) {\n                            //already processed, skip\n                            return;\n                        }\n\n                        let connectedByParts2 = backRef.by.split(\".\");\n                        let connectedByField2 =\n                            (connectedByParts2.length > 1 && connectedByParts2[1]) || destEntityNameAsFieldName;\n\n                        if (connectedByField === connectedByField2) {\n                            throw new Error('Cannot use the same \"by\" field in a relation entity.');\n                        }\n\n                        let connEntity = schema.ensureGetEntity(entity.gemlModule, connEntityName, pendingEntities);\n                        if (!connEntity) {\n                            //create a\n                            connEntity = this._addRelationEntity(\n                                schema,\n                                connEntityName,\n                                entity.name,\n                                destEntityName,\n                                connectedByField,\n                                connectedByField2\n                            );\n                            pendingEntities.push(connEntity.name);\n                            this.linker.log(\"debug\", `New entity \"${connEntity.name}\" added by association.`);\n                        }\n\n                        this._updateRelationEntity(\n                            connEntity,\n                            entity,\n                            destEntity,\n                            entity.name,\n                            destEntityName,\n                            connectedByField,\n                            connectedByField2\n                        );\n\n                        let localFieldName = assoc.srcField || pluralize(destEntityNameAsFieldName);\n\n                        entity.addAssociation(localFieldName, {\n                            entity: connEntityName,\n                            key: connEntity.key,\n                            on: this._translateJoinCondition(\n                                { ...assocNames, [connEntityName]: localFieldName },\n                                entity.key,\n                                localFieldName,\n                                assoc.with\n                                    ? {\n                                          by: connectedByField,\n                                          with: assoc.with,\n                                      }\n                                    : connectedByField\n                            ),\n                            field: connectedByField,\n                            ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                            assoc: connectedByField2,\n                        });\n\n                        let remoteFieldName = backRef.srcField || pluralize(entity.name);\n\n                        destEntity.addAssociation(remoteFieldName, {\n                            entity: connEntityName,\n                            key: connEntity.key,\n                            on: this._translateJoinCondition(\n                                { ...assocNames, [connEntityName]: remoteFieldName },\n                                destEntity.key,\n                                remoteFieldName,\n                                backRef.with\n                                    ? {\n                                          by: connectedByField2,\n                                          with: backRef.with,\n                                      }\n                                    : connectedByField2\n                            ),\n                            field: connectedByField2,\n                            ...(backRef.type === \"hasMany\" ? { list: true } : {}),\n                            assoc: connectedByField,\n                        });\n\n                        this._processedRef.add(tag1);\n                        this.linker.log(\"verbose\", `Processed 2-way reference: ${tag1}`);\n\n                        this._processedRef.add(tag2);\n                        this.linker.log(\"verbose\", `Processed 2-way reference: ${tag2}`);\n                    } else if (backRef.type === \"belongsTo\") {\n                        if (assoc.by) {\n                            throw new Error(\"todo: belongsTo by. entity: \" + entity.name);\n                        } else {\n                            //leave it to the referenced entity\n                            let anchor =\n                                assoc.srcField ||\n                                (assoc.type === \"hasMany\"\n                                    ? pluralize(destEntityNameAsFieldName)\n                                    : destEntityNameAsFieldName);\n                            let remoteField = assoc.remoteField || backRef.srcField || entity.name;\n\n                            //check if the target entity has logical deletion feature\n                            if (destEntity.hasFeature(\"logicalDeletion\")) {\n                                let deletionCheck = {\n                                    oolType: \"BinaryExpression\",\n                                    operator: \"!=\",\n                                    left: {\n                                        oolType: \"ObjectReference\",\n                                        name: `${destEntityName}.${destEntity.features[\"logicalDeletion\"].field}`,\n                                    },\n                                    right: true,\n                                };\n\n                                if (_.isPlainObject(remoteField)) {\n                                    remoteField.with = {\n                                        oolType: \"LogicalExpression\",\n                                        operator: \"and\",\n                                        left: remoteField.with,\n                                        right: deletionCheck,\n                                    };\n                                } else if (assoc.with) {\n                                    assoc.with = {\n                                        oolType: \"LogicalExpression\",\n                                        operator: \"and\",\n                                        left: assoc.with,\n                                        right: deletionCheck,\n                                    };\n                                } else {\n                                    assoc.with = deletionCheck;\n                                }\n                            }\n\n                            entity.addAssociation(anchor, {\n                                entity: destEntityName,\n                                key: destEntity.key,\n                                on: this._translateJoinCondition(\n                                    { ...assocNames, [destEntityName]: anchor },\n                                    entity.key,\n                                    anchor,\n                                    assoc.with\n                                        ? {\n                                              by: remoteField,\n                                              with: assoc.with,\n                                          }\n                                        : remoteField\n                                ),\n                                ...(typeof remoteField === \"string\" ? { field: remoteField } : {}),\n                                ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                            });\n                        }\n                    } else {\n                        throw new Error(\n                            \"Unexpected path. Entity: \" +\n                                entity.name +\n                                \", association: \" +\n                                JSON.stringify(assoc, null, 2)\n                        );\n                    }\n                } else {\n                    // semi association\n\n                    let connectedByParts = assoc.by\n                        ? assoc.by.split(\".\")\n                        : [GemlUtils.prefixNaming(entity.name, destEntityName)];\n                    assert: connectedByParts.length <= 2;\n\n                    let connectedByField = (connectedByParts.length > 1 && connectedByParts[1]) || entity.name;\n                    let connEntityName = GemlUtils.entityNaming(connectedByParts[0]);\n\n                    assert: connEntityName;\n\n                    let tag1 = `${entity.name}:${\n                        assoc.type === \"hasMany\" ? \"m\" : \"1\"\n                    }-${destEntityName}:* by ${connEntityName}`;\n\n                    if (assoc.srcField) {\n                        tag1 += \" \" + assoc.srcField;\n                    }\n\n                    assert: !this._processedRef.has(tag1);\n\n                    let connEntity = schema.ensureGetEntity(entity.gemlModule, connEntityName, pendingEntities);\n                    if (!connEntity) {\n                        //create a\n                        connEntity = this._addRelationEntity(\n                            schema,\n                            connEntityName,\n                            entity.name,\n                            destEntityName,\n                            connectedByField,\n                            destEntityNameAsFieldName\n                        );\n                        pendingEntities.push(connEntity.name);\n                        this.linker.log(\"debug\", `New entity \"${connEntity.name}\" added by association.`);\n                    }\n\n                    //todo: get back ref from connection entity\n                    let connBackRef1 = connEntity.getReferenceTo(entity.name, {\n                        type: \"refersTo\",\n                        srcField: (f) => _.isNil(f) || f == connectedByField,\n                    });\n\n                    if (!connBackRef1) {\n                        throw new Error(\n                            `Cannot find back reference to \"${entity.name}\" from relation entity \"${connEntityName}\".`\n                        );\n                    }\n\n                    let connBackRef2 = connEntity.getReferenceTo(\n                        destEntityName,\n                        { type: \"refersTo\" },\n                        { association: connBackRef1 }\n                    );\n\n                    if (!connBackRef2) {\n                        throw new Error(\n                            `Cannot find back reference to \"${destEntityName}\" from relation entity \"${connEntityName}\".`\n                        );\n                    }\n\n                    let connectedByField2 = connBackRef2.srcField || destEntityNameAsFieldName;\n\n                    if (connectedByField === connectedByField2) {\n                        throw new Error(\n                            'Cannot use the same \"by\" field in a relation entity. Detail: ' +\n                                JSON.stringify({\n                                    src: entity.name,\n                                    dest: destEntityName,\n                                    srcField: assoc.srcField,\n                                    by: connectedByField,\n                                })\n                        );\n                    }\n\n                    this._updateRelationEntity(\n                        connEntity,\n                        entity,\n                        destEntity,\n                        entity.name,\n                        destEntityName,\n                        connectedByField,\n                        connectedByField2\n                    );\n\n                    let localFieldName = assoc.srcField || pluralize(destEntityNameAsFieldName);\n\n                    entity.addAssociation(localFieldName, {\n                        entity: connEntityName,\n                        key: connEntity.key,\n                        on: this._translateJoinCondition(\n                            {\n                                ...assocNames,\n                                [destEntityName]: localFieldName + \".\" + connectedByField2,\n                                [connEntityName]: localFieldName,\n                            },\n                            entity.key,\n                            localFieldName,\n                            assoc.with\n                                ? {\n                                      by: connectedByField,\n                                      with: assoc.with,\n                                  }\n                                : connectedByField\n                        ),\n                        field: connectedByField,\n                        ...(assoc.type === \"hasMany\" ? { list: true } : {}),\n                        assoc: connectedByField2,\n                    });\n\n                    this._processedRef.add(tag1);\n                    this.linker.log(\"verbose\", `Processed 1-way reference: ${tag1}`);\n                }\n\n                break;\n\n            case \"refersTo\":\n            case \"belongsTo\":\n                let localField = assoc.srcField || destEntityNameAsFieldName;\n                let destFieldName = destKeyField.name;\n                let referencedField = destKeyField;\n\n                if (assoc.type === \"refersTo\") {\n                    let tag = `${entity.name}:1-${destEntityName}:* ${localField}`;\n\n                    if (assoc.destField) {\n                        if (!destEntity.hasField(assoc.destField)) {\n                            throw new Error(\n                                `The field \"${assoc.destField}\" being referenced is not a field of entity \"${destEntityName}\".`\n                            );\n                        }\n\n                        destFieldName = assoc.destField;\n                        referencedField = destEntity.fields[destFieldName];\n                    }\n\n                    tag += \"->\" + assoc.destField;\n\n                    if (this._processedRef.has(tag)) {\n                        //already processed by connection, skip\n                        return;\n                    }\n\n                    this._processedRef.add(tag);\n                    this.linker.log(\"verbose\", `Processed week reference: ${tag}`);\n                }\n\n                let joinOn = { [localField]: this._toColumnReference(localField + \".\" + destFieldName) };\n\n                if (assoc.with) {\n                    Object.assign(\n                        joinOn,\n                        this._oolConditionToQueryCondition({ ...assocNames, [destEntityName]: localField }, assoc.with)\n                    );\n                }\n\n                entity.addAssocField(localField, destEntity, referencedField, assoc.fieldProps);\n                entity.addAssociation(localField, {\n                    type: assoc.type,\n                    entity: destEntityName,\n                    key: destEntity.key,\n                    field: destFieldName,\n                    on: joinOn,\n                });\n\n                //foreign key constraits\n                let localFieldObj = entity.fields[localField];\n\n                let constraints = {};\n\n                if (localFieldObj.constraintOnUpdate) {\n                    constraints.onUpdate = localFieldObj.constraintOnUpdate;\n                }\n\n                if (localFieldObj.constraintOnDelete) {\n                    constraints.onDelete = localFieldObj.constraintOnDelete;\n                }\n\n                if (assoc.type === \"belongsTo\") {\n                    constraints.onUpdate || (constraints.onUpdate = \"CASCADE\");\n                    constraints.onDelete || (constraints.onDelete = \"CASCADE\");\n                } else if (localFieldObj.optional) {\n                    constraints.onUpdate || (constraints.onUpdate = \"SET NULL\");\n                    constraints.onDelete || (constraints.onDelete = \"SET NULL\");\n                }\n\n                constraints.onUpdate || (constraints.onUpdate = \"NO ACTION\");\n                constraints.onDelete || (constraints.onDelete = \"NO ACTION\");\n\n                this._addReference(entity.name, localField, destEntityName, destFieldName, constraints);\n                break;\n        }\n    }\n\n    _oolConditionToQueryCondition(context, oolCon) {\n        assert: oolCon.oolType;\n\n        if (oolCon.oolType === \"BinaryExpression\") {\n            if (oolCon.operator === \"==\") {\n                let left = oolCon.left;\n                if (left.oolType && left.oolType === \"ObjectReference\") {\n                    left = this._translateReference(context, left.name, true);\n                }\n\n                let right = oolCon.right;\n                if (right.oolType && right.oolType === \"ObjectReference\") {\n                    right = this._translateReference(context, right.name);\n                }\n\n                return {\n                    [left]: { $eq: right },\n                };\n            } else if (oolCon.operator === \"!=\") {\n                let left = oolCon.left;\n                if (left.oolType && left.oolType === \"ObjectReference\") {\n                    left = this._translateReference(context, left.name, true);\n                }\n\n                let right = oolCon.right;\n                if (right.oolType && right.oolType === \"ObjectReference\") {\n                    right = this._translateReference(context, right.name);\n                }\n\n                return {\n                    [left]: { $ne: right },\n                };\n            }\n        } else if (oolCon.oolType === \"UnaryExpression\") {\n            let arg;\n\n            switch (oolCon.operator) {\n                case \"is-null\":\n                    arg = oolCon.argument;\n                    if (arg.oolType && arg.oolType === \"ObjectReference\") {\n                        arg = this._translateReference(context, arg.name, true);\n                    }\n\n                    return {\n                        [arg]: { $eq: null },\n                    };\n\n                case \"is-not-null\":\n                    arg = oolCon.argument;\n                    if (arg.oolType && arg.oolType === \"ObjectReference\") {\n                        arg = this._translateReference(context, arg.name, true);\n                    }\n\n                    return {\n                        [arg]: { $ne: null },\n                    };\n\n                default:\n                    throw new Error(\"Unknown UnaryExpression operator: \" + oolCon.operator);\n            }\n        } else if (oolCon.oolType === \"LogicalExpression\") {\n            switch (oolCon.operator) {\n                case \"and\":\n                    return {\n                        $and: [\n                            this._oolConditionToQueryCondition(context, oolCon.left),\n                            this._oolConditionToQueryCondition(context, oolCon.right),\n                        ],\n                    };\n\n                case \"or\":\n                    return {\n                        $or: [\n                            this._oolConditionToQueryCondition(context, oolCon.left),\n                            this._oolConditionToQueryCondition(context, oolCon.right),\n                        ],\n                    };\n            }\n        }\n\n        throw new Error(\"Unknown syntax: \" + JSON.stringify(oolCon));\n    }\n\n    _translateReference(context, ref, asKey) {\n        let [base, ...other] = ref.split(\".\");\n\n        let translated = context[base];\n        if (!translated) {\n            console.log(context);\n            throw new Error(`Referenced object \"${ref}\" not found in context.`);\n        }\n\n        let refName = [translated, ...other].join(\".\");\n\n        if (asKey) {\n            return refName;\n        }\n\n        return this._toColumnReference(refName);\n    }\n\n    _addReference(left, leftField, right, rightField, constraints) {\n        if (Array.isArray(leftField)) {\n            leftField.forEach((lf) => this._addReference(left, lf, right, rightField, constraints));\n            return;\n        }\n\n        if (_.isPlainObject(leftField)) {\n            this._addReference(left, leftField.by, right.rightField, constraints);\n            return;\n        }\n\n        assert: typeof leftField === \"string\";\n\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            refs4LeftEntity = [];\n            this._references[left] = refs4LeftEntity;\n        } else {\n            let found = _.find(\n                refs4LeftEntity,\n                (item) => item.leftField === leftField && item.right === right && item.rightField === rightField\n            );\n\n            if (found) return;\n        }\n\n        refs4LeftEntity.push({ leftField, right, rightField, constraints });\n    }\n\n    _getReferenceOfField(left, leftField) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            return undefined;\n        }\n\n        let reference = _.find(refs4LeftEntity, (item) => item.leftField === leftField);\n\n        if (!reference) {\n            return undefined;\n        }\n\n        return reference;\n    }\n\n    _hasReferenceOfField(left, leftField) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) return false;\n\n        return undefined !== _.find(refs4LeftEntity, (item) => item.leftField === leftField);\n    }\n\n    _getReferenceBetween(left, right) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) {\n            return undefined;\n        }\n\n        let reference = _.find(refs4LeftEntity, (item) => item.right === right);\n\n        if (!reference) {\n            return undefined;\n        }\n\n        return reference;\n    }\n\n    _hasReferenceBetween(left, right) {\n        let refs4LeftEntity = this._references[left];\n        if (!refs4LeftEntity) return false;\n\n        return undefined !== _.find(refs4LeftEntity, (item) => item.right === right);\n    }\n\n    _featureReducer(schema, entity, featureName, feature) {\n        let field;\n\n        switch (featureName) {\n            case \"autoId\":\n                field = entity.fields[feature.field];\n\n                if (field.type === \"integer\" && !field.generator) {\n                    field.autoIncrementId = true;\n                    if (\"startFrom\" in feature) {\n                        this._events.once(\"setTableOptions:\" + entity.name, (extraOpts) => {\n                            extraOpts[\"AUTO_INCREMENT\"] = feature.startFrom;\n                        });\n                    }\n                }\n                break;\n\n            case \"createTimestamp\":\n                field = entity.fields[feature.field];\n                field.isCreateTimestamp = true;\n                break;\n\n            case \"updateTimestamp\":\n                field = entity.fields[feature.field];\n                field.isUpdateTimestamp = true;\n                break;\n\n            case \"userEditTracking\":\n                break;\n\n            case \"logicalDeletion\":\n                break;\n\n            case \"atLeastOneNotNull\":\n                break;\n\n            case \"validateAllFieldsOnCreation\":\n                break;\n\n            case \"stateTracking\":\n                break;\n\n            case \"i18n\":\n                break;\n\n            case \"changeLog\":\n                let changeLogSettings = get(schema.deploymentSettings, \"features.changeLog\");\n\n                if (!changeLogSettings) {\n                    throw new Error(\n                        `Missing \"changeLog\" feature settings in deployment config for schema [${schema.name}].`\n                    );\n                }\n\n                if (!changeLogSettings.dataSource) {\n                    throw new Error(`\"changeLog.dataSource\" is required. Schema: ${schema.name}`);\n                }\n\n                Object.assign(feature, changeLogSettings);\n                break;\n\n            default:\n                throw new Error('Unsupported feature \"' + featureName + '\".');\n        }\n    }\n\n    _writeFile(filePath, content) {\n        fs.ensureFileSync(filePath);\n        fs.writeFileSync(filePath, content);\n\n        this.linker.log(\"info\", \"Generated db script: \" + filePath);\n    }\n\n    _addRelationEntity(\n        schema,\n        relationEntityName,\n        entity1Name /* for cross db */,\n        entity2Name /* for cross db */,\n        entity1RefField,\n        entity2RefField\n    ) {\n        let entityInfo = {\n            features: [\"autoId\", \"createTimestamp\"],\n            indexes: [\n                {\n                    fields: [entity1RefField, entity2RefField],\n                    unique: true,\n                },\n            ],\n            associations: [\n                {\n                    type: \"refersTo\",\n                    destEntity: entity1Name,\n                    srcField: entity1RefField,\n                },\n                {\n                    type: \"refersTo\",\n                    destEntity: entity2Name,\n                    srcField: entity2RefField,\n                },\n            ],\n        };\n\n        let entity = new Entity(this.linker, relationEntityName, schema.gemlModule, entityInfo);\n        entity.link();\n\n        schema.addEntity(entity);\n\n        return entity;\n    }\n\n    /**\n     *\n     * @param {*} relationEntity\n     * @param {*} entity1\n     * @param {*} entity2\n     * @param {*} entity1Name\n     * @param {*} entity2Name\n     * @param {*} connectedByField\n     * @param {*} connectedByField2\n     */\n    _updateRelationEntity(\n        relationEntity,\n        entity1,\n        entity2,\n        entity1Name /* for cross db */,\n        entity2Name /* for cross db */,\n        connectedByField,\n        connectedByField2\n    ) {\n        let relationEntityName = relationEntity.name;\n\n        this._relationEntities[relationEntityName] = true;\n\n        if (relationEntity.info.associations) {\n            // check if the relation entity has the refersTo both side of associations\n            let hasRefToEntity1 = false,\n                hasRefToEntity2 = false;\n\n            _.each(relationEntity.info.associations, (assoc) => {\n                if (\n                    assoc.type === \"refersTo\" &&\n                    assoc.destEntity === entity1Name &&\n                    (assoc.srcField || entity1Name) === connectedByField\n                ) {\n                    hasRefToEntity1 = true;\n                }\n\n                if (\n                    assoc.type === \"refersTo\" &&\n                    assoc.destEntity === entity2Name &&\n                    (assoc.srcField || entity2Name) === connectedByField2\n                ) {\n                    hasRefToEntity2 = true;\n                }\n            });\n\n            if (hasRefToEntity1 && hasRefToEntity2) {\n                //yes, don't need to add refersTo to the relation entity\n                return;\n            }\n        }\n\n        let tag1 = `${relationEntityName}:1-${entity1Name}:* ${connectedByField}`;\n        let tag2 = `${relationEntityName}:1-${entity2Name}:* ${connectedByField2}`;\n\n        if (this._processedRef.has(tag1)) {\n            assert: this._processedRef.has(tag2);\n\n            //already processed, skip\n            return;\n        }\n\n        this._processedRef.add(tag1);\n        this.linker.log(\"verbose\", `Processed bridging reference: ${tag1}`);\n\n        this._processedRef.add(tag2);\n        this.linker.log(\"verbose\", `Processed bridging reference: ${tag2}`);\n\n        let keyEntity1 = entity1.getKeyField();\n        if (Array.isArray(keyEntity1)) {\n            throw new Error(`Combination primary key is not supported. Entity: ${entity1Name}`);\n        }\n\n        let keyEntity2 = entity2.getKeyField();\n        if (Array.isArray(keyEntity2)) {\n            throw new Error(`Combination primary key is not supported. Entity: ${entity2Name}`);\n        }\n\n        relationEntity.addAssocField(connectedByField, entity1, keyEntity1);\n        relationEntity.addAssocField(connectedByField2, entity2, keyEntity2);\n\n        relationEntity.addAssociation(connectedByField, { entity: entity1Name });\n        relationEntity.addAssociation(connectedByField2, { entity: entity2Name });\n\n        let allCascade = { onUpdate: \"RESTRICT\", onDelete: \"RESTRICT\" };\n\n        this._addReference(relationEntityName, connectedByField, entity1Name, keyEntity1.name, allCascade);\n        this._addReference(relationEntityName, connectedByField2, entity2Name, keyEntity2.name, allCascade);\n    }\n\n    static oolOpToSql(op) {\n        switch (op) {\n            case \"=\":\n                return \"=\";\n\n            default:\n                throw new Error(\"oolOpToSql to be implemented.\");\n        }\n    }\n\n    static oolToSql(schema, doc, ool, params) {\n        if (!ool.oolType) {\n            return ool;\n        }\n\n        switch (ool.oolType) {\n            case \"BinaryExpression\":\n                let left, right;\n\n                if (ool.left.oolType) {\n                    left = MySQLModeler.oolToSql(schema, doc, ool.left, params);\n                } else {\n                    left = ool.left;\n                }\n\n                if (ool.right.oolType) {\n                    right = MySQLModeler.oolToSql(schema, doc, ool.right, params);\n                } else {\n                    right = ool.right;\n                }\n\n                return left + \" \" + MySQLModeler.oolOpToSql(ool.operator) + \" \" + right;\n\n            case \"ObjectReference\":\n                if (!GemlUtils.isMemberAccess(ool.name)) {\n                    if (params && _.find(params, (p) => p.name === ool.name) !== -1) {\n                        return \"p\" + _.upperFirst(ool.name);\n                    }\n\n                    throw new Error(`Referencing to a non-existing param \"${ool.name}\".`);\n                }\n\n                let { entityNode, entity, field } = GemlUtils.parseReferenceInDocument(schema, doc, ool.name);\n\n                return entityNode.alias + \".\" + MySQLModeler.quoteIdentifier(field.name);\n\n            default:\n                throw new Error(\"oolToSql to be implemented.\");\n        }\n    }\n\n    static _orderByToSql(schema, doc, ool) {\n        return (\n            MySQLModeler.oolToSql(schema, doc, { oolType: \"ObjectReference\", name: ool.field }) +\n            (ool.ascend ? \"\" : \" DESC\")\n        );\n    }\n\n    _viewDocumentToSQL(modelingSchema, view) {\n        let sql = \"  \";\n        //console.log('view: ' + view.name);\n        let doc = _.cloneDeep(view.getDocumentHierarchy(modelingSchema));\n        //console.dir(doc, {depth: 8, colors: true});\n\n        //let aliasMapping = {};\n        let [colList, alias, joins] = this._buildViewSelect(modelingSchema, doc, 0);\n\n        sql += \"SELECT \" + colList.join(\", \") + \" FROM \" + MySQLModeler.quoteIdentifier(doc.entity) + \" AS \" + alias;\n\n        if (!_.isEmpty(joins)) {\n            sql += \" \" + joins.join(\" \");\n        }\n\n        if (!_.isEmpty(view.selectBy)) {\n            sql +=\n                \" WHERE \" +\n                view.selectBy\n                    .map((select) => MySQLModeler.oolToSql(modelingSchema, doc, select, view.params))\n                    .join(\" AND \");\n        }\n\n        if (!_.isEmpty(view.groupBy)) {\n            sql +=\n                \" GROUP BY \" +\n                view.groupBy.map((col) => MySQLModeler._orderByToSql(modelingSchema, doc, col)).join(\", \");\n        }\n\n        if (!_.isEmpty(view.orderBy)) {\n            sql +=\n                \" ORDER BY \" +\n                view.orderBy.map((col) => MySQLModeler._orderByToSql(modelingSchema, doc, col)).join(\", \");\n        }\n\n        let skip = view.skip || 0;\n        if (view.limit) {\n            sql +=\n                \" LIMIT \" +\n                MySQLModeler.oolToSql(modelingSchema, doc, skip, view.params) +\n                \", \" +\n                MySQLModeler.oolToSql(modelingSchema, doc, view.limit, view.params);\n        } else if (view.skip) {\n            sql += \" OFFSET \" + MySQLModeler.oolToSql(modelingSchema, doc, view.skip, view.params);\n        }\n\n        return sql;\n    }\n\n    /*\n    _buildViewSelect(schema, doc, startIndex) {\n        let entity = schema.entities[doc.entity];\n        let alias = ntol(startIndex++);\n        doc.alias = alias;\n\n        let colList = Object.keys(entity.fields).map(k => alias + '.' + MySQLModeler.quoteIdentifier(k));\n        let joins = [];\n\n        if (!_.isEmpty(doc.subDocuments)) {\n            _.forOwn(doc.subDocuments, (doc, fieldName) => {\n                let [ subColList, subAlias, subJoins, startIndex2 ] = this._buildViewSelect(schema, doc, startIndex);\n                startIndex = startIndex2;\n                colList = colList.concat(subColList);\n                \n                joins.push('LEFT JOIN ' + MySQLModeler.quoteIdentifier(doc.entity) + ' AS ' + subAlias\n                    + ' ON ' + alias + '.' + MySQLModeler.quoteIdentifier(fieldName) + ' = ' +\n                    subAlias + '.' + MySQLModeler.quoteIdentifier(doc.linkWithField));\n\n                if (!_.isEmpty(subJoins)) {\n                    joins = joins.concat(subJoins);\n                }\n            });\n        }\n\n        return [ colList, alias, joins, startIndex ];\n    }*/\n\n    _createTableStatement(entityName, entity /*, mapOfEntityNameToCodeName*/) {\n        let sql = \"CREATE TABLE IF NOT EXISTS `\" + entityName + \"` (\\n\";\n\n        //column definitions\n        _.each(entity.fields, (field, name) => {\n            sql += \"  \" + MySQLModeler.quoteIdentifier(name) + \" \" + MySQLModeler.columnDefinition(field) + \",\\n\";\n        });\n\n        //primary key\n        sql += \"  PRIMARY KEY (\" + MySQLModeler.quoteListOrValue(entity.key) + \"),\\n\";\n\n        //other keys\n        if (entity.indexes && entity.indexes.length > 0) {\n            entity.indexes.forEach((index) => {\n                sql += \"  \";\n                if (index.unique) {\n                    sql += \"UNIQUE \";\n                }\n                sql += \"KEY (\" + MySQLModeler.quoteListOrValue(index.fields) + \"),\\n\";\n            });\n        }\n\n        let lines = [];\n        this._events.emit(\"beforeEndColumnDefinition:\" + entityName, lines);\n        if (lines.length > 0) {\n            sql += \"  \" + lines.join(\",\\n  \");\n        } else {\n            sql = sql.substr(0, sql.length - 2);\n        }\n\n        sql += \"\\n)\";\n\n        //table options\n        let extraProps = {};\n        this._events.emit(\"setTableOptions:\" + entityName, extraProps);\n        let props = Object.assign({}, this._dbOptions.table, extraProps);\n\n        sql = _.reduce(\n            props,\n            function (result, value, key) {\n                return result + \" \" + key + \"=\" + value;\n            },\n            sql\n        );\n\n        sql += \";\\n\";\n\n        return sql;\n    }\n\n    _addForeignKeyStatement(entityName, relation, schemaToConnector /*, mapOfEntityNameToCodeName*/) {\n        let refTable = relation.right;\n\n        if (refTable.indexOf(\".\") > 0) {\n            let [schemaName, refEntityName] = refTable.split(\".\");\n\n            let targetConnector = schemaToConnector[schemaName];\n            assert: targetConnector;\n\n            refTable = targetConnector.database + \"`.`\" + refEntityName;\n        }\n\n        let sql =\n            \"ALTER TABLE `\" +\n            entityName +\n            \"` ADD FOREIGN KEY (`\" +\n            relation.leftField +\n            \"`) \" +\n            \"REFERENCES `\" +\n            refTable +\n            \"` (`\" +\n            relation.rightField +\n            \"`) \";\n\n        sql += `ON UPDATE ${relation.constraints.onUpdate} ON DELETE ${relation.constraints.onDelete};\\n`;\n\n        return sql;\n    }\n\n    static foreignKeyFieldNaming(entityName, entity) {\n        let leftPart = naming.camelCase(entityName);\n        let rightPart = naming.pascalCase(entity.key);\n\n        if (_.endsWith(leftPart, rightPart)) {\n            return leftPart;\n        }\n\n        return leftPart + rightPart;\n    }\n\n    static quoteString(str) {\n        return \"'\" + str.replace(/'/g, \"\\\\'\") + \"'\";\n    }\n\n    static quoteIdentifier(str) {\n        return \"`\" + str + \"`\";\n    }\n\n    static quoteListOrValue(obj) {\n        return _.isArray(obj)\n            ? obj.map((v) => MySQLModeler.quoteIdentifier(v)).join(\", \")\n            : MySQLModeler.quoteIdentifier(obj);\n    }\n\n    static complianceCheck(entity) {\n        let result = { errors: [], warnings: [] };\n\n        if (!entity.key) {\n            result.errors.push(\"Primary key is not specified.\");\n        }\n\n        return result;\n    }\n\n    static columnDefinition(field, isProc) {\n        let col;\n\n        switch (field.type) {\n            case \"integer\":\n                col = MySQLModeler.intColumnDefinition(field);\n                break;\n\n            case \"number\":\n                col = MySQLModeler.floatColumnDefinition(field);\n                break;\n\n            case \"text\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            case \"boolean\":\n                col = MySQLModeler.boolColumnDefinition(field);\n                break;\n\n            case \"binary\":\n                col = MySQLModeler.binaryColumnDefinition(field);\n                break;\n\n            case \"datetime\":\n                col = MySQLModeler.datetimeColumnDefinition(field);\n                break;\n\n            case \"object\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            case \"enum\":\n                col = MySQLModeler.enumColumnDefinition(field);\n                break;\n\n            case \"array\":\n                col = MySQLModeler.textColumnDefinition(field);\n                break;\n\n            default:\n                throw new Error('Unsupported type \"' + field.type + '\".');\n        }\n\n        let { sql, type } = col;\n\n        if (!isProc) {\n            sql += this.columnNullable(field);\n            sql += this.defaultValue(field, type);\n        }\n\n        return sql;\n    }\n\n    static intColumnDefinition(info) {\n        let sql, type;\n\n        if (info.digits) {\n            if (info.digits > 10) {\n                type = sql = \"BIGINT\";\n            } else if (info.digits > 7) {\n                type = sql = \"INT\";\n            } else if (info.digits > 4) {\n                type = sql = \"MEDIUMINT\";\n            } else if (info.digits > 2) {\n                type = sql = \"SMALLINT\";\n            } else {\n                type = sql = \"TINYINT\";\n            }\n\n            sql += `(${info.digits})`;\n        } else {\n            type = sql = \"INT\";\n        }\n\n        if (info.unsigned) {\n            sql += \" UNSIGNED\";\n        }\n\n        return { sql, type };\n    }\n\n    static floatColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.type == \"number\" && info.exact) {\n            type = sql = \"DECIMAL\";\n\n            if (info.totalDigits > 65) {\n                throw new Error(\"Total digits exceed maximum limit.\");\n            }\n        } else {\n            if (info.totalDigits > 23) {\n                type = sql = \"DOUBLE\";\n\n                if (info.totalDigits > 53) {\n                    throw new Error(\"Total digits exceed maximum limit.\");\n                }\n            } else {\n                type = sql = \"FLOAT\";\n            }\n        }\n\n        if (\"totalDigits\" in info) {\n            sql += \"(\" + info.totalDigits;\n            if (\"decimalDigits\" in info) {\n                sql += \", \" + info.decimalDigits;\n            }\n            sql += \")\";\n        } else {\n            if (\"decimalDigits\" in info) {\n                if (info.decimalDigits > 23) {\n                    sql += \"(53, \" + info.decimalDigits + \")\";\n                } else {\n                    sql += \"(23, \" + info.decimalDigits + \")\";\n                }\n            }\n        }\n\n        return { sql, type };\n    }\n\n    static textColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.fixedLength && info.fixedLength <= 255) {\n            sql = \"CHAR(\" + info.fixedLength + \")\";\n            type = \"CHAR\";\n        } else if (info.maxLength) {\n            if (info.maxLength > 16777215) {\n                type = sql = \"LONGTEXT\";\n            } else if (info.maxLength > 65535) {\n                type = sql = \"MEDIUMTEXT\";\n            } else if (info.maxLength > 2000) {\n                type = sql = \"TEXT\";\n            } else {\n                type = sql = \"VARCHAR\";\n                if (info.fixedLength) {\n                    sql += \"(\" + info.fixedLength + \")\";\n                } else {\n                    sql += \"(\" + info.maxLength + \")\";\n                }\n            }\n        } else {\n            type = sql = \"TEXT\";\n        }\n\n        return { sql, type };\n    }\n\n    static binaryColumnDefinition(info) {\n        let sql = \"\",\n            type;\n\n        if (info.fixedLength <= 255) {\n            sql = \"BINARY(\" + info.fixedLength + \")\";\n            type = \"BINARY\";\n        } else if (info.maxLength) {\n            if (info.maxLength > 16777215) {\n                type = sql = \"LONGBLOB\";\n            } else if (info.maxLength > 65535) {\n                type = sql = \"MEDIUMBLOB\";\n            } else {\n                type = sql = \"VARBINARY\";\n                if (info.fixedLength) {\n                    sql += \"(\" + info.fixedLength + \")\";\n                } else {\n                    sql += \"(\" + info.maxLength + \")\";\n                }\n            }\n        } else {\n            type = sql = \"BLOB\";\n        }\n\n        return { sql, type };\n    }\n\n    static boolColumnDefinition() {\n        return { sql: \"TINYINT(1)\", type: \"TINYINT\" };\n    }\n\n    static datetimeColumnDefinition(info) {\n        let sql;\n\n        if (!info.range || info.range === \"datetime\") {\n            sql = \"DATETIME\";\n        } else if (info.range === \"date\") {\n            sql = \"DATE\";\n        } else if (info.range === \"time\") {\n            sql = \"TIME\";\n        } else if (info.range === \"year\") {\n            sql = \"YEAR\";\n        } else if (info.range === \"timestamp\") {\n            sql = \"TIMESTAMP\";\n        }\n\n        return { sql, type: sql };\n    }\n\n    static enumColumnDefinition(info) {\n        return { sql: \"ENUM(\" + _.map(info.values, (v) => MySQLModeler.quoteString(v)).join(\", \") + \")\", type: \"ENUM\" };\n    }\n\n    static columnNullable(info) {\n        if (info.hasOwnProperty(\"optional\") && info.optional) {\n            return \" NULL\";\n        }\n\n        return \" NOT NULL\";\n    }\n\n    static defaultValue(info, type) {\n        if (info.isCreateTimestamp) {\n            info.createByDb = true;\n            return \" DEFAULT CURRENT_TIMESTAMP\";\n        }\n\n        if (info.autoIncrementId) {\n            info.createByDb = true;\n            return \" AUTO_INCREMENT\";\n        }\n\n        if (info.isUpdateTimestamp) {\n            info.updateByDb = true;\n            return \" ON UPDATE CURRENT_TIMESTAMP\";\n        }\n\n        let sql = \"\";\n\n        if (!info.optional) {\n            if (info.hasOwnProperty(\"default\")) {\n                let defaultValue = info[\"default\"];\n\n                if (typeof defaultValue === \"object\" && defaultValue.oorType === \"SymbolToken\") {\n                    const tokenName = defaultValue.name.toUpperCase();\n\n                    switch (tokenName) {\n                        case \"NOW\":\n                            sql += \" DEFAULT NOW()\";\n                            info.createByDb = true;\n                            break;\n\n                        default:\n                            throw new Error(`Unsupported symbol token \"${tokenName}\".`);\n                    }\n                } else {\n                    switch (info.type) {\n                        case \"boolean\":\n                            sql += \" DEFAULT \" + (Types.BOOLEAN.sanitize(defaultValue) ? \"1\" : \"0\");\n                            break;\n\n                        case \"integer\":\n                            if (_.isInteger(defaultValue)) {\n                                sql += \" DEFAULT \" + defaultValue.toString();\n                            } else {\n                                sql += \" DEFAULT \" + parseInt(defaultValue).toString();\n                            }\n                            break;\n\n                        case \"text\":\n                        case \"enum\":\n                            sql += \" DEFAULT \" + quote(defaultValue);\n                            break;\n\n                        case \"number\":\n                            if (_.isNumber(defaultValue)) {\n                                sql += \" DEFAULT \" + defaultValue.toString();\n                            } else {\n                                sql += \" DEFAULT \" + parseFloat(defaultValue).toString();\n                            }\n                            break;\n\n                        case \"binary\":\n                            sql += \" DEFAULT \" + bin2Hex(defaultValue);\n                            break;\n\n                        case \"datetime\":\n                            sql +=\n                                \" DEFAULT \" +\n                                quote(Types.DATETIME.sanitize(defaultValue).toSQL({ includeOffset: false }));\n                            break;\n\n                        case \"object\":\n                        case \"array\":\n                            sql += \" DEFAULT \" + quote(JSON.stringify(defaultValue));\n                            break;\n\n                        default:\n                            throw new Error(`Invalid type \"${info.type}\"`);\n                    }\n                }\n            } else if (!info.hasOwnProperty(\"auto\")) {\n                if (UNSUPPORTED_DEFAULT_VALUE.has(type)) {\n                    return \"\";\n                }\n\n                if (info.type === \"boolean\" || info.type === \"integer\" || info.type === \"number\") {\n                    sql += \" DEFAULT 0\";\n                } else if (info.type === \"datetime\") {\n                    sql += \" DEFAULT CURRENT_TIMESTAMP\";\n                } else if (info.type === \"enum\") {\n                    sql += \" DEFAULT \" + quote(info.values[0]);\n                    info.createByDb = true;\n                } else {\n                    sql += ' DEFAULT \"\"';\n                }\n\n                //not explicit specified, will not treated as createByDb\n                //info.createByDb = true;\n            }\n        }     \n\n        return sql;\n    }\n\n    static removeTableNamePrefix(entityName, removeTablePrefix) {\n        if (removeTablePrefix) {\n            entityName = _.trim(_.snakeCase(entityName));\n\n            removeTablePrefix = _.trimEnd(_.snakeCase(removeTablePrefix), \"_\") + \"_\";\n\n            if (_.startsWith(entityName, removeTablePrefix)) {\n                entityName = entityName.substr(removeTablePrefix.length);\n            }\n        }\n\n        return GemlUtils.entityNaming(entityName);\n    }\n}\n\nmodule.exports = MySQLModeler;\n"],"file":"Modeler.js"}