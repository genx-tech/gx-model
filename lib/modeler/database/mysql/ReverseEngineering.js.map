{"version":3,"file":"ReverseEngineering.js","names":["path","require","_","eachAsync_","pushIntoBucket","fs","GemlCodeGen","GemlUtils","MySQLReverseEngineering","constructor","logger","connector","reverseRules","options","saveDatabaseMeta","reverse_","outputDir","log","driver","database","ensureDirSync","console","tables","execute_","writeFileSync","join","JSON","stringify","entities","mapOfEntities","entitiesOolPath","table","entityName","_entityNaming","TABLE_NAME","push","entity","extractTable_","_refineEntityRelationships","forOwn","types","entityInfo","type","entityContent","transform","entityFile","schemaName","_schemaNaming","json","schemaContent","schemaFile","extractedOolPath","columns","features","fields","_processFields","indexInfo","isEmpty","pk","indexes","mapNameToIndex","_processIndexes","assert","length","referencesInfo","associations","_processReferences_","comment","TABLE_COMMENT","key","code","l","i","ref","refTableKey","REFERENCED_TABLE_NAME","Column_name","toLowerCase","REFERENCED_COLUMN_NAME","Error","COLUMN_NAME","unique","fkInfo","CONSTRAINT_NAME","Non_unique","fkColName","_fieldNaming","srcField","destEntity","forEach","Key_name","name","map","f","nullable","Null","col","fieldName","EXTRA","featureInfo","AUTO_INCREMENT","COLUMN_DEFAULT","COLUMN_TYPE","fieldInfo","_mysqlTypeToOolType","IS_NULLABLE","optional","default","COLUMN_COMMENT","fieldNaming","fieldNamin","entityNaming","schemaNaming","applicableRule","find","columnTypeConversion","rule","test","apply","typeInfo","DATA_TYPE","CHARACTER_MAXIMUM_LENGTH","maxLength","fixedLength","digits","NUMERIC_PRECISION","bytes","endsWith","unsigned","startsWith","left","indexOf","right","lastIndexOf","typeName","upperFirst","values","substring","split","v","substr","totalDigits","decimalDigits","NUMERIC_SCALE","exact","entityAssoc","refedEntity","backRef","assoc","keyAssocs","Array","isArray","filter","_makeEntityManyToMany","entityName1","entityName2","module","exports"],"sources":["../../../../src/modeler/database/mysql/ReverseEngineering.js"],"sourcesContent":["const path = require('path');\nconst { _, eachAsync_, pushIntoBucket } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst GemlCodeGen = require('../../../lang/GemlCodeGen');\nconst GemlUtils = require('../../../lang/GemlUtils');\n\nclass MySQLReverseEngineering {\n    constructor(logger, connector) {\n        this.logger = logger;\n        this.connector = connector;        \n\n        this.reverseRules = this.connector.options.reverseRules || {};       \n        this.saveDatabaseMeta = this.connector.options.saveDatabaseMeta || false;\n    }\n\n    async reverse_(outputDir) {\n        this.logger.log('verbose', `Reverse engineering against ${this.connector.driver} database \"${this.connector.database}\" ...`);\n\n        fs.ensureDirSync(outputDir);\n        console.log(outputDir);\n\n        let tables = await this.connector.execute_(\"select * from information_schema.tables where table_schema = ?\", [ this.connector.database ]);        \n\n        if (this.saveDatabaseMeta) {\n            fs.writeFileSync(path.join(outputDir, this.connector.database + '.meta.json'), JSON.stringify(tables, null, 2));\n        }\n\n        let entities = [], mapOfEntities = {};\n        \n        let entitiesOolPath = path.join(outputDir, 'entities');\n        fs.ensureDirSync(entitiesOolPath);\n\n        await eachAsync_(tables, async table => {\n            let entityName = this._entityNaming(table.TABLE_NAME);\n\n            entities.push({ entity: entityName });            \n\n            mapOfEntities[entityName] = await this.extractTable_(entityName, table, entitiesOolPath);\n        });\n\n        this._refineEntityRelationships(mapOfEntities);\n\n        _.forOwn(mapOfEntities, ({ types, entityInfo }, entityName) => {\n            let entity = {\n                type: types,\n                entity: {\n                    [entityName]: entityInfo\n                }\n            };\n    \n            let entityContent = GemlCodeGen.transform(entity);\n            let entityFile = path.join(entitiesOolPath, entityName + '.ool');\n            fs.writeFileSync(entityFile + '.json', JSON.stringify(entity, null, 2));\n            fs.writeFileSync(entityFile, entityContent);\n            this.logger.log('info', `Extracted entity definition file \"${entityFile}\".`);\n        });\n\n        let schemaName = this._schemaNaming(this.connector.database);\n\n        let json = {\n            \"namespace\": [\n                \"entities/**\"\n            ],\n            \"schema\": {\n                [schemaName]: {\n                    \"entities\": entities                \n                }                 \n            }\n        };\n\n        let schemaContent = GemlCodeGen.transform(json);\n        let schemaFile = path.join(outputDir, schemaName + '.ool');\n        fs.writeFileSync(schemaFile + '.json', JSON.stringify(json, null, 2));\n        fs.writeFileSync(schemaFile, schemaContent);\n        this.logger.log('info', `Extracted schema entry file \"${schemaFile}\".`);\n    }\n\n    async extractTable_(entityName, table, extractedOolPath) {\n        let columns = await this.connector.execute_(\"select * from information_schema.columns where table_schema = ? and table_name = ?\",\n            [this.connector.database, table.TABLE_NAME]);\n\n        if (this.saveDatabaseMeta) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.meta.json'), JSON.stringify(columns, null, 2));\n        }                    \n\n        let { features, fields, types } = this._processFields(table, columns);\n\n        let indexInfo = await this.connector.execute_(\"SHOW INDEXES FROM ??\", [ table.TABLE_NAME ]);\n\n        if (this.saveDatabaseMeta && !_.isEmpty(indexInfo)) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.index.json'), JSON.stringify(indexInfo, null, 2));\n        }       \n\n        let { pk, indexes, mapNameToIndex } = this._processIndexes(indexInfo);\n\n        assert: pk.length > 0;        \n\n        let referencesInfo = await this.connector.execute_(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE `REFERENCED_TABLE_SCHEMA` = ? AND `TABLE_NAME` = ? AND `REFERENCED_TABLE_NAME` IS NOT NULL\",\n            [ this.connector.database, table.TABLE_NAME ]);\n\n        if (this.saveDatabaseMeta && !_.isEmpty(referencesInfo)) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.ref.json'), JSON.stringify(referencesInfo, null, 2));\n        }       \n\n        let associations = await this._processReferences_(referencesInfo, mapNameToIndex, fields);\n\n        let entityInfo = {            \n            comment: table.TABLE_COMMENT,\n            features,\n            fields,\n            associations,\n            key : pk.length > 1 ? pk : pk[0],\n            indexes\n        };\n\n        if (entityName !== table.TABLE_NAME) {\n            entityInfo.code = table.TABLE_NAME;\n        }\n\n        return { types, entityInfo };\n    }\n\n    async _processReferences_(referencesInfo, mapNameToIndex, fields) {\n        let associations = [];\n\n        let l = referencesInfo.length;\n\n        for (let i = 0; i < l; i++) {\n            let ref = referencesInfo[i];\n\n            let [refTableKey] = await this.connector.execute_(\"SHOW INDEXES FROM ?? WHERE `Key_name` = 'PRIMARY'\", [ref.REFERENCED_TABLE_NAME]);\n\n            if (refTableKey.Column_name.toLowerCase() !== ref.REFERENCED_COLUMN_NAME.toLowerCase()) {\n                throw new Error(`Foreign key \"${ref.COLUMN_NAME}\" not reference to the primary key.`);\n            }\n\n            let unique = false;\n\n            let fkInfo = mapNameToIndex[ref.CONSTRAINT_NAME]; \n            if (fkInfo) {\n                if (fkInfo.length > 1) {\n                    throw new Error(`Combination foreign key is not supported: \"${ref.CONSTRAINT_NAME}\"`);\n                }\n\n                unique = fkInfo[0].Non_unique === 0;\n            }\n\n            let fkColName = this._fieldNaming(ref.COLUMN_NAME);\n\n            if (unique) {\n                associations.push({ type: 'belongsTo', srcField: fkColName, destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME) });\n            } else {\n                associations.push({ type: 'hasMany', srcField: fkColName,  destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME) });\n            }\n\n            delete fields[fkColName];// = { type: '$association', code: fields[fkColName].code };\n        }\n\n        return associations;\n    }\n\n    _processIndexes(indexInfo) {\n        let pk = [], indexes = [];\n\n        let mapNameToIndex = {};\n\n        indexInfo.forEach(i => {\n            pushIntoBucket(mapNameToIndex, i.Key_name, i);\n        });\n\n        _.forOwn(mapNameToIndex, (fields, name) => {\n            if (name === 'PRIMARY') {\n                pk.push(fields.map(f => this._fieldNaming(f.Column_name)));\n            } else {\n                indexes.push({\n                    name: name,\n                    fields: fields.map(f => this._fieldNaming(f.Column_name)),\n                    unique: fields[0].Non_unique === 0,\n                    nullable: fields[0].Null === 'YES'\n                });\n            }\n        });\n\n        return { pk, indexes, mapNameToIndex };\n    }\n\n    _processFields(table, columns) {\n        let features = [], fields = {}, types = {};\n\n        columns.forEach(col => {\n            let fieldName = this._fieldNaming(col.COLUMN_NAME);\n            if (col.EXTRA === 'auto_increment') {\n                let featureInfo = {\n                    \"name\": \"autoId\",\n                    \"options\": table.AUTO_INCREMENT ? {                        \n                        \"startFrom\": table.AUTO_INCREMENT\n                    } : {}\n                };\n\n                if (fieldName !== 'id') {\n                    featureInfo.options.name = fieldName;\n                }\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.COLUMN_DEFAULT === 'CURRENT_TIMESTAMP') {\n                let featureInfo = {\n                    \"name\": \"createTimestamp\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.EXTRA === 'on update CURRENT_TIMESTAMP') {\n                let featureInfo = {\n                    \"name\": \"updateTimestamp\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (fieldName === 'isDeleted' && col.COLUMN_TYPE === 'tinyint(1)') {\n                let featureInfo = {\n                    \"name\": \"logicalDeletion\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            let fieldInfo = this._mysqlTypeToOolType(table, col, fieldName, types);\n\n            if (col.IS_NULLABLE === 'YES') {\n                fieldInfo.optional = true;\n            }\n\n            if (col.COLUMN_DEFAULT) {\n                fieldInfo.default = col.COLUMN_DEFAULT;\n            }\n\n            if (col.COLUMN_COMMENT) {\n                fieldInfo.comment = col.COLUMN_COMMENT;\n            }\n\n            fields[fieldName] = fieldInfo;\n        });\n\n        return { features, fields, types };\n    }\n\n    _fieldNaming(name) {\n        if (this.reverseRules.fieldNaming) {\n            return this.reverseRules.fieldNamin(name);\n        } \n        \n        return GemlUtils.fieldNaming(name);\n    }\n\n    _entityNaming(name) {\n        if (this.reverseRules.entityNaming) {\n            return this.reverseRules.entityNaming(name);\n        } \n        \n        return GemlUtils.entityNaming(name);\n    }\n\n    _schemaNaming(name) {\n        if (this.reverseRules.schemaNaming) {\n            return this.reverseRules.schemaNaming(name);\n        } \n        \n        return GemlUtils.schemaNaming(name);\n    }\n\n    _mysqlTypeToOolType(table, col, fieldName, types) {\n        let applicableRule = _.find(this.reverseRules.columnTypeConversion, rule => rule.test(table, col));\n        if (applicableRule) {\n            return applicableRule.apply(table, col);\n        }\n        \n        let typeInfo = {};        \n        if (col.COLUMN_NAME !== fieldName) {\n            typeInfo.code = col.COLUMN_NAME;\n        }\n\n        switch (col.DATA_TYPE) {\n            case 'varchar':\n                typeInfo.type = 'text';\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case 'char':\n                typeInfo.type = 'text';\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.fixedLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case 'bigint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 18;\n                typeInfo.bytes = 8;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'int':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 10;\n                typeInfo.bytes = 4;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'mediumint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 7;\n                typeInfo.bytes = 3;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'smallint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 4;\n                typeInfo.bytes = 2;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'tinyint':\n                if (_.startsWith(col.COLUMN_TYPE, 'tinyint(1)')) {\n                    typeInfo.type = 'boolean';\n                } else {\n                    typeInfo.type = 'integer';\n                    typeInfo.digits = col.NUMERIC_PRECISION || 2;\n                    typeInfo.bytes = 1;\n                    if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                }\n                break;\n\n            case 'enum':\n                let left = col.COLUMN_TYPE.indexOf('(');\n                let right = col.COLUMN_TYPE.lastIndexOf(')');\n\n                let typeName = table.TABLE_NAME + _.upperFirst(col.COLUMN_NAME);\n\n                types[typeName] = {\n                    type: 'enum',\n                    values: col.COLUMN_TYPE.substring(left + 1, right).split(',').map(v => v.substr(1, v.length - 2))\n                };\n\n                typeInfo.type = typeName;\n\n                break;\n\n            case 'text':\n                typeInfo.type = 'text';\n                typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                break;\n\n            case 'datetime':\n            case 'timestamp':\n                typeInfo.type = 'datetime';\n                break;\n\n            case 'decimal':\n                typeInfo.type = 'number';\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                typeInfo.exact = true;\n                break;\n\n            case 'float':\n                typeInfo.type = 'number';\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                break;\n\n            default:\n                console.log(col);\n                throw new Error('To be implemented.');\n        }\n\n        //_.find(this.reverseRules.columnTypeOptimization, rule => rule.test(table, col));\n\n        return typeInfo;\n    }\n\n    _refineEntityRelationships(mapOfEntities) {\n        let entityAssoc = {};\n\n        //1st round\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            if (_.isEmpty(entityInfo.associations)) return;            \n\n            entityInfo.associations.forEach(({ type, srcField, destEntity }) => {\n                let refedEntity = mapOfEntities[destEntity];\n                let backRef = _.find(refedEntity.associations, assoc => assoc.destEntity === name);\n\n                if (type === 'hasMany') {   \n\n                    if (!backRef) {\n                        //one-side relation\n                        pushIntoBucket(entityAssoc, name, { type: 'refersTo', srcField, destEntity });\n                        return;\n                    }\n\n                    //todo:\n                    console.log(entityInfo);\n                    throw new Error(`Back reference: ${backRef.entity} ${backRef.type} ${name}`);                    \n                } else if (type === 'belongsTo') {\n\n                    pushIntoBucket(entityAssoc, name, { type, srcField, destEntity });\n\n                    if (!backRef) {\n                        //one-side relation                        \n                        pushIntoBucket(entityAssoc, entity, { type: 'hasMany', destEntity: name });\n                        return;\n                    }\n                    \n                } else {\n                    throw new Error('Unexpected association type: ' + type);\n                }\n            });            \n        });        \n\n        //2nd round\n        _.forOwn(entityAssoc, (associations, name) => {\n            let { entityInfo } = mapOfEntities[name];\n\n            let keyAssocs;\n\n            if (Array.isArray(entityInfo.key) && entityInfo.key.length === 2) {\n                keyAssocs = _.filter(associations, assoc => entityInfo.key.indexOf(assoc.srcField) !== -1);\n                if (keyAssocs.length === 2) {\n                    this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                }\n            }\n\n            entityInfo.indexes.forEach(({ fields }) => {\n                if (fields.length === 2) {\n                    keyAssocs = _.filter(associations, assoc => fields.indexOf(assoc.srcField) !== -1);\n                    if (keyAssocs.length === 2) {\n                        this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                    }\n                }\n            });\n        });\n\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            entityInfo.associations = entityAssoc[name];\n        });\n    }\n\n    _makeEntityManyToMany(entityName1, entityName2, entityAssoc) {\n        pushIntoBucket(entityAssoc, entityName1, { type: 'hasMany', destEntity: entityName2 });\n        pushIntoBucket(entityAssoc, entityName2, { type: 'hasMany', destEntity: entityName1 });\n    }\n}\n\nmodule.exports = MySQLReverseEngineering;"],"mappings":"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"}