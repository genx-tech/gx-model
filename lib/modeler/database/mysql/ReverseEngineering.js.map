{"version":3,"file":"ReverseEngineering.js","names":["path","require","_","eachAsync_","pushIntoBucket","fs","GemlCodeGen","GemlUtils","defaultRules","skip","MySQLReverseEngineering","constructor","context","logger","connector","reverseRules","options","saveIntermediate","reverse_","outputDir","log","driver","database","tables","execute_","writeFileSync","join","JSON","stringify","entities","mapOfEntities","entitiesGemlPath","ensureDirSync","skipTables","Set","table","has","TABLE_NAME","entityName","_entityNaming","push","entity","extractTable_","_refineEntityRelationships","forOwn","types","entityInfo","type","entityContent","transform","entityFile","schemaName","_schemaNaming","json","namespace","schema","schemaContent","schemaFile","targetGemlPath","columns","features","fields","_processFields","indexInfo","isEmpty","pk","indexes","mapNameToIndex","_processIndexes","length","Error","referencesInfo","associations","_processReferences_","comment","TABLE_COMMENT","key","code","l","i","ref","refTableKey","REFERENCED_TABLE_NAME","Column_name","toLowerCase","REFERENCED_COLUMN_NAME","COLUMN_NAME","unique","fkInfo","CONSTRAINT_NAME","Non_unique","fkColName","_fieldNaming","srcField","destEntity","forEach","Key_name","name","map","f","nullable","Null","col","fieldName","EXTRA","featureInfo","AUTO_INCREMENT","startFrom","COLUMN_DEFAULT","COLUMN_TYPE","fieldInfo","_mysqlTypeToGemlType","IS_NULLABLE","optional","default","COLUMN_COMMENT","fieldNaming","fieldNamin","entityNaming","schemaNaming","applicableRule","find","columnTypeConversion","rule","test","apply","typeInfo","DATA_TYPE","CHARACTER_MAXIMUM_LENGTH","maxLength","fixedLength","digits","NUMERIC_PRECISION","bytes","endsWith","unsigned","startsWith","left","indexOf","right","lastIndexOf","typeName","upperFirst","values","substring","split","v","substr","totalDigits","decimalDigits","NUMERIC_SCALE","exact","console","entityAssoc","refedEntity","backRef","assoc","keyAssocs","Array","isArray","filter","_makeEntityManyToMany","entityName1","entityName2","module","exports"],"sources":["../../../../src/modeler/database/mysql/ReverseEngineering.js"],"sourcesContent":["const path = require(\"path\");\nconst { _, eachAsync_, pushIntoBucket } = require(\"@genx/july\");\nconst { fs } = require(\"@genx/sys\");\nconst GemlCodeGen = require(\"../../../lang/GemlCodeGen\");\nconst GemlUtils = require(\"../../../lang/GemlUtils\");\n\nconst defaultRules = {\n    skip: [\"_prisma_migrations\"],\n};\n\nclass MySQLReverseEngineering {\n    constructor(context, logger, connector) {\n        this.logger = logger;\n        this.connector = connector;\n\n        this.reverseRules = { ...defaultRules, ...this.connector.options.reverseRules };\n        this.saveIntermediate = context.saveIntermediate ?? false;\n    }\n\n    async reverse_(outputDir) {\n        this.logger.log(\n            \"info\",\n            `Pulling schema from ${this.connector.driver} database \"${this.connector.database}\" ...`\n        );\n\n        let tables = await this.connector.execute_(\"select * from information_schema.tables where table_schema = ?\", [\n            this.connector.database,\n        ]);\n\n        if (this.saveIntermediate) {\n            fs.writeFileSync(\n                path.join(outputDir, this.connector.database + \".meta.json\"),\n                JSON.stringify(tables, null, 2)\n            );\n        }\n\n        let entities = [],\n            mapOfEntities = {};\n\n        let entitiesGemlPath = path.join(outputDir, \"entities\");\n        fs.ensureDirSync(entitiesGemlPath);\n\n        const skipTables = new Set(this.reverseRules.skip ?? []);\n\n        await eachAsync_(tables, async (table) => {\n            if (skipTables.has(table.TABLE_NAME)) return;\n\n            let entityName = this._entityNaming(table.TABLE_NAME);\n\n            entities.push({ entity: entityName });\n\n            mapOfEntities[entityName] = await this.extractTable_(entityName, table, entitiesGemlPath);\n        });\n\n        this._refineEntityRelationships(mapOfEntities);\n\n        _.forOwn(mapOfEntities, ({ types, entityInfo }, entityName) => {\n            let entity = {\n                type: types,\n                entity: {\n                    [entityName]: entityInfo,\n                },\n            };\n\n            let entityContent = GemlCodeGen.transform(entity);\n            let entityFile = path.join(entitiesGemlPath, entityName + \".geml\");\n\n            if (this.saveIntermediate) {\n                fs.writeFileSync(entityFile + \".json\", JSON.stringify(entity, null, 2));\n            }\n            fs.writeFileSync(entityFile, entityContent);\n            this.logger.log(\"info\", `Generated entity definition file \"${entityFile}\".`);\n        });\n\n        let schemaName = this._schemaNaming(this.connector.database);\n\n        let json = {\n            namespace: [\"entities/**\"],\n            schema: {\n                [schemaName]: {\n                    entities: entities,\n                },\n            },\n        };\n\n        let schemaContent = GemlCodeGen.transform(json);\n        let schemaFile = path.join(outputDir, schemaName + \".geml\");\n        if (this.saveIntermediate) {\n            fs.writeFileSync(schemaFile + \".json\", JSON.stringify(json, null, 2));\n        }\n        fs.writeFileSync(schemaFile, schemaContent);\n        this.logger.log(\"info\", `Extracted schema entry file \"${schemaFile}\".`);\n    }\n\n    async extractTable_(entityName, table, targetGemlPath) {\n        let columns = await this.connector.execute_(\n            \"select * from information_schema.columns where table_schema = ? and table_name = ?\",\n            [this.connector.database, table.TABLE_NAME]\n        );\n\n        if (this.saveIntermediate) {\n            fs.writeFileSync(\n                path.join(targetGemlPath, table.TABLE_NAME + \".meta.json\"),\n                JSON.stringify(columns, null, 2)\n            );\n        }\n\n        let { features, fields, types } = this._processFields(table, columns);\n\n        let indexInfo = await this.connector.execute_(\"SHOW INDEXES FROM ??\", [table.TABLE_NAME]);\n\n        if (this.saveIntermediate && !_.isEmpty(indexInfo)) {\n            fs.writeFileSync(\n                path.join(targetGemlPath, table.TABLE_NAME + \".index.json\"),\n                JSON.stringify(indexInfo, null, 2)\n            );\n        }\n\n        let { pk, indexes, mapNameToIndex } = this._processIndexes(indexInfo);\n\n        if (pk.length === 0) {\n            throw new Error(`Table \"${table.TABLE_NAME}\" has no primary key.`);\n        }\n\n        let referencesInfo = await this.connector.execute_(\n            \"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE `REFERENCED_TABLE_SCHEMA` = ? AND `TABLE_NAME` = ? AND `REFERENCED_TABLE_NAME` IS NOT NULL\",\n            [this.connector.database, table.TABLE_NAME]\n        );\n\n        if (this.saveIntermediate && !_.isEmpty(referencesInfo)) {\n            fs.writeFileSync(\n                path.join(targetGemlPath, table.TABLE_NAME + \".ref.json\"),\n                JSON.stringify(referencesInfo, null, 2)\n            );\n        }\n\n        let associations = await this._processReferences_(referencesInfo, mapNameToIndex, fields);\n\n        let entityInfo = {\n            comment: table.TABLE_COMMENT,\n            features,\n            fields,\n            associations,\n            key: pk.length > 1 ? pk : pk[0],\n            indexes,\n        };\n\n        if (entityName !== table.TABLE_NAME) {\n            entityInfo.code = table.TABLE_NAME;\n        }\n\n        return { types, entityInfo };\n    }\n\n    async _processReferences_(referencesInfo, mapNameToIndex, fields) {\n        let associations = [];\n\n        let l = referencesInfo.length;\n\n        for (let i = 0; i < l; i++) {\n            let ref = referencesInfo[i];\n\n            let [refTableKey] = await this.connector.execute_(\"SHOW INDEXES FROM ?? WHERE `Key_name` = 'PRIMARY'\", [\n                ref.REFERENCED_TABLE_NAME,\n            ]);\n\n            if (refTableKey.Column_name.toLowerCase() !== ref.REFERENCED_COLUMN_NAME.toLowerCase()) {\n                throw new Error(`Foreign key \"${ref.COLUMN_NAME}\" not reference to the primary key.`);\n            }\n\n            let unique = false;\n\n            let fkInfo = mapNameToIndex[ref.CONSTRAINT_NAME];\n            if (fkInfo) {\n                if (fkInfo.length > 1) {\n                    throw new Error(`Combination foreign key is not supported: \"${ref.CONSTRAINT_NAME}\"`);\n                }\n\n                unique = fkInfo[0].Non_unique === 0;\n            }\n\n            let fkColName = this._fieldNaming(ref.COLUMN_NAME);\n\n            if (unique) {\n                associations.push({\n                    type: \"belongsTo\",\n                    srcField: fkColName,\n                    destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME),\n                });\n            } else {\n                associations.push({\n                    type: \"hasMany\",\n                    srcField: fkColName,\n                    destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME),\n                });\n            }\n\n            delete fields[fkColName]; // = { type: '$association', code: fields[fkColName].code };\n        }\n\n        return associations;\n    }\n\n    _processIndexes(indexInfo) {\n        let pk = [],\n            indexes = [];\n\n        let mapNameToIndex = {};\n\n        indexInfo.forEach((i) => {\n            pushIntoBucket(mapNameToIndex, i.Key_name, i);\n        });\n\n        _.forOwn(mapNameToIndex, (fields, name) => {\n            if (name === \"PRIMARY\") {\n                pk.push(fields.map((f) => this._fieldNaming(f.Column_name)));\n            } else {\n                indexes.push({\n                    name: name,\n                    fields: fields.map((f) => this._fieldNaming(f.Column_name)),\n                    unique: fields[0].Non_unique === 0,\n                    nullable: fields[0].Null === \"YES\",\n                });\n            }\n        });\n\n        return { pk, indexes, mapNameToIndex };\n    }\n\n    _processFields(table, columns) {\n        let features = [],\n            fields = {},\n            types = {};\n\n        columns.forEach((col) => {\n            let fieldName = this._fieldNaming(col.COLUMN_NAME);\n            if (col.EXTRA === \"auto_increment\") {\n                let featureInfo = {\n                    name: \"autoId\",\n                    options: table.AUTO_INCREMENT\n                        ? {\n                              startFrom: table.AUTO_INCREMENT,\n                          }\n                        : {},\n                };\n\n                if (fieldName !== \"id\") {\n                    featureInfo.options.name = fieldName;\n                }\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.COLUMN_DEFAULT === \"CURRENT_TIMESTAMP\") {\n                let featureInfo = {\n                    name: \"createTimestamp\",\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.EXTRA === \"on update CURRENT_TIMESTAMP\") {\n                let featureInfo = {\n                    name: \"updateTimestamp\",\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (fieldName === \"isDeleted\" && col.COLUMN_TYPE === \"tinyint(1)\") {\n                let featureInfo = {\n                    name: \"logicalDeletion\",\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            let fieldInfo = this._mysqlTypeToGemlType(table, col, fieldName, types);\n\n            if (col.IS_NULLABLE === \"YES\") {\n                fieldInfo.optional = true;\n            }\n\n            if (col.COLUMN_DEFAULT) {\n                fieldInfo.default = col.COLUMN_DEFAULT;\n            }\n\n            if (col.COLUMN_COMMENT) {\n                fieldInfo.comment = col.COLUMN_COMMENT;\n            }\n\n            fields[fieldName] = fieldInfo;\n        });\n\n        return { features, fields, types };\n    }\n\n    _fieldNaming(name) {\n        if (this.reverseRules.fieldNaming) {\n            return this.reverseRules.fieldNamin(name);\n        }\n\n        return GemlUtils.fieldNaming(name);\n    }\n\n    _entityNaming(name) {\n        if (this.reverseRules.entityNaming) {\n            return this.reverseRules.entityNaming(name);\n        }\n\n        return GemlUtils.entityNaming(name);\n    }\n\n    _schemaNaming(name) {\n        if (this.reverseRules.schemaNaming) {\n            return this.reverseRules.schemaNaming(name);\n        }\n\n        return GemlUtils.schemaNaming(name);\n    }\n\n    _mysqlTypeToGemlType(table, col, fieldName, types) {\n        let applicableRule = _.find(this.reverseRules.columnTypeConversion, (rule) => rule.test(table, col));\n        if (applicableRule) {\n            return applicableRule.apply(table, col);\n        }\n\n        let typeInfo = {};\n        if (col.COLUMN_NAME !== fieldName) {\n            typeInfo.code = col.COLUMN_NAME;\n        }\n\n        switch (col.DATA_TYPE) {\n            case \"varchar\":\n                typeInfo.type = \"text\";\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case \"char\":\n                typeInfo.type = \"text\";\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.fixedLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case \"blob\":\n                typeInfo.type = \"binary\";\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case \"bigint\":\n                typeInfo.type = \"integer\";\n                typeInfo.digits = col.NUMERIC_PRECISION || 18;\n                typeInfo.bytes = 8;\n                if (_.endsWith(col.COLUMN_TYPE, \" unsigned\")) typeInfo.unsigned = true;\n                break;\n\n            case \"int\":\n                typeInfo.type = \"integer\";\n                typeInfo.digits = col.NUMERIC_PRECISION || 10;\n                typeInfo.bytes = 4;\n                if (_.endsWith(col.COLUMN_TYPE, \" unsigned\")) typeInfo.unsigned = true;\n                break;\n\n            case \"mediumint\":\n                typeInfo.type = \"integer\";\n                typeInfo.digits = col.NUMERIC_PRECISION || 7;\n                typeInfo.bytes = 3;\n                if (_.endsWith(col.COLUMN_TYPE, \" unsigned\")) typeInfo.unsigned = true;\n                break;\n\n            case \"smallint\":\n                typeInfo.type = \"integer\";\n                typeInfo.digits = col.NUMERIC_PRECISION || 4;\n                typeInfo.bytes = 2;\n                if (_.endsWith(col.COLUMN_TYPE, \" unsigned\")) typeInfo.unsigned = true;\n                break;\n\n            case \"tinyint\":\n                if (_.startsWith(col.COLUMN_TYPE, \"tinyint(1)\")) {\n                    typeInfo.type = \"boolean\";\n                } else {\n                    typeInfo.type = \"integer\";\n                    typeInfo.digits = col.NUMERIC_PRECISION || 2;\n                    typeInfo.bytes = 1;\n                    if (_.endsWith(col.COLUMN_TYPE, \" unsigned\")) typeInfo.unsigned = true;\n                }\n                break;\n\n            case \"enum\":\n                let left = col.COLUMN_TYPE.indexOf(\"(\");\n                let right = col.COLUMN_TYPE.lastIndexOf(\")\");\n\n                let typeName = table.TABLE_NAME + _.upperFirst(col.COLUMN_NAME);\n\n                types[typeName] = {\n                    type: \"enum\",\n                    values: col.COLUMN_TYPE.substring(left + 1, right)\n                        .split(\",\")\n                        .map((v) => v.substr(1, v.length - 2)),\n                };\n\n                typeInfo.type = typeName;\n\n                break;\n\n            case \"text\":\n                typeInfo.type = \"text\";\n                typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                break;\n\n            case \"datetime\":\n            case \"timestamp\":\n                typeInfo.type = \"datetime\";\n                break;\n\n            case \"decimal\":\n                typeInfo.type = \"number\";\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                typeInfo.exact = true;\n                break;\n\n            case \"double\":\n                typeInfo.bytes = 8;\n            case \"float\":\n                typeInfo.type = \"number\";\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                break;\n\n            default:\n                console.log(col);\n                throw new Error(\"To be implemented.\");\n        }\n\n        //_.find(this.reverseRules.columnTypeOptimization, rule => rule.test(table, col));\n\n        return typeInfo;\n    }\n\n    _refineEntityRelationships(mapOfEntities) {\n        let entityAssoc = {};\n\n        //1st round\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            if (_.isEmpty(entityInfo.associations)) return;\n\n            entityInfo.associations.forEach(({ type, srcField, destEntity }) => {\n                let refedEntity = mapOfEntities[destEntity];\n                let backRef = _.find(refedEntity.associations, (assoc) => assoc.destEntity === name);\n\n                if (type === \"hasMany\") {\n                    if (!backRef) {\n                        //one-side relation\n                        pushIntoBucket(entityAssoc, name, { type: \"refersTo\", srcField, destEntity });\n                        return;\n                    }\n\n                    //todo:\n                    console.log(entityInfo);\n                    throw new Error(`Back reference: ${backRef.entity} ${backRef.type} ${name}`);\n                } else if (type === \"belongsTo\") {\n                    pushIntoBucket(entityAssoc, name, { type, srcField, destEntity });\n\n                    if (!backRef) {\n                        //one-side relation\n                        pushIntoBucket(entityAssoc, entity, { type: \"hasMany\", destEntity: name });\n                        return;\n                    }\n                } else {\n                    throw new Error(\"Unexpected association type: \" + type);\n                }\n            });\n        });\n\n        //2nd round\n        _.forOwn(entityAssoc, (associations, name) => {\n            let { entityInfo } = mapOfEntities[name];\n\n            let keyAssocs;\n\n            if (Array.isArray(entityInfo.key) && entityInfo.key.length === 2) {\n                keyAssocs = _.filter(associations, (assoc) => entityInfo.key.indexOf(assoc.srcField) !== -1);\n                if (keyAssocs.length === 2) {\n                    this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                }\n            }\n\n            entityInfo.indexes.forEach(({ fields }) => {\n                if (fields.length === 2) {\n                    keyAssocs = _.filter(associations, (assoc) => fields.indexOf(assoc.srcField) !== -1);\n                    if (keyAssocs.length === 2) {\n                        this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                    }\n                }\n            });\n        });\n\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            entityInfo.associations = entityAssoc[name];\n        });\n    }\n\n    _makeEntityManyToMany(entityName1, entityName2, entityAssoc) {\n        pushIntoBucket(entityAssoc, entityName1, { type: \"hasMany\", destEntity: entityName2 });\n        pushIntoBucket(entityAssoc, entityName2, { type: \"hasMany\", destEntity: entityName1 });\n    }\n}\n\nmodule.exports = MySQLReverseEngineering;\n"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC,CAAF;EAAKC,UAAL;EAAiBC;AAAjB,IAAoCH,OAAO,CAAC,YAAD,CAAjD;;AACA,MAAM;EAAEI;AAAF,IAASJ,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,2BAAD,CAA3B;;AACA,MAAMM,SAAS,GAAGN,OAAO,CAAC,yBAAD,CAAzB;;AAEA,MAAMO,YAAY,GAAG;EACjBC,IAAI,EAAE,CAAC,oBAAD;AADW,CAArB;;AAIA,MAAMC,uBAAN,CAA8B;EAC1BC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,SAAlB,EAA6B;IACpC,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,SAAL,GAAiBA,SAAjB;IAEA,KAAKC,YAAL,GAAoB,EAAE,GAAGP,YAAL;MAAmB,GAAG,KAAKM,SAAL,CAAeE,OAAf,CAAuBD;IAA7C,CAApB;IACA,KAAKE,gBAAL,GAAwBL,OAAO,CAACK,gBAAR,IAA4B,KAApD;EACH;;EAEa,MAARC,QAAQ,CAACC,SAAD,EAAY;IACtB,KAAKN,MAAL,CAAYO,GAAZ,CACI,MADJ,EAEK,uBAAsB,KAAKN,SAAL,CAAeO,MAAO,cAAa,KAAKP,SAAL,CAAeQ,QAAS,OAFtF;IAKA,IAAIC,MAAM,GAAG,MAAM,KAAKT,SAAL,CAAeU,QAAf,CAAwB,gEAAxB,EAA0F,CACzG,KAAKV,SAAL,CAAeQ,QAD0F,CAA1F,CAAnB;;IAIA,IAAI,KAAKL,gBAAT,EAA2B;MACvBZ,EAAE,CAACoB,aAAH,CACIzB,IAAI,CAAC0B,IAAL,CAAUP,SAAV,EAAqB,KAAKL,SAAL,CAAeQ,QAAf,GAA0B,YAA/C,CADJ,EAEIK,IAAI,CAACC,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAFJ;IAIH;;IAED,IAAIM,QAAQ,GAAG,EAAf;IAAA,IACIC,aAAa,GAAG,EADpB;IAGA,IAAIC,gBAAgB,GAAG/B,IAAI,CAAC0B,IAAL,CAAUP,SAAV,EAAqB,UAArB,CAAvB;IACAd,EAAE,CAAC2B,aAAH,CAAiBD,gBAAjB;IAEA,MAAME,UAAU,GAAG,IAAIC,GAAJ,CAAQ,KAAKnB,YAAL,CAAkBN,IAAlB,IAA0B,EAAlC,CAAnB;IAEA,MAAMN,UAAU,CAACoB,MAAD,EAAS,MAAOY,KAAP,IAAiB;MACtC,IAAIF,UAAU,CAACG,GAAX,CAAeD,KAAK,CAACE,UAArB,CAAJ,EAAsC;;MAEtC,IAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmBJ,KAAK,CAACE,UAAzB,CAAjB;;MAEAR,QAAQ,CAACW,IAAT,CAAc;QAAEC,MAAM,EAAEH;MAAV,CAAd;MAEAR,aAAa,CAACQ,UAAD,CAAb,GAA4B,MAAM,KAAKI,aAAL,CAAmBJ,UAAnB,EAA+BH,KAA/B,EAAsCJ,gBAAtC,CAAlC;IACH,CARe,CAAhB;;IAUA,KAAKY,0BAAL,CAAgCb,aAAhC;;IAEA5B,CAAC,CAAC0C,MAAF,CAASd,aAAT,EAAwB,CAAC;MAAEe,KAAF;MAASC;IAAT,CAAD,EAAwBR,UAAxB,KAAuC;MAC3D,IAAIG,MAAM,GAAG;QACTM,IAAI,EAAEF,KADG;QAETJ,MAAM,EAAE;UACJ,CAACH,UAAD,GAAcQ;QADV;MAFC,CAAb;MAOA,IAAIE,aAAa,GAAG1C,WAAW,CAAC2C,SAAZ,CAAsBR,MAAtB,CAApB;MACA,IAAIS,UAAU,GAAGlD,IAAI,CAAC0B,IAAL,CAAUK,gBAAV,EAA4BO,UAAU,GAAG,OAAzC,CAAjB;;MAEA,IAAI,KAAKrB,gBAAT,EAA2B;QACvBZ,EAAE,CAACoB,aAAH,CAAiByB,UAAU,GAAG,OAA9B,EAAuCvB,IAAI,CAACC,SAAL,CAAea,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAvC;MACH;;MACDpC,EAAE,CAACoB,aAAH,CAAiByB,UAAjB,EAA6BF,aAA7B;MACA,KAAKnC,MAAL,CAAYO,GAAZ,CAAgB,MAAhB,EAAyB,qCAAoC8B,UAAW,IAAxE;IACH,CAhBD;;IAkBA,IAAIC,UAAU,GAAG,KAAKC,aAAL,CAAmB,KAAKtC,SAAL,CAAeQ,QAAlC,CAAjB;;IAEA,IAAI+B,IAAI,GAAG;MACPC,SAAS,EAAE,CAAC,aAAD,CADJ;MAEPC,MAAM,EAAE;QACJ,CAACJ,UAAD,GAAc;UACVtB,QAAQ,EAAEA;QADA;MADV;IAFD,CAAX;IASA,IAAI2B,aAAa,GAAGlD,WAAW,CAAC2C,SAAZ,CAAsBI,IAAtB,CAApB;IACA,IAAII,UAAU,GAAGzD,IAAI,CAAC0B,IAAL,CAAUP,SAAV,EAAqBgC,UAAU,GAAG,OAAlC,CAAjB;;IACA,IAAI,KAAKlC,gBAAT,EAA2B;MACvBZ,EAAE,CAACoB,aAAH,CAAiBgC,UAAU,GAAG,OAA9B,EAAuC9B,IAAI,CAACC,SAAL,CAAeyB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAvC;IACH;;IACDhD,EAAE,CAACoB,aAAH,CAAiBgC,UAAjB,EAA6BD,aAA7B;IACA,KAAK3C,MAAL,CAAYO,GAAZ,CAAgB,MAAhB,EAAyB,gCAA+BqC,UAAW,IAAnE;EACH;;EAEkB,MAAbf,aAAa,CAACJ,UAAD,EAAaH,KAAb,EAAoBuB,cAApB,EAAoC;IACnD,IAAIC,OAAO,GAAG,MAAM,KAAK7C,SAAL,CAAeU,QAAf,CAChB,oFADgB,EAEhB,CAAC,KAAKV,SAAL,CAAeQ,QAAhB,EAA0Ba,KAAK,CAACE,UAAhC,CAFgB,CAApB;;IAKA,IAAI,KAAKpB,gBAAT,EAA2B;MACvBZ,EAAE,CAACoB,aAAH,CACIzB,IAAI,CAAC0B,IAAL,CAAUgC,cAAV,EAA0BvB,KAAK,CAACE,UAAN,GAAmB,YAA7C,CADJ,EAEIV,IAAI,CAACC,SAAL,CAAe+B,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAFJ;IAIH;;IAED,IAAI;MAAEC,QAAF;MAAYC,MAAZ;MAAoBhB;IAApB,IAA8B,KAAKiB,cAAL,CAAoB3B,KAApB,EAA2BwB,OAA3B,CAAlC;;IAEA,IAAII,SAAS,GAAG,MAAM,KAAKjD,SAAL,CAAeU,QAAf,CAAwB,sBAAxB,EAAgD,CAACW,KAAK,CAACE,UAAP,CAAhD,CAAtB;;IAEA,IAAI,KAAKpB,gBAAL,IAAyB,CAACf,CAAC,CAAC8D,OAAF,CAAUD,SAAV,CAA9B,EAAoD;MAChD1D,EAAE,CAACoB,aAAH,CACIzB,IAAI,CAAC0B,IAAL,CAAUgC,cAAV,EAA0BvB,KAAK,CAACE,UAAN,GAAmB,aAA7C,CADJ,EAEIV,IAAI,CAACC,SAAL,CAAemC,SAAf,EAA0B,IAA1B,EAAgC,CAAhC,CAFJ;IAIH;;IAED,IAAI;MAAEE,EAAF;MAAMC,OAAN;MAAeC;IAAf,IAAkC,KAAKC,eAAL,CAAqBL,SAArB,CAAtC;;IAEA,IAAIE,EAAE,CAACI,MAAH,KAAc,CAAlB,EAAqB;MACjB,MAAM,IAAIC,KAAJ,CAAW,UAASnC,KAAK,CAACE,UAAW,uBAArC,CAAN;IACH;;IAED,IAAIkC,cAAc,GAAG,MAAM,KAAKzD,SAAL,CAAeU,QAAf,CACvB,oJADuB,EAEvB,CAAC,KAAKV,SAAL,CAAeQ,QAAhB,EAA0Ba,KAAK,CAACE,UAAhC,CAFuB,CAA3B;;IAKA,IAAI,KAAKpB,gBAAL,IAAyB,CAACf,CAAC,CAAC8D,OAAF,CAAUO,cAAV,CAA9B,EAAyD;MACrDlE,EAAE,CAACoB,aAAH,CACIzB,IAAI,CAAC0B,IAAL,CAAUgC,cAAV,EAA0BvB,KAAK,CAACE,UAAN,GAAmB,WAA7C,CADJ,EAEIV,IAAI,CAACC,SAAL,CAAe2C,cAAf,EAA+B,IAA/B,EAAqC,CAArC,CAFJ;IAIH;;IAED,IAAIC,YAAY,GAAG,MAAM,KAAKC,mBAAL,CAAyBF,cAAzB,EAAyCJ,cAAzC,EAAyDN,MAAzD,CAAzB;IAEA,IAAIf,UAAU,GAAG;MACb4B,OAAO,EAAEvC,KAAK,CAACwC,aADF;MAEbf,QAFa;MAGbC,MAHa;MAIbW,YAJa;MAKbI,GAAG,EAAEX,EAAE,CAACI,MAAH,GAAY,CAAZ,GAAgBJ,EAAhB,GAAqBA,EAAE,CAAC,CAAD,CALf;MAMbC;IANa,CAAjB;;IASA,IAAI5B,UAAU,KAAKH,KAAK,CAACE,UAAzB,EAAqC;MACjCS,UAAU,CAAC+B,IAAX,GAAkB1C,KAAK,CAACE,UAAxB;IACH;;IAED,OAAO;MAAEQ,KAAF;MAASC;IAAT,CAAP;EACH;;EAEwB,MAAnB2B,mBAAmB,CAACF,cAAD,EAAiBJ,cAAjB,EAAiCN,MAAjC,EAAyC;IAC9D,IAAIW,YAAY,GAAG,EAAnB;IAEA,IAAIM,CAAC,GAAGP,cAAc,CAACF,MAAvB;;IAEA,KAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuBC,CAAC,EAAxB,EAA4B;MACxB,IAAIC,GAAG,GAAGT,cAAc,CAACQ,CAAD,CAAxB;MAEA,IAAI,CAACE,WAAD,IAAgB,MAAM,KAAKnE,SAAL,CAAeU,QAAf,CAAwB,mDAAxB,EAA6E,CACnGwD,GAAG,CAACE,qBAD+F,CAA7E,CAA1B;;MAIA,IAAID,WAAW,CAACE,WAAZ,CAAwBC,WAAxB,OAA0CJ,GAAG,CAACK,sBAAJ,CAA2BD,WAA3B,EAA9C,EAAwF;QACpF,MAAM,IAAId,KAAJ,CAAW,gBAAeU,GAAG,CAACM,WAAY,qCAA1C,CAAN;MACH;;MAED,IAAIC,MAAM,GAAG,KAAb;MAEA,IAAIC,MAAM,GAAGrB,cAAc,CAACa,GAAG,CAACS,eAAL,CAA3B;;MACA,IAAID,MAAJ,EAAY;QACR,IAAIA,MAAM,CAACnB,MAAP,GAAgB,CAApB,EAAuB;UACnB,MAAM,IAAIC,KAAJ,CAAW,8CAA6CU,GAAG,CAACS,eAAgB,GAA5E,CAAN;QACH;;QAEDF,MAAM,GAAGC,MAAM,CAAC,CAAD,CAAN,CAAUE,UAAV,KAAyB,CAAlC;MACH;;MAED,IAAIC,SAAS,GAAG,KAAKC,YAAL,CAAkBZ,GAAG,CAACM,WAAtB,CAAhB;;MAEA,IAAIC,MAAJ,EAAY;QACRf,YAAY,CAAChC,IAAb,CAAkB;UACdO,IAAI,EAAE,WADQ;UAEd8C,QAAQ,EAAEF,SAFI;UAGdG,UAAU,EAAE,KAAKvD,aAAL,CAAmByC,GAAG,CAACE,qBAAvB;QAHE,CAAlB;MAKH,CAND,MAMO;QACHV,YAAY,CAAChC,IAAb,CAAkB;UACdO,IAAI,EAAE,SADQ;UAEd8C,QAAQ,EAAEF,SAFI;UAGdG,UAAU,EAAE,KAAKvD,aAAL,CAAmByC,GAAG,CAACE,qBAAvB;QAHE,CAAlB;MAKH;;MAED,OAAOrB,MAAM,CAAC8B,SAAD,CAAb;IACH;;IAED,OAAOnB,YAAP;EACH;;EAEDJ,eAAe,CAACL,SAAD,EAAY;IACvB,IAAIE,EAAE,GAAG,EAAT;IAAA,IACIC,OAAO,GAAG,EADd;IAGA,IAAIC,cAAc,GAAG,EAArB;IAEAJ,SAAS,CAACgC,OAAV,CAAmBhB,CAAD,IAAO;MACrB3E,cAAc,CAAC+D,cAAD,EAAiBY,CAAC,CAACiB,QAAnB,EAA6BjB,CAA7B,CAAd;IACH,CAFD;;IAIA7E,CAAC,CAAC0C,MAAF,CAASuB,cAAT,EAAyB,CAACN,MAAD,EAASoC,IAAT,KAAkB;MACvC,IAAIA,IAAI,KAAK,SAAb,EAAwB;QACpBhC,EAAE,CAACzB,IAAH,CAAQqB,MAAM,CAACqC,GAAP,CAAYC,CAAD,IAAO,KAAKP,YAAL,CAAkBO,CAAC,CAAChB,WAApB,CAAlB,CAAR;MACH,CAFD,MAEO;QACHjB,OAAO,CAAC1B,IAAR,CAAa;UACTyD,IAAI,EAAEA,IADG;UAETpC,MAAM,EAAEA,MAAM,CAACqC,GAAP,CAAYC,CAAD,IAAO,KAAKP,YAAL,CAAkBO,CAAC,CAAChB,WAApB,CAAlB,CAFC;UAGTI,MAAM,EAAE1B,MAAM,CAAC,CAAD,CAAN,CAAU6B,UAAV,KAAyB,CAHxB;UAITU,QAAQ,EAAEvC,MAAM,CAAC,CAAD,CAAN,CAAUwC,IAAV,KAAmB;QAJpB,CAAb;MAMH;IACJ,CAXD;;IAaA,OAAO;MAAEpC,EAAF;MAAMC,OAAN;MAAeC;IAAf,CAAP;EACH;;EAEDL,cAAc,CAAC3B,KAAD,EAAQwB,OAAR,EAAiB;IAC3B,IAAIC,QAAQ,GAAG,EAAf;IAAA,IACIC,MAAM,GAAG,EADb;IAAA,IAEIhB,KAAK,GAAG,EAFZ;IAIAc,OAAO,CAACoC,OAAR,CAAiBO,GAAD,IAAS;MACrB,IAAIC,SAAS,GAAG,KAAKX,YAAL,CAAkBU,GAAG,CAAChB,WAAtB,CAAhB;;MACA,IAAIgB,GAAG,CAACE,KAAJ,KAAc,gBAAlB,EAAoC;QAChC,IAAIC,WAAW,GAAG;UACdR,IAAI,EAAE,QADQ;UAEdjF,OAAO,EAAEmB,KAAK,CAACuE,cAAN,GACH;YACIC,SAAS,EAAExE,KAAK,CAACuE;UADrB,CADG,GAIH;QANQ,CAAlB;;QASA,IAAIH,SAAS,KAAK,IAAlB,EAAwB;UACpBE,WAAW,CAACzF,OAAZ,CAAoBiF,IAApB,GAA2BM,SAA3B;QACH;;QACD3C,QAAQ,CAACpB,IAAT,CAAciE,WAAd;QACA;MACH;;MAED,IAAIH,GAAG,CAACM,cAAJ,KAAuB,mBAA3B,EAAgD;QAC5C,IAAIH,WAAW,GAAG;UACdR,IAAI,EAAE;QADQ,CAAlB;QAGArC,QAAQ,CAACpB,IAAT,CAAciE,WAAd;QACA;MACH;;MAED,IAAIH,GAAG,CAACE,KAAJ,KAAc,6BAAlB,EAAiD;QAC7C,IAAIC,WAAW,GAAG;UACdR,IAAI,EAAE;QADQ,CAAlB;QAGArC,QAAQ,CAACpB,IAAT,CAAciE,WAAd;QACA;MACH;;MAED,IAAIF,SAAS,KAAK,WAAd,IAA6BD,GAAG,CAACO,WAAJ,KAAoB,YAArD,EAAmE;QAC/D,IAAIJ,WAAW,GAAG;UACdR,IAAI,EAAE;QADQ,CAAlB;QAGArC,QAAQ,CAACpB,IAAT,CAAciE,WAAd;QACA;MACH;;MAED,IAAIK,SAAS,GAAG,KAAKC,oBAAL,CAA0B5E,KAA1B,EAAiCmE,GAAjC,EAAsCC,SAAtC,EAAiD1D,KAAjD,CAAhB;;MAEA,IAAIyD,GAAG,CAACU,WAAJ,KAAoB,KAAxB,EAA+B;QAC3BF,SAAS,CAACG,QAAV,GAAqB,IAArB;MACH;;MAED,IAAIX,GAAG,CAACM,cAAR,EAAwB;QACpBE,SAAS,CAACI,OAAV,GAAoBZ,GAAG,CAACM,cAAxB;MACH;;MAED,IAAIN,GAAG,CAACa,cAAR,EAAwB;QACpBL,SAAS,CAACpC,OAAV,GAAoB4B,GAAG,CAACa,cAAxB;MACH;;MAEDtD,MAAM,CAAC0C,SAAD,CAAN,GAAoBO,SAApB;IACH,CA1DD;IA4DA,OAAO;MAAElD,QAAF;MAAYC,MAAZ;MAAoBhB;IAApB,CAAP;EACH;;EAED+C,YAAY,CAACK,IAAD,EAAO;IACf,IAAI,KAAKlF,YAAL,CAAkBqG,WAAtB,EAAmC;MAC/B,OAAO,KAAKrG,YAAL,CAAkBsG,UAAlB,CAA6BpB,IAA7B,CAAP;IACH;;IAED,OAAO1F,SAAS,CAAC6G,WAAV,CAAsBnB,IAAtB,CAAP;EACH;;EAED1D,aAAa,CAAC0D,IAAD,EAAO;IAChB,IAAI,KAAKlF,YAAL,CAAkBuG,YAAtB,EAAoC;MAChC,OAAO,KAAKvG,YAAL,CAAkBuG,YAAlB,CAA+BrB,IAA/B,CAAP;IACH;;IAED,OAAO1F,SAAS,CAAC+G,YAAV,CAAuBrB,IAAvB,CAAP;EACH;;EAED7C,aAAa,CAAC6C,IAAD,EAAO;IAChB,IAAI,KAAKlF,YAAL,CAAkBwG,YAAtB,EAAoC;MAChC,OAAO,KAAKxG,YAAL,CAAkBwG,YAAlB,CAA+BtB,IAA/B,CAAP;IACH;;IAED,OAAO1F,SAAS,CAACgH,YAAV,CAAuBtB,IAAvB,CAAP;EACH;;EAEDc,oBAAoB,CAAC5E,KAAD,EAAQmE,GAAR,EAAaC,SAAb,EAAwB1D,KAAxB,EAA+B;IAC/C,IAAI2E,cAAc,GAAGtH,CAAC,CAACuH,IAAF,CAAO,KAAK1G,YAAL,CAAkB2G,oBAAzB,EAAgDC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAAUzF,KAAV,EAAiBmE,GAAjB,CAAzD,CAArB;;IACA,IAAIkB,cAAJ,EAAoB;MAChB,OAAOA,cAAc,CAACK,KAAf,CAAqB1F,KAArB,EAA4BmE,GAA5B,CAAP;IACH;;IAED,IAAIwB,QAAQ,GAAG,EAAf;;IACA,IAAIxB,GAAG,CAAChB,WAAJ,KAAoBiB,SAAxB,EAAmC;MAC/BuB,QAAQ,CAACjD,IAAT,GAAgByB,GAAG,CAAChB,WAApB;IACH;;IAED,QAAQgB,GAAG,CAACyB,SAAZ;MACI,KAAK,SAAL;QACID,QAAQ,CAAC/E,IAAT,GAAgB,MAAhB;;QACA,IAAIuD,GAAG,CAAC0B,wBAAR,EAAkC;UAC9BF,QAAQ,CAACG,SAAT,GAAqB3B,GAAG,CAAC0B,wBAAzB;QACH;;QACD;;MAEJ,KAAK,MAAL;QACIF,QAAQ,CAAC/E,IAAT,GAAgB,MAAhB;;QACA,IAAIuD,GAAG,CAAC0B,wBAAR,EAAkC;UAC9BF,QAAQ,CAACI,WAAT,GAAuB5B,GAAG,CAAC0B,wBAA3B;QACH;;QACD;;MAEJ,KAAK,MAAL;QACIF,QAAQ,CAAC/E,IAAT,GAAgB,QAAhB;;QACA,IAAIuD,GAAG,CAAC0B,wBAAR,EAAkC;UAC9BF,QAAQ,CAACG,SAAT,GAAqB3B,GAAG,CAAC0B,wBAAzB;QACH;;QACD;;MAEJ,KAAK,QAAL;QACIF,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;QACA+E,QAAQ,CAACK,MAAT,GAAkB7B,GAAG,CAAC8B,iBAAJ,IAAyB,EAA3C;QACAN,QAAQ,CAACO,KAAT,GAAiB,CAAjB;QACA,IAAInI,CAAC,CAACoI,QAAF,CAAWhC,GAAG,CAACO,WAAf,EAA4B,WAA5B,CAAJ,EAA8CiB,QAAQ,CAACS,QAAT,GAAoB,IAApB;QAC9C;;MAEJ,KAAK,KAAL;QACIT,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;QACA+E,QAAQ,CAACK,MAAT,GAAkB7B,GAAG,CAAC8B,iBAAJ,IAAyB,EAA3C;QACAN,QAAQ,CAACO,KAAT,GAAiB,CAAjB;QACA,IAAInI,CAAC,CAACoI,QAAF,CAAWhC,GAAG,CAACO,WAAf,EAA4B,WAA5B,CAAJ,EAA8CiB,QAAQ,CAACS,QAAT,GAAoB,IAApB;QAC9C;;MAEJ,KAAK,WAAL;QACIT,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;QACA+E,QAAQ,CAACK,MAAT,GAAkB7B,GAAG,CAAC8B,iBAAJ,IAAyB,CAA3C;QACAN,QAAQ,CAACO,KAAT,GAAiB,CAAjB;QACA,IAAInI,CAAC,CAACoI,QAAF,CAAWhC,GAAG,CAACO,WAAf,EAA4B,WAA5B,CAAJ,EAA8CiB,QAAQ,CAACS,QAAT,GAAoB,IAApB;QAC9C;;MAEJ,KAAK,UAAL;QACIT,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;QACA+E,QAAQ,CAACK,MAAT,GAAkB7B,GAAG,CAAC8B,iBAAJ,IAAyB,CAA3C;QACAN,QAAQ,CAACO,KAAT,GAAiB,CAAjB;QACA,IAAInI,CAAC,CAACoI,QAAF,CAAWhC,GAAG,CAACO,WAAf,EAA4B,WAA5B,CAAJ,EAA8CiB,QAAQ,CAACS,QAAT,GAAoB,IAApB;QAC9C;;MAEJ,KAAK,SAAL;QACI,IAAIrI,CAAC,CAACsI,UAAF,CAAalC,GAAG,CAACO,WAAjB,EAA8B,YAA9B,CAAJ,EAAiD;UAC7CiB,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;QACH,CAFD,MAEO;UACH+E,QAAQ,CAAC/E,IAAT,GAAgB,SAAhB;UACA+E,QAAQ,CAACK,MAAT,GAAkB7B,GAAG,CAAC8B,iBAAJ,IAAyB,CAA3C;UACAN,QAAQ,CAACO,KAAT,GAAiB,CAAjB;UACA,IAAInI,CAAC,CAACoI,QAAF,CAAWhC,GAAG,CAACO,WAAf,EAA4B,WAA5B,CAAJ,EAA8CiB,QAAQ,CAACS,QAAT,GAAoB,IAApB;QACjD;;QACD;;MAEJ,KAAK,MAAL;QACI,IAAIE,IAAI,GAAGnC,GAAG,CAACO,WAAJ,CAAgB6B,OAAhB,CAAwB,GAAxB,CAAX;QACA,IAAIC,KAAK,GAAGrC,GAAG,CAACO,WAAJ,CAAgB+B,WAAhB,CAA4B,GAA5B,CAAZ;;QAEA,IAAIC,QAAQ,GAAG1G,KAAK,CAACE,UAAN,GAAmBnC,CAAC,CAAC4I,UAAF,CAAaxC,GAAG,CAAChB,WAAjB,CAAlC;;QAEAzC,KAAK,CAACgG,QAAD,CAAL,GAAkB;UACd9F,IAAI,EAAE,MADQ;UAEdgG,MAAM,EAAEzC,GAAG,CAACO,WAAJ,CAAgBmC,SAAhB,CAA0BP,IAAI,GAAG,CAAjC,EAAoCE,KAApC,EACHM,KADG,CACG,GADH,EAEH/C,GAFG,CAEEgD,CAAD,IAAOA,CAAC,CAACC,MAAF,CAAS,CAAT,EAAYD,CAAC,CAAC7E,MAAF,GAAW,CAAvB,CAFR;QAFM,CAAlB;QAOAyD,QAAQ,CAAC/E,IAAT,GAAgB8F,QAAhB;QAEA;;MAEJ,KAAK,MAAL;QACIf,QAAQ,CAAC/E,IAAT,GAAgB,MAAhB;QACA+E,QAAQ,CAACG,SAAT,GAAqB3B,GAAG,CAAC0B,wBAAzB;QACA;;MAEJ,KAAK,UAAL;MACA,KAAK,WAAL;QACIF,QAAQ,CAAC/E,IAAT,GAAgB,UAAhB;QACA;;MAEJ,KAAK,SAAL;QACI+E,QAAQ,CAAC/E,IAAT,GAAgB,QAAhB;QACA+E,QAAQ,CAACsB,WAAT,GAAuB9C,GAAG,CAAC8B,iBAA3B;QACAN,QAAQ,CAACuB,aAAT,GAAyB/C,GAAG,CAACgD,aAA7B;QACAxB,QAAQ,CAACyB,KAAT,GAAiB,IAAjB;QACA;;MAEJ,KAAK,QAAL;QACIzB,QAAQ,CAACO,KAAT,GAAiB,CAAjB;;MACJ,KAAK,OAAL;QACIP,QAAQ,CAAC/E,IAAT,GAAgB,QAAhB;QACA+E,QAAQ,CAACsB,WAAT,GAAuB9C,GAAG,CAAC8B,iBAA3B;QACAN,QAAQ,CAACuB,aAAT,GAAyB/C,GAAG,CAACgD,aAA7B;QACA;;MAEJ;QACIE,OAAO,CAACpI,GAAR,CAAYkF,GAAZ;QACA,MAAM,IAAIhC,KAAJ,CAAU,oBAAV,CAAN;IAzGR;;IA8GA,OAAOwD,QAAP;EACH;;EAEDnF,0BAA0B,CAACb,aAAD,EAAgB;IACtC,IAAI2H,WAAW,GAAG,EAAlB;;IAGAvJ,CAAC,CAAC0C,MAAF,CAASd,aAAT,EAAwB,CAAC;MAAEgB;IAAF,CAAD,EAAiBmD,IAAjB,KAA0B;MAC9C,IAAI/F,CAAC,CAAC8D,OAAF,CAAUlB,UAAU,CAAC0B,YAArB,CAAJ,EAAwC;MAExC1B,UAAU,CAAC0B,YAAX,CAAwBuB,OAAxB,CAAgC,CAAC;QAAEhD,IAAF;QAAQ8C,QAAR;QAAkBC;MAAlB,CAAD,KAAoC;QAChE,IAAI4D,WAAW,GAAG5H,aAAa,CAACgE,UAAD,CAA/B;;QACA,IAAI6D,OAAO,GAAGzJ,CAAC,CAACuH,IAAF,CAAOiC,WAAW,CAAClF,YAAnB,EAAkCoF,KAAD,IAAWA,KAAK,CAAC9D,UAAN,KAAqBG,IAAjE,CAAd;;QAEA,IAAIlD,IAAI,KAAK,SAAb,EAAwB;UACpB,IAAI,CAAC4G,OAAL,EAAc;YAEVvJ,cAAc,CAACqJ,WAAD,EAAcxD,IAAd,EAAoB;cAAElD,IAAI,EAAE,UAAR;cAAoB8C,QAApB;cAA8BC;YAA9B,CAApB,CAAd;YACA;UACH;;UAGD0D,OAAO,CAACpI,GAAR,CAAY0B,UAAZ;UACA,MAAM,IAAIwB,KAAJ,CAAW,mBAAkBqF,OAAO,CAAClH,MAAO,IAAGkH,OAAO,CAAC5G,IAAK,IAAGkD,IAAK,EAApE,CAAN;QACH,CAVD,MAUO,IAAIlD,IAAI,KAAK,WAAb,EAA0B;UAC7B3C,cAAc,CAACqJ,WAAD,EAAcxD,IAAd,EAAoB;YAAElD,IAAF;YAAQ8C,QAAR;YAAkBC;UAAlB,CAApB,CAAd;;UAEA,IAAI,CAAC6D,OAAL,EAAc;YAEVvJ,cAAc,CAACqJ,WAAD,EAAchH,MAAd,EAAsB;cAAEM,IAAI,EAAE,SAAR;cAAmB+C,UAAU,EAAEG;YAA/B,CAAtB,CAAd;YACA;UACH;QACJ,CARM,MAQA;UACH,MAAM,IAAI3B,KAAJ,CAAU,kCAAkCvB,IAA5C,CAAN;QACH;MACJ,CAzBD;IA0BH,CA7BD;;IAgCA7C,CAAC,CAAC0C,MAAF,CAAS6G,WAAT,EAAsB,CAACjF,YAAD,EAAeyB,IAAf,KAAwB;MAC1C,IAAI;QAAEnD;MAAF,IAAiBhB,aAAa,CAACmE,IAAD,CAAlC;MAEA,IAAI4D,SAAJ;;MAEA,IAAIC,KAAK,CAACC,OAAN,CAAcjH,UAAU,CAAC8B,GAAzB,KAAiC9B,UAAU,CAAC8B,GAAX,CAAeP,MAAf,KAA0B,CAA/D,EAAkE;QAC9DwF,SAAS,GAAG3J,CAAC,CAAC8J,MAAF,CAASxF,YAAT,EAAwBoF,KAAD,IAAW9G,UAAU,CAAC8B,GAAX,CAAe8D,OAAf,CAAuBkB,KAAK,CAAC/D,QAA7B,MAA2C,CAAC,CAA9E,CAAZ;;QACA,IAAIgE,SAAS,CAACxF,MAAV,KAAqB,CAAzB,EAA4B;UACxB,KAAK4F,qBAAL,CAA2BJ,SAAS,CAAC,CAAD,CAAT,CAAa/D,UAAxC,EAAoD+D,SAAS,CAAC,CAAD,CAAT,CAAa/D,UAAjE,EAA6E2D,WAA7E;QACH;MACJ;;MAED3G,UAAU,CAACoB,OAAX,CAAmB6B,OAAnB,CAA2B,CAAC;QAAElC;MAAF,CAAD,KAAgB;QACvC,IAAIA,MAAM,CAACQ,MAAP,KAAkB,CAAtB,EAAyB;UACrBwF,SAAS,GAAG3J,CAAC,CAAC8J,MAAF,CAASxF,YAAT,EAAwBoF,KAAD,IAAW/F,MAAM,CAAC6E,OAAP,CAAekB,KAAK,CAAC/D,QAArB,MAAmC,CAAC,CAAtE,CAAZ;;UACA,IAAIgE,SAAS,CAACxF,MAAV,KAAqB,CAAzB,EAA4B;YACxB,KAAK4F,qBAAL,CAA2BJ,SAAS,CAAC,CAAD,CAAT,CAAa/D,UAAxC,EAAoD+D,SAAS,CAAC,CAAD,CAAT,CAAa/D,UAAjE,EAA6E2D,WAA7E;UACH;QACJ;MACJ,CAPD;IAQH,CApBD;;IAsBAvJ,CAAC,CAAC0C,MAAF,CAASd,aAAT,EAAwB,CAAC;MAAEgB;IAAF,CAAD,EAAiBmD,IAAjB,KAA0B;MAC9CnD,UAAU,CAAC0B,YAAX,GAA0BiF,WAAW,CAACxD,IAAD,CAArC;IACH,CAFD;EAGH;;EAEDgE,qBAAqB,CAACC,WAAD,EAAcC,WAAd,EAA2BV,WAA3B,EAAwC;IACzDrJ,cAAc,CAACqJ,WAAD,EAAcS,WAAd,EAA2B;MAAEnH,IAAI,EAAE,SAAR;MAAmB+C,UAAU,EAAEqE;IAA/B,CAA3B,CAAd;IACA/J,cAAc,CAACqJ,WAAD,EAAcU,WAAd,EAA2B;MAAEpH,IAAI,EAAE,SAAR;MAAmB+C,UAAU,EAAEoE;IAA/B,CAA3B,CAAd;EACH;;AArfyB;;AAwf9BE,MAAM,CAACC,OAAP,GAAiB3J,uBAAjB"}