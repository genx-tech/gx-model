{"version":3,"sources":["../../../../src/modeler/database/mysql/ReverseEngineering.js"],"names":["path","require","_","eachAsync_","pushIntoBucket","fs","GemlCodeGen","GemlUtils","MySQLReverseEngineering","constructor","logger","connector","reverseRules","options","saveDatabaseMeta","reverse_","outputDir","log","driver","database","ensureDirSync","console","tables","execute_","writeFileSync","join","JSON","stringify","entities","mapOfEntities","entitiesOolPath","table","entityName","_entityNaming","TABLE_NAME","push","entity","extractTable_","_refineEntityRelationships","forOwn","types","entityInfo","type","entityContent","transform","entityFile","schemaName","_schemaNaming","json","schemaContent","schemaFile","extractedOolPath","columns","features","fields","_processFields","indexInfo","isEmpty","pk","indexes","mapNameToIndex","_processIndexes","assert","length","referencesInfo","associations","_processReferences_","comment","TABLE_COMMENT","key","code","l","i","ref","refTableKey","REFERENCED_TABLE_NAME","Column_name","toLowerCase","REFERENCED_COLUMN_NAME","Error","COLUMN_NAME","unique","fkInfo","CONSTRAINT_NAME","Non_unique","fkColName","_fieldNaming","srcField","destEntity","forEach","Key_name","name","map","f","nullable","Null","col","fieldName","EXTRA","featureInfo","AUTO_INCREMENT","COLUMN_DEFAULT","COLUMN_TYPE","fieldInfo","_mysqlTypeToOolType","IS_NULLABLE","optional","default","COLUMN_COMMENT","fieldNaming","fieldNamin","entityNaming","schemaNaming","applicableRule","find","columnTypeConversion","rule","test","apply","typeInfo","DATA_TYPE","CHARACTER_MAXIMUM_LENGTH","maxLength","fixedLength","digits","NUMERIC_PRECISION","bytes","endsWith","unsigned","startsWith","left","indexOf","right","lastIndexOf","typeName","upperFirst","values","substring","split","v","substr","totalDigits","decimalDigits","NUMERIC_SCALE","exact","entityAssoc","refedEntity","backRef","assoc","keyAssocs","Array","isArray","filter","_makeEntityManyToMany","entityName1","entityName2","module","exports"],"mappings":"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","sourcesContent":["const path = require('path');\nconst { _, eachAsync_, pushIntoBucket } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst GemlCodeGen = require('../../../lang/GemlCodeGen');\nconst GemlUtils = require('../../../lang/GemlUtils');\n\nclass MySQLReverseEngineering {\n    constructor(logger, connector) {\n        this.logger = logger;\n        this.connector = connector;        \n\n        this.reverseRules = this.connector.options.reverseRules || {};       \n        this.saveDatabaseMeta = this.connector.options.saveDatabaseMeta || false;\n    }\n\n    async reverse_(outputDir) {\n        this.logger.log('verbose', `Reverse engineering against ${this.connector.driver} database \"${this.connector.database}\" ...`);\n\n        fs.ensureDirSync(outputDir);\n        console.log(outputDir);\n\n        let tables = await this.connector.execute_(\"select * from information_schema.tables where table_schema = ?\", [ this.connector.database ]);        \n\n        if (this.saveDatabaseMeta) {\n            fs.writeFileSync(path.join(outputDir, this.connector.database + '.meta.json'), JSON.stringify(tables, null, 2));\n        }\n\n        let entities = [], mapOfEntities = {};\n        \n        let entitiesOolPath = path.join(outputDir, 'entities');\n        fs.ensureDirSync(entitiesOolPath);\n\n        await eachAsync_(tables, async table => {\n            let entityName = this._entityNaming(table.TABLE_NAME);\n\n            entities.push({ entity: entityName });            \n\n            mapOfEntities[entityName] = await this.extractTable_(entityName, table, entitiesOolPath);\n        });\n\n        this._refineEntityRelationships(mapOfEntities);\n\n        _.forOwn(mapOfEntities, ({ types, entityInfo }, entityName) => {\n            let entity = {\n                type: types,\n                entity: {\n                    [entityName]: entityInfo\n                }\n            };\n    \n            let entityContent = GemlCodeGen.transform(entity);\n            let entityFile = path.join(entitiesOolPath, entityName + '.ool');\n            fs.writeFileSync(entityFile + '.json', JSON.stringify(entity, null, 2));\n            fs.writeFileSync(entityFile, entityContent);\n            this.logger.log('info', `Extracted entity definition file \"${entityFile}\".`);\n        });\n\n        let schemaName = this._schemaNaming(this.connector.database);\n\n        let json = {\n            \"namespace\": [\n                \"entities/**\"\n            ],\n            \"schema\": {\n                [schemaName]: {\n                    \"entities\": entities                \n                }                 \n            }\n        };\n\n        let schemaContent = GemlCodeGen.transform(json);\n        let schemaFile = path.join(outputDir, schemaName + '.ool');\n        fs.writeFileSync(schemaFile + '.json', JSON.stringify(json, null, 2));\n        fs.writeFileSync(schemaFile, schemaContent);\n        this.logger.log('info', `Extracted schema entry file \"${schemaFile}\".`);\n    }\n\n    async extractTable_(entityName, table, extractedOolPath) {\n        let columns = await this.connector.execute_(\"select * from information_schema.columns where table_schema = ? and table_name = ?\",\n            [this.connector.database, table.TABLE_NAME]);\n\n        if (this.saveDatabaseMeta) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.meta.json'), JSON.stringify(columns, null, 2));\n        }                    \n\n        let { features, fields, types } = this._processFields(table, columns);\n\n        let indexInfo = await this.connector.execute_(\"SHOW INDEXES FROM ??\", [ table.TABLE_NAME ]);\n\n        if (this.saveDatabaseMeta && !_.isEmpty(indexInfo)) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.index.json'), JSON.stringify(indexInfo, null, 2));\n        }       \n\n        let { pk, indexes, mapNameToIndex } = this._processIndexes(indexInfo);\n\n        assert: pk.length > 0;        \n\n        let referencesInfo = await this.connector.execute_(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE `REFERENCED_TABLE_SCHEMA` = ? AND `TABLE_NAME` = ? AND `REFERENCED_TABLE_NAME` IS NOT NULL\",\n            [ this.connector.database, table.TABLE_NAME ]);\n\n        if (this.saveDatabaseMeta && !_.isEmpty(referencesInfo)) {\n            fs.writeFileSync(path.join(extractedOolPath, table.TABLE_NAME + '.ref.json'), JSON.stringify(referencesInfo, null, 2));\n        }       \n\n        let associations = await this._processReferences_(referencesInfo, mapNameToIndex, fields);\n\n        let entityInfo = {            \n            comment: table.TABLE_COMMENT,\n            features,\n            fields,\n            associations,\n            key : pk.length > 1 ? pk : pk[0],\n            indexes\n        };\n\n        if (entityName !== table.TABLE_NAME) {\n            entityInfo.code = table.TABLE_NAME;\n        }\n\n        return { types, entityInfo };\n    }\n\n    async _processReferences_(referencesInfo, mapNameToIndex, fields) {\n        let associations = [];\n\n        let l = referencesInfo.length;\n\n        for (let i = 0; i < l; i++) {\n            let ref = referencesInfo[i];\n\n            let [refTableKey] = await this.connector.execute_(\"SHOW INDEXES FROM ?? WHERE `Key_name` = 'PRIMARY'\", [ref.REFERENCED_TABLE_NAME]);\n\n            if (refTableKey.Column_name.toLowerCase() !== ref.REFERENCED_COLUMN_NAME.toLowerCase()) {\n                throw new Error(`Foreign key \"${ref.COLUMN_NAME}\" not reference to the primary key.`);\n            }\n\n            let unique = false;\n\n            let fkInfo = mapNameToIndex[ref.CONSTRAINT_NAME]; \n            if (fkInfo) {\n                if (fkInfo.length > 1) {\n                    throw new Error(`Combination foreign key is not supported: \"${ref.CONSTRAINT_NAME}\"`);\n                }\n\n                unique = fkInfo[0].Non_unique === 0;\n            }\n\n            let fkColName = this._fieldNaming(ref.COLUMN_NAME);\n\n            if (unique) {\n                associations.push({ type: 'belongsTo', srcField: fkColName, destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME) });\n            } else {\n                associations.push({ type: 'hasMany', srcField: fkColName,  destEntity: this._entityNaming(ref.REFERENCED_TABLE_NAME) });\n            }\n\n            delete fields[fkColName];// = { type: '$association', code: fields[fkColName].code };\n        }\n\n        return associations;\n    }\n\n    _processIndexes(indexInfo) {\n        let pk = [], indexes = [];\n\n        let mapNameToIndex = {};\n\n        indexInfo.forEach(i => {\n            pushIntoBucket(mapNameToIndex, i.Key_name, i);\n        });\n\n        _.forOwn(mapNameToIndex, (fields, name) => {\n            if (name === 'PRIMARY') {\n                pk.push(fields.map(f => this._fieldNaming(f.Column_name)));\n            } else {\n                indexes.push({\n                    name: name,\n                    fields: fields.map(f => this._fieldNaming(f.Column_name)),\n                    unique: fields[0].Non_unique === 0,\n                    nullable: fields[0].Null === 'YES'\n                });\n            }\n        });\n\n        return { pk, indexes, mapNameToIndex };\n    }\n\n    _processFields(table, columns) {\n        let features = [], fields = {}, types = {};\n\n        columns.forEach(col => {\n            let fieldName = this._fieldNaming(col.COLUMN_NAME);\n            if (col.EXTRA === 'auto_increment') {\n                let featureInfo = {\n                    \"name\": \"autoId\",\n                    \"options\": table.AUTO_INCREMENT ? {                        \n                        \"startFrom\": table.AUTO_INCREMENT\n                    } : {}\n                };\n\n                if (fieldName !== 'id') {\n                    featureInfo.options.name = fieldName;\n                }\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.COLUMN_DEFAULT === 'CURRENT_TIMESTAMP') {\n                let featureInfo = {\n                    \"name\": \"createTimestamp\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (col.EXTRA === 'on update CURRENT_TIMESTAMP') {\n                let featureInfo = {\n                    \"name\": \"updateTimestamp\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            if (fieldName === 'isDeleted' && col.COLUMN_TYPE === 'tinyint(1)') {\n                let featureInfo = {\n                    \"name\": \"logicalDeletion\"\n                };\n                features.push(featureInfo);\n                return;\n            }\n\n            let fieldInfo = this._mysqlTypeToOolType(table, col, fieldName, types);\n\n            if (col.IS_NULLABLE === 'YES') {\n                fieldInfo.optional = true;\n            }\n\n            if (col.COLUMN_DEFAULT) {\n                fieldInfo.default = col.COLUMN_DEFAULT;\n            }\n\n            if (col.COLUMN_COMMENT) {\n                fieldInfo.comment = col.COLUMN_COMMENT;\n            }\n\n            fields[fieldName] = fieldInfo;\n        });\n\n        return { features, fields, types };\n    }\n\n    _fieldNaming(name) {\n        if (this.reverseRules.fieldNaming) {\n            return this.reverseRules.fieldNamin(name);\n        } \n        \n        return GemlUtils.fieldNaming(name);\n    }\n\n    _entityNaming(name) {\n        if (this.reverseRules.entityNaming) {\n            return this.reverseRules.entityNaming(name);\n        } \n        \n        return GemlUtils.entityNaming(name);\n    }\n\n    _schemaNaming(name) {\n        if (this.reverseRules.schemaNaming) {\n            return this.reverseRules.schemaNaming(name);\n        } \n        \n        return GemlUtils.schemaNaming(name);\n    }\n\n    _mysqlTypeToOolType(table, col, fieldName, types) {\n        let applicableRule = _.find(this.reverseRules.columnTypeConversion, rule => rule.test(table, col));\n        if (applicableRule) {\n            return applicableRule.apply(table, col);\n        }\n        \n        let typeInfo = {};        \n        if (col.COLUMN_NAME !== fieldName) {\n            typeInfo.code = col.COLUMN_NAME;\n        }\n\n        switch (col.DATA_TYPE) {\n            case 'varchar':\n                typeInfo.type = 'text';\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case 'char':\n                typeInfo.type = 'text';\n                if (col.CHARACTER_MAXIMUM_LENGTH) {\n                    typeInfo.fixedLength = col.CHARACTER_MAXIMUM_LENGTH;\n                }\n                break;\n\n            case 'bigint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 18;\n                typeInfo.bytes = 8;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'int':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 10;\n                typeInfo.bytes = 4;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'mediumint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 7;\n                typeInfo.bytes = 3;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'smallint':\n                typeInfo.type = 'integer';\n                typeInfo.digits = col.NUMERIC_PRECISION || 4;\n                typeInfo.bytes = 2;\n                if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                break;\n\n            case 'tinyint':\n                if (_.startsWith(col.COLUMN_TYPE, 'tinyint(1)')) {\n                    typeInfo.type = 'boolean';\n                } else {\n                    typeInfo.type = 'integer';\n                    typeInfo.digits = col.NUMERIC_PRECISION || 2;\n                    typeInfo.bytes = 1;\n                    if (_.endsWith(col.COLUMN_TYPE, ' unsigned')) typeInfo.unsigned = true;\n                }\n                break;\n\n            case 'enum':\n                let left = col.COLUMN_TYPE.indexOf('(');\n                let right = col.COLUMN_TYPE.lastIndexOf(')');\n\n                let typeName = table.TABLE_NAME + _.upperFirst(col.COLUMN_NAME);\n\n                types[typeName] = {\n                    type: 'enum',\n                    values: col.COLUMN_TYPE.substring(left + 1, right).split(',').map(v => v.substr(1, v.length - 2))\n                };\n\n                typeInfo.type = typeName;\n\n                break;\n\n            case 'text':\n                typeInfo.type = 'text';\n                typeInfo.maxLength = col.CHARACTER_MAXIMUM_LENGTH;\n                break;\n\n            case 'datetime':\n            case 'timestamp':\n                typeInfo.type = 'datetime';\n                break;\n\n            case 'decimal':\n                typeInfo.type = 'number';\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                typeInfo.exact = true;\n                break;\n\n            case 'float':\n                typeInfo.type = 'number';\n                typeInfo.totalDigits = col.NUMERIC_PRECISION;\n                typeInfo.decimalDigits = col.NUMERIC_SCALE;\n                break;\n\n            default:\n                console.log(col);\n                throw new Error('To be implemented.');\n        }\n\n        //_.find(this.reverseRules.columnTypeOptimization, rule => rule.test(table, col));\n\n        return typeInfo;\n    }\n\n    _refineEntityRelationships(mapOfEntities) {\n        let entityAssoc = {};\n\n        //1st round\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            if (_.isEmpty(entityInfo.associations)) return;            \n\n            entityInfo.associations.forEach(({ type, srcField, destEntity }) => {\n                let refedEntity = mapOfEntities[destEntity];\n                let backRef = _.find(refedEntity.associations, assoc => assoc.destEntity === name);\n\n                if (type === 'hasMany') {   \n\n                    if (!backRef) {\n                        //one-side relation\n                        pushIntoBucket(entityAssoc, name, { type: 'refersTo', srcField, destEntity });\n                        return;\n                    }\n\n                    //todo:\n                    console.log(entityInfo);\n                    throw new Error(`Back reference: ${backRef.entity} ${backRef.type} ${name}`);                    \n                } else if (type === 'belongsTo') {\n\n                    pushIntoBucket(entityAssoc, name, { type, srcField, destEntity });\n\n                    if (!backRef) {\n                        //one-side relation                        \n                        pushIntoBucket(entityAssoc, entity, { type: 'hasMany', destEntity: name });\n                        return;\n                    }\n                    \n                } else {\n                    throw new Error('Unexpected association type: ' + type);\n                }\n            });            \n        });        \n\n        //2nd round\n        _.forOwn(entityAssoc, (associations, name) => {\n            let { entityInfo } = mapOfEntities[name];\n\n            let keyAssocs;\n\n            if (Array.isArray(entityInfo.key) && entityInfo.key.length === 2) {\n                keyAssocs = _.filter(associations, assoc => entityInfo.key.indexOf(assoc.srcField) !== -1);\n                if (keyAssocs.length === 2) {\n                    this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                }\n            }\n\n            entityInfo.indexes.forEach(({ fields }) => {\n                if (fields.length === 2) {\n                    keyAssocs = _.filter(associations, assoc => fields.indexOf(assoc.srcField) !== -1);\n                    if (keyAssocs.length === 2) {\n                        this._makeEntityManyToMany(keyAssocs[0].destEntity, keyAssocs[1].destEntity, entityAssoc);\n                    }\n                }\n            });\n        });\n\n        _.forOwn(mapOfEntities, ({ entityInfo }, name) => {\n            entityInfo.associations = entityAssoc[name];\n        });\n    }\n\n    _makeEntityManyToMany(entityName1, entityName2, entityAssoc) {\n        pushIntoBucket(entityAssoc, entityName1, { type: 'hasMany', destEntity: entityName2 });\n        pushIntoBucket(entityAssoc, entityName2, { type: 'hasMany', destEntity: entityName1 });\n    }\n}\n\nmodule.exports = MySQLReverseEngineering;"],"file":"ReverseEngineering.js"}