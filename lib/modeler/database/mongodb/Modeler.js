"use strict";

require("source-map-support/register");

const path = require('path');

const Util = require('rk-utils');

const {
  _,
  fs,
  quote
} = Util;

class MongoDbModeler {
  constructor(context, connector, dbOptions) {
    this.logger = context.logger;
    this.linker = context.linker;
    this.outputPath = context.scriptOutputPath;
    this.connector = connector;
  }

  modeling(schema) {
    let dataFilesDir = path.join('mongodb', this.connector.database);
    let initIdxFilePath = path.join(dataFilesDir, 'data', '_init', 'index.list');
    let initFilePath = path.join(dataFilesDir, 'data', '_init', '0-init.json');

    this._writeFile(path.join(this.outputPath, initFilePath), JSON.stringify({}, null, 4));

    if (!fs.existsSync(path.join(this.outputPath, initIdxFilePath))) {
      this._writeFile(path.join(this.outputPath, initIdxFilePath), '0-init.json\n');
    }

    return schema;
  }

  _writeFile(filePath, content) {
    fs.ensureFileSync(filePath);
    fs.writeFileSync(filePath, content);
    this.logger.log('info', 'Generated db script: ' + filePath);
  }

}

module.exports = MongoDbModeler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb2RlbGVyL2RhdGFiYXNlL21vbmdvZGIvTW9kZWxlci5qcyJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIlV0aWwiLCJfIiwiZnMiLCJxdW90ZSIsIk1vbmdvRGJNb2RlbGVyIiwiY29uc3RydWN0b3IiLCJjb250ZXh0IiwiY29ubmVjdG9yIiwiZGJPcHRpb25zIiwibG9nZ2VyIiwibGlua2VyIiwib3V0cHV0UGF0aCIsInNjcmlwdE91dHB1dFBhdGgiLCJtb2RlbGluZyIsInNjaGVtYSIsImRhdGFGaWxlc0RpciIsImpvaW4iLCJkYXRhYmFzZSIsImluaXRJZHhGaWxlUGF0aCIsImluaXRGaWxlUGF0aCIsIl93cml0ZUZpbGUiLCJKU09OIiwic3RyaW5naWZ5IiwiZXhpc3RzU3luYyIsImZpbGVQYXRoIiwiY29udGVudCIsImVuc3VyZUZpbGVTeW5jIiwid3JpdGVGaWxlU3luYyIsImxvZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUUsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBO0FBQVQsSUFBbUJILElBQXpCOztBQU1BLE1BQU1JLGNBQU4sQ0FBcUI7QUFVakJDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVQyxTQUFWLEVBQXFCQyxTQUFyQixFQUFnQztBQUN2QyxTQUFLQyxNQUFMLEdBQWNILE9BQU8sQ0FBQ0csTUFBdEI7QUFDQSxTQUFLQyxNQUFMLEdBQWNKLE9BQU8sQ0FBQ0ksTUFBdEI7QUFDQSxTQUFLQyxVQUFMLEdBQWtCTCxPQUFPLENBQUNNLGdCQUExQjtBQUNBLFNBQUtMLFNBQUwsR0FBaUJBLFNBQWpCO0FBR0g7O0FBRURNLEVBQUFBLFFBQVEsQ0FBQ0MsTUFBRCxFQUFTO0FBQ2IsUUFBSUMsWUFBWSxHQUFHakIsSUFBSSxDQUFDa0IsSUFBTCxDQUFVLFNBQVYsRUFBcUIsS0FBS1QsU0FBTCxDQUFlVSxRQUFwQyxDQUFuQjtBQUVBLFFBQUlDLGVBQWUsR0FBR3BCLElBQUksQ0FBQ2tCLElBQUwsQ0FBVUQsWUFBVixFQUF3QixNQUF4QixFQUFnQyxPQUFoQyxFQUF5QyxZQUF6QyxDQUF0QjtBQUNBLFFBQUlJLFlBQVksR0FBR3JCLElBQUksQ0FBQ2tCLElBQUwsQ0FBVUQsWUFBVixFQUF3QixNQUF4QixFQUFnQyxPQUFoQyxFQUF5QyxhQUF6QyxDQUFuQjs7QUFFQSxTQUFLSyxVQUFMLENBQWdCdEIsSUFBSSxDQUFDa0IsSUFBTCxDQUFVLEtBQUtMLFVBQWYsRUFBMkJRLFlBQTNCLENBQWhCLEVBQTBERSxJQUFJLENBQUNDLFNBQUwsQ0FBZSxFQUFmLEVBQW1CLElBQW5CLEVBQXlCLENBQXpCLENBQTFEOztBQUVBLFFBQUksQ0FBQ3BCLEVBQUUsQ0FBQ3FCLFVBQUgsQ0FBY3pCLElBQUksQ0FBQ2tCLElBQUwsQ0FBVSxLQUFLTCxVQUFmLEVBQTJCTyxlQUEzQixDQUFkLENBQUwsRUFBaUU7QUFDN0QsV0FBS0UsVUFBTCxDQUFnQnRCLElBQUksQ0FBQ2tCLElBQUwsQ0FBVSxLQUFLTCxVQUFmLEVBQTJCTyxlQUEzQixDQUFoQixFQUE2RCxlQUE3RDtBQUNIOztBQUVELFdBQU9KLE1BQVA7QUFDSDs7QUFFRE0sRUFBQUEsVUFBVSxDQUFDSSxRQUFELEVBQVdDLE9BQVgsRUFBb0I7QUFDMUJ2QixJQUFBQSxFQUFFLENBQUN3QixjQUFILENBQWtCRixRQUFsQjtBQUNBdEIsSUFBQUEsRUFBRSxDQUFDeUIsYUFBSCxDQUFpQkgsUUFBakIsRUFBMkJDLE9BQTNCO0FBRUEsU0FBS2hCLE1BQUwsQ0FBWW1CLEdBQVosQ0FBZ0IsTUFBaEIsRUFBd0IsMEJBQTBCSixRQUFsRDtBQUNIOztBQXZDZ0I7O0FBMENyQkssTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsY0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBfLCBmcywgcXVvdGUgfSA9IFV0aWw7XG5cbi8qKlxuICogT29vbG9uZyBkYXRhYmFzZSBtb2RlbGVyIGZvciBtb25nb2RiLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIE1vbmdvRGJNb2RlbGVyIHtcbiAgICAvKiogICAgIFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0XG4gICAgICogQHByb3BlcnR5IHtMb2dnZXJ9IGNvbnRleHQubG9nZ2VyIC0gTG9nZ2VyIG9iamVjdCAgICAgXG4gICAgICogQHByb3BlcnR5IHtPb2xvbmdMaW5rZXJ9IGNvbnRleHQubGlua2VyIC0gT29sb25nIERTTCBsaW5rZXJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5zY3JpcHRPdXRwdXRQYXRoIC0gR2VuZXJhdGVkIHNjcmlwdCBwYXRoXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRiT3B0aW9uc1xuICAgICAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBkYk9wdGlvbnMuZGJcbiAgICAgKiBAcHJvcGVydHkge29iamVjdH0gZGJPcHRpb25zLnRhYmxlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY29ubmVjdG9yLCBkYk9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBjb250ZXh0LmxvZ2dlcjtcbiAgICAgICAgdGhpcy5saW5rZXIgPSBjb250ZXh0LmxpbmtlcjtcbiAgICAgICAgdGhpcy5vdXRwdXRQYXRoID0gY29udGV4dC5zY3JpcHRPdXRwdXRQYXRoO1xuICAgICAgICB0aGlzLmNvbm5lY3RvciA9IGNvbm5lY3RvcjtcblxuICAgICAgICBcbiAgICB9XG5cbiAgICBtb2RlbGluZyhzY2hlbWEpIHtcbiAgICAgICAgbGV0IGRhdGFGaWxlc0RpciA9IHBhdGguam9pbignbW9uZ29kYicsIHRoaXMuY29ubmVjdG9yLmRhdGFiYXNlKTtcblxuICAgICAgICBsZXQgaW5pdElkeEZpbGVQYXRoID0gcGF0aC5qb2luKGRhdGFGaWxlc0RpciwgJ2RhdGEnLCAnX2luaXQnLCAnaW5kZXgubGlzdCcpO1xuICAgICAgICBsZXQgaW5pdEZpbGVQYXRoID0gcGF0aC5qb2luKGRhdGFGaWxlc0RpciwgJ2RhdGEnLCAnX2luaXQnLCAnMC1pbml0Lmpzb24nKTtcblxuICAgICAgICB0aGlzLl93cml0ZUZpbGUocGF0aC5qb2luKHRoaXMub3V0cHV0UGF0aCwgaW5pdEZpbGVQYXRoKSwgSlNPTi5zdHJpbmdpZnkoe30sIG51bGwsIDQpKTtcblxuICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMocGF0aC5qb2luKHRoaXMub3V0cHV0UGF0aCwgaW5pdElkeEZpbGVQYXRoKSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3dyaXRlRmlsZShwYXRoLmpvaW4odGhpcy5vdXRwdXRQYXRoLCBpbml0SWR4RmlsZVBhdGgpLCAnMC1pbml0Lmpzb25cXG4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfSAgICBcblxuICAgIF93cml0ZUZpbGUoZmlsZVBhdGgsIGNvbnRlbnQpIHtcbiAgICAgICAgZnMuZW5zdXJlRmlsZVN5bmMoZmlsZVBhdGgpO1xuICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGZpbGVQYXRoLCBjb250ZW50KTtcblxuICAgICAgICB0aGlzLmxvZ2dlci5sb2coJ2luZm8nLCAnR2VuZXJhdGVkIGRiIHNjcmlwdDogJyArIGZpbGVQYXRoKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTW9uZ29EYk1vZGVsZXI7Il19