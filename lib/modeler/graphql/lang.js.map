{"version":3,"file":"lang.js","names":["Types","require","_","pascalCase","mapOfGemlTypesToGraphQL","toGraphQLType","fieldMeta","result","type","newType","typeName","subClass","length","last","name","values","scalarType","Error","optional","exports"],"sources":["../../../src/modeler/graphql/lang.js"],"sourcesContent":["const { Types } = require('@genx/data');\nconst { _, pascalCase }  = require('@genx/july');\n\nconst mapOfGemlTypesToGraphQL = {\n    'integer': 'Int',\n    'number': 'Float',\n    'text': 'String',\n    'boolean': 'Boolean'\n};\n\nfunction toGraphQLType(fieldMeta) {\n    const result = {};\n\n    switch (fieldMeta.type) {\n        case 'datetime': \n            result.newType = 'Date';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;\n\n        case 'enum':\n            result.newType = pascalCase(fieldMeta.subClass && fieldMeta.subClass.length > 0 ? _.last(fieldMeta.subClass) : fieldMeta.name);\n            result.typeName = 'enum';\n            result.values = fieldMeta.values;\n            result.type = result.newType;\n            break;\n        \n        //todo: to support other elements\n        case 'array':\n            result.type = '[String!]';\n            break;\n\n        //todo: to support object schema    \n        case 'object':\n            result.type = 'String';\n            break;\n        \n        case 'binary':\n            result.newType = 'Blob';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;    \n\n        default:\n            const scalarType = mapOfGemlTypesToGraphQL[fieldMeta.type];\n            if (scalarType) {\n                result.type = scalarType;\n            } else {\n                throw new Error(`Invalid field type: ${fieldMeta.type}`);\n            }\n    }\n\n    if (!fieldMeta.optional) {\n        result.type += '!';\n    }\n\n    return result;\n}\n\nexports.toGraphQLType = toGraphQLType;\n\n"],"mappings":";;;;AAAA,MAAM;EAAEA;AAAF,IAAYC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;EAAEC,CAAF;EAAKC;AAAL,IAAqBF,OAAO,CAAC,YAAD,CAAlC;;AAEA,MAAMG,uBAAuB,GAAG;EAC5B,WAAW,KADiB;EAE5B,UAAU,OAFkB;EAG5B,QAAQ,QAHoB;EAI5B,WAAW;AAJiB,CAAhC;;AAOA,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;EAC9B,MAAMC,MAAM,GAAG,EAAf;;EAEA,QAAQD,SAAS,CAACE,IAAlB;IACI,KAAK,UAAL;MACID,MAAM,CAACE,OAAP,GAAiB,MAAjB;MACAF,MAAM,CAACG,QAAP,GAAkB,QAAlB;MACAH,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;MACA;;IAEJ,KAAK,MAAL;MACIF,MAAM,CAACE,OAAP,GAAiBN,UAAU,CAACG,SAAS,CAACK,QAAV,IAAsBL,SAAS,CAACK,QAAV,CAAmBC,MAAnB,GAA4B,CAAlD,GAAsDV,CAAC,CAACW,IAAF,CAAOP,SAAS,CAACK,QAAjB,CAAtD,GAAmFL,SAAS,CAACQ,IAA9F,CAA3B;MACAP,MAAM,CAACG,QAAP,GAAkB,MAAlB;MACAH,MAAM,CAACQ,MAAP,GAAgBT,SAAS,CAACS,MAA1B;MACAR,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;MACA;;IAGJ,KAAK,OAAL;MACIF,MAAM,CAACC,IAAP,GAAc,WAAd;MACA;;IAGJ,KAAK,QAAL;MACID,MAAM,CAACC,IAAP,GAAc,QAAd;MACA;;IAEJ,KAAK,QAAL;MACID,MAAM,CAACE,OAAP,GAAiB,MAAjB;MACAF,MAAM,CAACG,QAAP,GAAkB,QAAlB;MACAH,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;MACA;;IAEJ;MACI,MAAMO,UAAU,GAAGZ,uBAAuB,CAACE,SAAS,CAACE,IAAX,CAA1C;;MACA,IAAIQ,UAAJ,EAAgB;QACZT,MAAM,CAACC,IAAP,GAAcQ,UAAd;MACH,CAFD,MAEO;QACH,MAAM,IAAIC,KAAJ,CAAW,uBAAsBX,SAAS,CAACE,IAAK,EAAhD,CAAN;MACH;;EApCT;;EAuCA,IAAI,CAACF,SAAS,CAACY,QAAf,EAAyB;IACrBX,MAAM,CAACC,IAAP,IAAe,GAAf;EACH;;EAED,OAAOD,MAAP;AACH;;AAEDY,OAAO,CAACd,aAAR,GAAwBA,aAAxB"}