{"version":3,"sources":["../../../src/modeler/graphql/lang.js"],"names":["Types","require","_","pascalCase","mapOfGemlTypesToGraphQL","toGraphQLType","fieldMeta","result","type","newType","typeName","subClass","length","last","name","values","scalarType","Error","optional","exports"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAqBF,OAAO,CAAC,YAAD,CAAlC;;AAEA,MAAMG,uBAAuB,GAAG;AAC5B,aAAW,KADiB;AAE5B,YAAU,OAFkB;AAG5B,UAAQ,QAHoB;AAI5B,aAAW;AAJiB,CAAhC;;AAOA,SAASC,aAAT,CAAuBC,SAAvB,EAAkC;AAC9B,QAAMC,MAAM,GAAG,EAAf;;AAEA,UAAQD,SAAS,CAACE,IAAlB;AACI,SAAK,UAAL;AACID,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAjB;AACAF,MAAAA,MAAM,CAACG,QAAP,GAAkB,QAAlB;AACAH,MAAAA,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;AACA;;AAEJ,SAAK,MAAL;AACIF,MAAAA,MAAM,CAACE,OAAP,GAAiBN,UAAU,CAACG,SAAS,CAACK,QAAV,IAAsBL,SAAS,CAACK,QAAV,CAAmBC,MAAnB,GAA4B,CAAlD,GAAsDV,CAAC,CAACW,IAAF,CAAOP,SAAS,CAACK,QAAjB,CAAtD,GAAmFL,SAAS,CAACQ,IAA9F,CAA3B;AACAP,MAAAA,MAAM,CAACG,QAAP,GAAkB,MAAlB;AACAH,MAAAA,MAAM,CAACQ,MAAP,GAAgBT,SAAS,CAACS,MAA1B;AACAR,MAAAA,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;AACA;;AAGJ,SAAK,OAAL;AACIF,MAAAA,MAAM,CAACC,IAAP,GAAc,WAAd;AACA;;AAGJ,SAAK,QAAL;AACID,MAAAA,MAAM,CAACC,IAAP,GAAc,QAAd;AACA;;AAEJ,SAAK,QAAL;AACID,MAAAA,MAAM,CAACE,OAAP,GAAiB,MAAjB;AACAF,MAAAA,MAAM,CAACG,QAAP,GAAkB,QAAlB;AACAH,MAAAA,MAAM,CAACC,IAAP,GAAcD,MAAM,CAACE,OAArB;AACA;;AAEJ;AACI,YAAMO,UAAU,GAAGZ,uBAAuB,CAACE,SAAS,CAACE,IAAX,CAA1C;;AACA,UAAIQ,UAAJ,EAAgB;AACZT,QAAAA,MAAM,CAACC,IAAP,GAAcQ,UAAd;AACH,OAFD,MAEO;AACH,cAAM,IAAIC,KAAJ,CAAW,uBAAsBX,SAAS,CAACE,IAAK,EAAhD,CAAN;AACH;;AApCT;;AAuCA,MAAI,CAACF,SAAS,CAACY,QAAf,EAAyB;AACrBX,IAAAA,MAAM,CAACC,IAAP,IAAe,GAAf;AACH;;AAED,SAAOD,MAAP;AACH;;AAEDY,OAAO,CAACd,aAAR,GAAwBA,aAAxB","sourcesContent":["const { Types } = require('@genx/data');\nconst { _, pascalCase }  = require('@genx/july');\n\nconst mapOfGemlTypesToGraphQL = {\n    'integer': 'Int',\n    'number': 'Float',\n    'text': 'String',\n    'boolean': 'Boolean'\n};\n\nfunction toGraphQLType(fieldMeta) {\n    const result = {};\n\n    switch (fieldMeta.type) {\n        case 'datetime': \n            result.newType = 'Date';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;\n\n        case 'enum':\n            result.newType = pascalCase(fieldMeta.subClass && fieldMeta.subClass.length > 0 ? _.last(fieldMeta.subClass) : fieldMeta.name);\n            result.typeName = 'enum';\n            result.values = fieldMeta.values;\n            result.type = result.newType;\n            break;\n        \n        //todo: to support other elements\n        case 'array':\n            result.type = '[String!]';\n            break;\n\n        //todo: to support object schema    \n        case 'object':\n            result.type = 'String';\n            break;\n        \n        case 'binary':\n            result.newType = 'Blob';\n            result.typeName = 'scalar';\n            result.type = result.newType;\n            break;    \n\n        default:\n            const scalarType = mapOfGemlTypesToGraphQL[fieldMeta.type];\n            if (scalarType) {\n                result.type = scalarType;\n            } else {\n                throw new Error(`Invalid field type: ${fieldMeta.type}`);\n            }\n    }\n\n    if (!fieldMeta.optional) {\n        result.type += '!';\n    }\n\n    return result;\n}\n\nexports.toGraphQLType = toGraphQLType;\n\n"],"file":"lang.js"}