"use strict";

require("source-map-support/register");

const {
  Types
} = require('@genx/data');

const {
  _,
  pascalCase
} = require('rk-utils');

const mapOfGemlTypesToGraphQL = {
  'integer': 'Int',
  'number': 'Float',
  'text': 'String',
  'boolean': 'Boolean'
};

function toGraphQLType(fieldMeta) {
  const result = {};

  switch (fieldMeta.type) {
    case 'datetime':
      result.newType = 'Date';
      result.typeName = 'scalar';
      result.type = result.newType;
      break;

    case 'enum':
      result.newType = pascalCase(fieldMeta.subClass && fieldMeta.subClass.length > 0 ? _.last(fieldMeta.subClass) : fieldMeta.name);
      result.typeName = 'enum';
      result.values = fieldMeta.values;
      result.type = result.newType;
      break;

    case 'array':
      result.type = '[String!]';
      break;

    case 'object':
      result.type = 'String';
      break;

    case 'binary':
      result.newType = 'Blob';
      result.typeName = 'scalar';
      result.type = result.newType;
      break;

    default:
      const scalarType = mapOfGemlTypesToGraphQL[fieldMeta.type];

      if (scalarType) {
        result.type = scalarType;
      } else {
        throw new Error(`Invalid field type: ${fieldMeta.type}`);
      }

  }

  if (!fieldMeta.optional) {
    result.type += '!';
  }

  return result;
}

exports.toGraphQLType = toGraphQLType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2RlbGVyL2dyYXBocWwvbGFuZy5qcyJdLCJuYW1lcyI6WyJUeXBlcyIsInJlcXVpcmUiLCJfIiwicGFzY2FsQ2FzZSIsIm1hcE9mR2VtbFR5cGVzVG9HcmFwaFFMIiwidG9HcmFwaFFMVHlwZSIsImZpZWxkTWV0YSIsInJlc3VsdCIsInR5cGUiLCJuZXdUeXBlIiwidHlwZU5hbWUiLCJzdWJDbGFzcyIsImxlbmd0aCIsImxhc3QiLCJuYW1lIiwidmFsdWVzIiwic2NhbGFyVHlwZSIsIkVycm9yIiwib3B0aW9uYWwiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVlDLE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQXFCRixPQUFPLENBQUMsVUFBRCxDQUFsQzs7QUFFQSxNQUFNRyx1QkFBdUIsR0FBRztBQUM1QixhQUFXLEtBRGlCO0FBRTVCLFlBQVUsT0FGa0I7QUFHNUIsVUFBUSxRQUhvQjtBQUk1QixhQUFXO0FBSmlCLENBQWhDOztBQU9BLFNBQVNDLGFBQVQsQ0FBdUJDLFNBQXZCLEVBQWtDO0FBQzlCLFFBQU1DLE1BQU0sR0FBRyxFQUFmOztBQUVBLFVBQVFELFNBQVMsQ0FBQ0UsSUFBbEI7QUFDSSxTQUFLLFVBQUw7QUFDSUQsTUFBQUEsTUFBTSxDQUFDRSxPQUFQLEdBQWlCLE1BQWpCO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ0csUUFBUCxHQUFrQixRQUFsQjtBQUNBSCxNQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY0QsTUFBTSxDQUFDRSxPQUFyQjtBQUNBOztBQUVKLFNBQUssTUFBTDtBQUNJRixNQUFBQSxNQUFNLENBQUNFLE9BQVAsR0FBaUJOLFVBQVUsQ0FBQ0csU0FBUyxDQUFDSyxRQUFWLElBQXNCTCxTQUFTLENBQUNLLFFBQVYsQ0FBbUJDLE1BQW5CLEdBQTRCLENBQWxELEdBQXNEVixDQUFDLENBQUNXLElBQUYsQ0FBT1AsU0FBUyxDQUFDSyxRQUFqQixDQUF0RCxHQUFtRkwsU0FBUyxDQUFDUSxJQUE5RixDQUEzQjtBQUNBUCxNQUFBQSxNQUFNLENBQUNHLFFBQVAsR0FBa0IsTUFBbEI7QUFDQUgsTUFBQUEsTUFBTSxDQUFDUSxNQUFQLEdBQWdCVCxTQUFTLENBQUNTLE1BQTFCO0FBQ0FSLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjRCxNQUFNLENBQUNFLE9BQXJCO0FBQ0E7O0FBR0osU0FBSyxPQUFMO0FBQ0lGLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjLFdBQWQ7QUFDQTs7QUFHSixTQUFLLFFBQUw7QUFDSUQsTUFBQUEsTUFBTSxDQUFDQyxJQUFQLEdBQWMsUUFBZDtBQUNBOztBQUVKLFNBQUssUUFBTDtBQUNJRCxNQUFBQSxNQUFNLENBQUNFLE9BQVAsR0FBaUIsTUFBakI7QUFDQUYsTUFBQUEsTUFBTSxDQUFDRyxRQUFQLEdBQWtCLFFBQWxCO0FBQ0FILE1BQUFBLE1BQU0sQ0FBQ0MsSUFBUCxHQUFjRCxNQUFNLENBQUNFLE9BQXJCO0FBQ0E7O0FBRUo7QUFDSSxZQUFNTyxVQUFVLEdBQUdaLHVCQUF1QixDQUFDRSxTQUFTLENBQUNFLElBQVgsQ0FBMUM7O0FBQ0EsVUFBSVEsVUFBSixFQUFnQjtBQUNaVCxRQUFBQSxNQUFNLENBQUNDLElBQVAsR0FBY1EsVUFBZDtBQUNILE9BRkQsTUFFTztBQUNILGNBQU0sSUFBSUMsS0FBSixDQUFXLHVCQUFzQlgsU0FBUyxDQUFDRSxJQUFLLEVBQWhELENBQU47QUFDSDs7QUFwQ1Q7O0FBdUNBLE1BQUksQ0FBQ0YsU0FBUyxDQUFDWSxRQUFmLEVBQXlCO0FBQ3JCWCxJQUFBQSxNQUFNLENBQUNDLElBQVAsSUFBZSxHQUFmO0FBQ0g7O0FBRUQsU0FBT0QsTUFBUDtBQUNIOztBQUVEWSxPQUFPLENBQUNkLGFBQVIsR0FBd0JBLGFBQXhCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBUeXBlcyB9ID0gcmVxdWlyZSgnQGdlbngvZGF0YScpO1xuY29uc3QgeyBfLCBwYXNjYWxDYXNlIH0gID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgbWFwT2ZHZW1sVHlwZXNUb0dyYXBoUUwgPSB7XG4gICAgJ2ludGVnZXInOiAnSW50JyxcbiAgICAnbnVtYmVyJzogJ0Zsb2F0JyxcbiAgICAndGV4dCc6ICdTdHJpbmcnLFxuICAgICdib29sZWFuJzogJ0Jvb2xlYW4nXG59O1xuXG5mdW5jdGlvbiB0b0dyYXBoUUxUeXBlKGZpZWxkTWV0YSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgc3dpdGNoIChmaWVsZE1ldGEudHlwZSkge1xuICAgICAgICBjYXNlICdkYXRldGltZSc6IFxuICAgICAgICAgICAgcmVzdWx0Lm5ld1R5cGUgPSAnRGF0ZSc7XG4gICAgICAgICAgICByZXN1bHQudHlwZU5hbWUgPSAnc2NhbGFyJztcbiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gcmVzdWx0Lm5ld1R5cGU7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICAgIHJlc3VsdC5uZXdUeXBlID0gcGFzY2FsQ2FzZShmaWVsZE1ldGEuc3ViQ2xhc3MgJiYgZmllbGRNZXRhLnN1YkNsYXNzLmxlbmd0aCA+IDAgPyBfLmxhc3QoZmllbGRNZXRhLnN1YkNsYXNzKSA6IGZpZWxkTWV0YS5uYW1lKTtcbiAgICAgICAgICAgIHJlc3VsdC50eXBlTmFtZSA9ICdlbnVtJztcbiAgICAgICAgICAgIHJlc3VsdC52YWx1ZXMgPSBmaWVsZE1ldGEudmFsdWVzO1xuICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSByZXN1bHQubmV3VHlwZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgLy90b2RvOiB0byBzdXBwb3J0IG90aGVyIGVsZW1lbnRzXG4gICAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gJ1tTdHJpbmchXSc7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAvL3RvZG86IHRvIHN1cHBvcnQgb2JqZWN0IHNjaGVtYSAgICBcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgICAgIHJlc3VsdC50eXBlID0gJ1N0cmluZyc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgICAgICByZXN1bHQubmV3VHlwZSA9ICdCbG9iJztcbiAgICAgICAgICAgIHJlc3VsdC50eXBlTmFtZSA9ICdzY2FsYXInO1xuICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSByZXN1bHQubmV3VHlwZTtcbiAgICAgICAgICAgIGJyZWFrOyAgICBcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY29uc3Qgc2NhbGFyVHlwZSA9IG1hcE9mR2VtbFR5cGVzVG9HcmFwaFFMW2ZpZWxkTWV0YS50eXBlXTtcbiAgICAgICAgICAgIGlmIChzY2FsYXJUeXBlKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnR5cGUgPSBzY2FsYXJUeXBlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgZmllbGQgdHlwZTogJHtmaWVsZE1ldGEudHlwZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWZpZWxkTWV0YS5vcHRpb25hbCkge1xuICAgICAgICByZXN1bHQudHlwZSArPSAnISc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0cy50b0dyYXBoUUxUeXBlID0gdG9HcmFwaFFMVHlwZTtcblxuIl19