{"version":3,"file":"build.js","names":["_","eachAsync_","require","throwIfFileNotExist","getSchemaConnectors","Linker","module","exports","app","context","log","name","gemlPath","schemaObjects","buildSchemaObjects","isEmpty","schemas","Error","schemaToConnector","deploymentSetting","schemaName","schema","connector","DbModeler","driver","dbModeler","linker","extraOptions","refinedSchema","modeling","DaoModeler","daoModeler","modeling_"],"sources":["../../src/commands/build.js"],"sourcesContent":["const { _, eachAsync_ } = require('@genx/july');\nconst { throwIfFileNotExist, getSchemaConnectors } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} build`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);    \n\n    const schemaObjects = Linker.buildSchemaObjects(app, context);\n\n    if (_.isEmpty(context.schemas)) {\n        throw new Error(`Missing schema data source setting. Please run \"${app.name} connect\" to configure data source first.`);\n    }\n\n    let schemaToConnector = getSchemaConnectors(app, context.schemas);\n\n    return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {      \n        app.log('verbose', `Processing schema \"${schemaName}\" ...`);   \n        \n        let schema = schemaObjects[schemaName];\n\n        if (!schema) {\n            throw new Error(`Schema \"${schemaName}\" not found in model source.\"`);\n        }\n\n        let connector = schemaToConnector[schemaName];\n\n        let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);\n        let dbModeler = new DbModeler(context, schema.linker, connector, deploymentSetting.extraOptions);\n        let refinedSchema = dbModeler.modeling(schema, schemaToConnector);\n\n        const DaoModeler = require('../modeler/Dao');\n        let daoModeler = new DaoModeler(context, schema.linker, connector);\n\n        return daoModeler.modeling_(refinedSchema);\n    });            \n};\n"],"mappings":";;;;AAAA,MAAM;EAAEA,CAAF;EAAKC;AAAL,IAAoBC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;EAAEC,mBAAF;EAAuBC;AAAvB,IAA+CF,OAAO,CAAC,kBAAD,CAA5D;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,gBAAD,CAAtB;;AAeAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;EACrCD,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,GAAEF,GAAG,CAACG,IAAK,QAA/B;EAEAR,mBAAmB,CAAC,UAAD,EAAaM,OAAO,CAACG,QAArB,CAAnB;EAEA,MAAMC,aAAa,GAAGR,MAAM,CAACS,kBAAP,CAA0BN,GAA1B,EAA+BC,OAA/B,CAAtB;;EAEA,IAAIT,CAAC,CAACe,OAAF,CAAUN,OAAO,CAACO,OAAlB,CAAJ,EAAgC;IAC5B,MAAM,IAAIC,KAAJ,CAAW,mDAAkDT,GAAG,CAACG,IAAK,2CAAtE,CAAN;EACH;;EAED,IAAIO,iBAAiB,GAAGd,mBAAmB,CAACI,GAAD,EAAMC,OAAO,CAACO,OAAd,CAA3C;EAEA,OAAOf,UAAU,CAACQ,OAAO,CAACO,OAAT,EAAkB,OAAOG,iBAAP,EAA0BC,UAA1B,KAAyC;IACxEZ,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,sBAAqBU,UAAW,OAApD;IAEA,IAAIC,MAAM,GAAGR,aAAa,CAACO,UAAD,CAA1B;;IAEA,IAAI,CAACC,MAAL,EAAa;MACT,MAAM,IAAIJ,KAAJ,CAAW,WAAUG,UAAW,+BAAhC,CAAN;IACH;;IAED,IAAIE,SAAS,GAAGJ,iBAAiB,CAACE,UAAD,CAAjC;;IAEA,IAAIG,SAAS,GAAGrB,OAAO,CAAE,uBAAsBoB,SAAS,CAACE,MAAO,UAAzC,CAAvB;;IACA,IAAIC,SAAS,GAAG,IAAIF,SAAJ,CAAcd,OAAd,EAAuBY,MAAM,CAACK,MAA9B,EAAsCJ,SAAtC,EAAiDH,iBAAiB,CAACQ,YAAnE,CAAhB;IACA,IAAIC,aAAa,GAAGH,SAAS,CAACI,QAAV,CAAmBR,MAAnB,EAA2BH,iBAA3B,CAApB;;IAEA,MAAMY,UAAU,GAAG5B,OAAO,CAAC,gBAAD,CAA1B;;IACA,IAAI6B,UAAU,GAAG,IAAID,UAAJ,CAAerB,OAAf,EAAwBY,MAAM,CAACK,MAA/B,EAAuCJ,SAAvC,CAAjB;IAEA,OAAOS,UAAU,CAACC,SAAX,CAAqBJ,aAArB,CAAP;EACH,CAnBgB,CAAjB;AAoBH,CAjCD"}