{"version":3,"sources":["../../src/commands/build.js"],"names":["_","eachAsync_","require","throwIfFileNotExist","getSchemaConnectors","Linker","module","exports","app","context","log","name","gemlPath","linker","schemaFiles","getGemlFiles","useJsonSource","forEach","schemaFile","link","console","schemaToConnector","schemas","deploymentSetting","schemaName","schema","Error","connector","DbModeler","driver","dbModeler","extraOptions","refinedSchema","modeling","DaoModeler","daoModeler","modeling_"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA;AAAL,IAAoBC,OAAO,CAAC,YAAD,CAAjC;;AACA,MAAM;AAAEC,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAA+CF,OAAO,CAAC,kBAAD,CAA5D;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,gBAAD,CAAtB;;AAeAI,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AACrCD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,GAAEF,GAAG,CAACG,IAAK,QAA/B;AAEAR,EAAAA,mBAAmB,CAAC,UAAD,EAAaM,OAAO,CAACG,QAArB,CAAnB;AAEA,MAAIC,MAAM,GAAG,IAAIR,MAAJ,CAAWG,GAAX,EAAgBC,OAAhB,CAAb;AAEA,MAAIK,WAAW,GAAGT,MAAM,CAACU,YAAP,CAAoBN,OAAO,CAACG,QAA5B,EAAsCH,OAAO,CAACO,aAA9C,CAAlB;AACAF,EAAAA,WAAW,CAACG,OAAZ,CAAoBC,UAAU,IAAIL,MAAM,CAACM,IAAP,CAAYD,UAAZ,CAAlC;AAEAE,EAAAA,OAAO,CAACV,GAAR,CAAY,WAAZ;AAEA,MAAIW,iBAAiB,GAAGjB,mBAAmB,CAACI,GAAD,EAAMC,OAAO,CAACa,OAAd,CAA3C;AAEA,SAAOrB,UAAU,CAACQ,OAAO,CAACa,OAAT,EAAkB,OAAOC,iBAAP,EAA0BC,UAA1B,KAAyC;AACxEhB,IAAAA,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,sBAAqBc,UAAW,OAApD;AAEA,QAAIC,MAAM,GAAGZ,MAAM,CAACS,OAAP,CAAeE,UAAf,CAAb;;AAEA,QAAI,CAACC,MAAL,EAAa;AACT,YAAM,IAAIC,KAAJ,CAAW,WAAUF,UAAW,+BAAhC,CAAN;AACH;;AAED,QAAIG,SAAS,GAAGN,iBAAiB,CAACG,UAAD,CAAjC;;AAEA,QAAII,SAAS,GAAG1B,OAAO,CAAE,uBAAsByB,SAAS,CAACE,MAAO,UAAzC,CAAvB;;AACA,QAAIC,SAAS,GAAG,IAAIF,SAAJ,CAAcnB,OAAd,EAAuBI,MAAvB,EAA+Bc,SAA/B,EAA0CJ,iBAAiB,CAACQ,YAA5D,CAAhB;AACA,QAAIC,aAAa,GAAGF,SAAS,CAACG,QAAV,CAAmBR,MAAnB,EAA2BJ,iBAA3B,CAApB;;AAEA,UAAMa,UAAU,GAAGhC,OAAO,CAAC,gBAAD,CAA1B;;AACA,QAAIiC,UAAU,GAAG,IAAID,UAAJ,CAAezB,OAAf,EAAwBI,MAAxB,EAAgCc,SAAhC,CAAjB;AAEA,WAAOQ,UAAU,CAACC,SAAX,CAAqBJ,aAArB,CAAP;AACH,GAnBgB,CAAjB;AAoBH,CAlCD","sourcesContent":["const { _, eachAsync_ } = require('@genx/july');\nconst { throwIfFileNotExist, getSchemaConnectors } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} build`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);\n\n    let linker = new Linker(app, context);\n\n    let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);\n    schemaFiles.forEach(schemaFile => linker.link(schemaFile));  \n\n    console.log('eijafoifj');\n\n    let schemaToConnector = getSchemaConnectors(app, context.schemas);\n\n    return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {      \n        app.log('verbose', `Processing schema \"${schemaName}\" ...`);   \n        \n        let schema = linker.schemas[schemaName];\n\n        if (!schema) {\n            throw new Error(`Schema \"${schemaName}\" not found in model source.\"`);\n        }\n\n        let connector = schemaToConnector[schemaName];\n\n        let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);\n        let dbModeler = new DbModeler(context, linker, connector, deploymentSetting.extraOptions);\n        let refinedSchema = dbModeler.modeling(schema, schemaToConnector);\n\n        const DaoModeler = require('../modeler/Dao');\n        let daoModeler = new DaoModeler(context, linker, connector);\n\n        return daoModeler.modeling_(refinedSchema);\n    });            \n};\n"],"file":"build.js"}