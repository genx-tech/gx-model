{"version":3,"file":"clean.js","names":["path","require","_","naming","eachAsync_","del","throwIfFileNotExist","Linker","module","exports","app","context","log","name","gemlPath","schemaObjects","buildSchemaObjects","jsonOnly","option","jsonFiles","join","schema","schemaName","manifestPath","modelPath","pascalCase"],"sources":["../../src/commands/clean.js"],"sourcesContent":["const path = require('path');\nconst { _, naming, eachAsync_ } = require('@genx/july');\nconst del = require('del');\nconst { throwIfFileNotExist } = require('../utils/helpers');\nconst Linker = require('../lang/Linker');\n\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} clean`);\n\n    throwIfFileNotExist(\"gemlPath\", context.gemlPath);\n\n    const schemaObjects = Linker.buildSchemaObjects(app, context);\n\n    const jsonOnly = app.option('json-only');\n    \n    const jsonFiles = path.join(context.gemlPath, '**/*.json');\n    await del(jsonFiles);\n    app.log('info', `Deleted intermediate files.`);   \n\n    if (!jsonOnly) {\n        return eachAsync_(schemaObjects, async (schema, schemaName) => {      \n            app.log('verbose', `Removing auto-generated files of schema \"${schemaName}\" ...`);   \n\n            await del([\n                path.join(context.manifestPath, schemaName,  '*.js'),\n                path.join(context.manifestPath, schemaName,  '*.json'),\n                path.join(context.modelPath, naming.pascalCase(schemaName) + '.js'),\n                path.join(context.modelPath, schemaName, 'base', '*.js'),\n                path.join(context.modelPath, schemaName, 'inputs', '*.js'),\n                path.join(context.modelPath, schemaName, 'types', '*.js'),\n            ]);\n\n            app.log('info', `Removed auto-generated files of schema \"${schemaName}\".`);           \n        });            \n    }\n};\n"],"mappings":";;;;AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,MAAM;EAAEC,CAAF;EAAKC,MAAL;EAAaC;AAAb,IAA4BH,OAAO,CAAC,YAAD,CAAzC;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAM;EAAEK;AAAF,IAA0BL,OAAO,CAAC,kBAAD,CAAvC;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,gBAAD,CAAtB;;AAgBAO,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;EACrCD,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,GAAEF,GAAG,CAACG,IAAK,QAA/B;EAEAP,mBAAmB,CAAC,UAAD,EAAaK,OAAO,CAACG,QAArB,CAAnB;EAEA,MAAMC,aAAa,GAAGR,MAAM,CAACS,kBAAP,CAA0BN,GAA1B,EAA+BC,OAA/B,CAAtB;EAEA,MAAMM,QAAQ,GAAGP,GAAG,CAACQ,MAAJ,CAAW,WAAX,CAAjB;EAEA,MAAMC,SAAS,GAAGnB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACG,QAAlB,EAA4B,WAA5B,CAAlB;EACA,MAAMT,GAAG,CAACc,SAAD,CAAT;EACAT,GAAG,CAACE,GAAJ,CAAQ,MAAR,EAAiB,6BAAjB;;EAEA,IAAI,CAACK,QAAL,EAAe;IACX,OAAOb,UAAU,CAACW,aAAD,EAAgB,OAAOM,MAAP,EAAeC,UAAf,KAA8B;MAC3DZ,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,4CAA2CU,UAAW,OAA1E;MAEA,MAAMjB,GAAG,CAAC,CACNL,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACY,YAAlB,EAAgCD,UAAhC,EAA6C,MAA7C,CADM,EAENtB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACY,YAAlB,EAAgCD,UAAhC,EAA6C,QAA7C,CAFM,EAGNtB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACa,SAAlB,EAA6BrB,MAAM,CAACsB,UAAP,CAAkBH,UAAlB,IAAgC,KAA7D,CAHM,EAINtB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACa,SAAlB,EAA6BF,UAA7B,EAAyC,MAAzC,EAAiD,MAAjD,CAJM,EAKNtB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACa,SAAlB,EAA6BF,UAA7B,EAAyC,QAAzC,EAAmD,MAAnD,CALM,EAMNtB,IAAI,CAACoB,IAAL,CAAUT,OAAO,CAACa,SAAlB,EAA6BF,UAA7B,EAAyC,OAAzC,EAAkD,MAAlD,CANM,CAAD,CAAT;MASAZ,GAAG,CAACE,GAAJ,CAAQ,MAAR,EAAiB,2CAA0CU,UAAW,IAAtE;IACH,CAbgB,CAAjB;EAcH;AACJ,CA7BD"}