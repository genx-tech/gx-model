"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getSchemaConnectors
} = require('../utils/helpers');

const Linker = require('../lang/Linker');

module.exports = async (app, context) => {
  app.log('verbose', 'geml graphql');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let linker = new Linker(app, context);
  let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));
  let schemaToConnector = getSchemaConnectors(app, context.schemas);
  return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {
    app.log('verbose', `Processing schema "${schemaName}" ...`);
    let schema = linker.schemas[schemaName];

    if (!schema) {
      throw new Error(`Schema "${schemaName}" not found in model source."`);
    }

    let connector = schemaToConnector[schemaName];
    const skipGeneration = true;

    let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

    let dbModeler = new DbModeler(context, linker, connector, deploymentSetting.extraOptions);
    let refinedSchema = dbModeler.modeling(schema, schemaToConnector, skipGeneration);

    const GraphQLModeler = require('../modeler/GraphQL');

    let graphQLModeler = new GraphQLModeler(context, linker, connector);
    return graphQLModeler.modeling_(refinedSchema);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9ncmFwaHFsLmpzIl0sIm5hbWVzIjpbIl8iLCJlYWNoQXN5bmNfIiwicmVxdWlyZSIsInRocm93SWZGaWxlTm90RXhpc3QiLCJnZXRTY2hlbWFDb25uZWN0b3JzIiwiTGlua2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImNvbnRleHQiLCJsb2ciLCJnZW1sUGF0aCIsImxpbmtlciIsInNjaGVtYUZpbGVzIiwiZ2V0R2VtbEZpbGVzIiwidXNlSnNvblNvdXJjZSIsImZvckVhY2giLCJzY2hlbWFGaWxlIiwibGluayIsInNjaGVtYVRvQ29ubmVjdG9yIiwic2NoZW1hcyIsImRlcGxveW1lbnRTZXR0aW5nIiwic2NoZW1hTmFtZSIsInNjaGVtYSIsIkVycm9yIiwiY29ubmVjdG9yIiwic2tpcEdlbmVyYXRpb24iLCJEYk1vZGVsZXIiLCJkcml2ZXIiLCJkYk1vZGVsZXIiLCJleHRyYU9wdGlvbnMiLCJyZWZpbmVkU2NoZW1hIiwibW9kZWxpbmciLCJHcmFwaFFMTW9kZWxlciIsImdyYXBoUUxNb2RlbGVyIiwibW9kZWxpbmdfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBO0FBQXZCLElBQStDRixPQUFPLENBQUMsa0JBQUQsQ0FBNUQ7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBZUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsY0FBbkI7QUFFQVAsRUFBQUEsbUJBQW1CLENBQUMsVUFBRCxFQUFhTSxPQUFPLENBQUNFLFFBQXJCLENBQW5CO0FBRUEsTUFBSUMsTUFBTSxHQUFHLElBQUlQLE1BQUosQ0FBV0csR0FBWCxFQUFnQkMsT0FBaEIsQ0FBYjtBQUVBLE1BQUlJLFdBQVcsR0FBR1IsTUFBTSxDQUFDUyxZQUFQLENBQW9CTCxPQUFPLENBQUNFLFFBQTVCLEVBQXNDRixPQUFPLENBQUNNLGFBQTlDLENBQWxCO0FBQ0FGLEVBQUFBLFdBQVcsQ0FBQ0csT0FBWixDQUFvQkMsVUFBVSxJQUFJTCxNQUFNLENBQUNNLElBQVAsQ0FBWUQsVUFBWixDQUFsQztBQUVBLE1BQUlFLGlCQUFpQixHQUFHZixtQkFBbUIsQ0FBQ0ksR0FBRCxFQUFNQyxPQUFPLENBQUNXLE9BQWQsQ0FBM0M7QUFFQSxTQUFPbkIsVUFBVSxDQUFDUSxPQUFPLENBQUNXLE9BQVQsRUFBa0IsT0FBT0MsaUJBQVAsRUFBMEJDLFVBQTFCLEtBQXlDO0FBQ3hFZCxJQUFBQSxHQUFHLENBQUNFLEdBQUosQ0FBUSxTQUFSLEVBQW9CLHNCQUFxQlksVUFBVyxPQUFwRDtBQUVBLFFBQUlDLE1BQU0sR0FBR1gsTUFBTSxDQUFDUSxPQUFQLENBQWVFLFVBQWYsQ0FBYjs7QUFFQSxRQUFJLENBQUNDLE1BQUwsRUFBYTtBQUNULFlBQU0sSUFBSUMsS0FBSixDQUFXLFdBQVVGLFVBQVcsK0JBQWhDLENBQU47QUFDSDs7QUFFRCxRQUFJRyxTQUFTLEdBQUdOLGlCQUFpQixDQUFDRyxVQUFELENBQWpDO0FBRUEsVUFBTUksY0FBYyxHQUFHLElBQXZCOztBQUVBLFFBQUlDLFNBQVMsR0FBR3pCLE9BQU8sQ0FBRSx1QkFBc0J1QixTQUFTLENBQUNHLE1BQU8sVUFBekMsQ0FBdkI7O0FBQ0EsUUFBSUMsU0FBUyxHQUFHLElBQUlGLFNBQUosQ0FBY2xCLE9BQWQsRUFBdUJHLE1BQXZCLEVBQStCYSxTQUEvQixFQUEwQ0osaUJBQWlCLENBQUNTLFlBQTVELENBQWhCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHRixTQUFTLENBQUNHLFFBQVYsQ0FBbUJULE1BQW5CLEVBQTJCSixpQkFBM0IsRUFBOENPLGNBQTlDLENBQXBCOztBQUVBLFVBQU1PLGNBQWMsR0FBRy9CLE9BQU8sQ0FBQyxvQkFBRCxDQUE5Qjs7QUFDQSxRQUFJZ0MsY0FBYyxHQUFHLElBQUlELGNBQUosQ0FBbUJ4QixPQUFuQixFQUE0QkcsTUFBNUIsRUFBb0NhLFNBQXBDLENBQXJCO0FBRUEsV0FBT1MsY0FBYyxDQUFDQyxTQUFmLENBQXlCSixhQUF6QixDQUFQO0FBQ0gsR0FyQmdCLENBQWpCO0FBc0JILENBbENEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0aHJvd0lmRmlsZU5vdEV4aXN0LCBnZXRTY2hlbWFDb25uZWN0b3JzIH0gPSByZXF1aXJlKCcuLi91dGlscy9oZWxwZXJzJyk7XG5jb25zdCBMaW5rZXIgPSByZXF1aXJlKCcuLi9sYW5nL0xpbmtlcicpO1xuXG4vKipcbiAqIEJ1aWxkIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMgZnJvbSBvb2xvbmcgZmlsZXMuXG4gKiBAcGFyYW0ge1NlcnZpY2VDb250YWluZXJ9IGFwcFxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5nZW1sUGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubW9kZWxQYXRoICAgICAgICAgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5zY3JpcHRQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tYW5pZmVzdFBhdGhcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC51c2VKc29uU291cmNlXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQuc2F2ZUludGVybWVkaWF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuc2NoZW1hcyAgIFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGFwcCwgY29udGV4dCkgPT4ge1xuICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCAnZ2VtbCBncmFwaHFsJyk7XG5cbiAgICB0aHJvd0lmRmlsZU5vdEV4aXN0KFwiZ2VtbFBhdGhcIiwgY29udGV4dC5nZW1sUGF0aCk7XG5cbiAgICBsZXQgbGlua2VyID0gbmV3IExpbmtlcihhcHAsIGNvbnRleHQpO1xuXG4gICAgbGV0IHNjaGVtYUZpbGVzID0gTGlua2VyLmdldEdlbWxGaWxlcyhjb250ZXh0LmdlbWxQYXRoLCBjb250ZXh0LnVzZUpzb25Tb3VyY2UpO1xuICAgIHNjaGVtYUZpbGVzLmZvckVhY2goc2NoZW1hRmlsZSA9PiBsaW5rZXIubGluayhzY2hlbWFGaWxlKSk7ICBcblxuICAgIGxldCBzY2hlbWFUb0Nvbm5lY3RvciA9IGdldFNjaGVtYUNvbm5lY3RvcnMoYXBwLCBjb250ZXh0LnNjaGVtYXMpO1xuXG4gICAgcmV0dXJuIGVhY2hBc3luY18oY29udGV4dC5zY2hlbWFzLCBhc3luYyAoZGVwbG95bWVudFNldHRpbmcsIHNjaGVtYU5hbWUpID0+IHsgICAgICBcbiAgICAgICAgYXBwLmxvZygndmVyYm9zZScsIGBQcm9jZXNzaW5nIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIiAuLi5gKTsgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBzY2hlbWEgPSBsaW5rZXIuc2NoZW1hc1tzY2hlbWFOYW1lXTtcblxuICAgICAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTY2hlbWEgXCIke3NjaGVtYU5hbWV9XCIgbm90IGZvdW5kIGluIG1vZGVsIHNvdXJjZS5cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbm5lY3RvciA9IHNjaGVtYVRvQ29ubmVjdG9yW3NjaGVtYU5hbWVdO1xuXG4gICAgICAgIGNvbnN0IHNraXBHZW5lcmF0aW9uID0gdHJ1ZTtcblxuICAgICAgICBsZXQgRGJNb2RlbGVyID0gcmVxdWlyZShgLi4vbW9kZWxlci9kYXRhYmFzZS8ke2Nvbm5lY3Rvci5kcml2ZXJ9L01vZGVsZXJgKTtcbiAgICAgICAgbGV0IGRiTW9kZWxlciA9IG5ldyBEYk1vZGVsZXIoY29udGV4dCwgbGlua2VyLCBjb25uZWN0b3IsIGRlcGxveW1lbnRTZXR0aW5nLmV4dHJhT3B0aW9ucyk7XG4gICAgICAgIGxldCByZWZpbmVkU2NoZW1hID0gZGJNb2RlbGVyLm1vZGVsaW5nKHNjaGVtYSwgc2NoZW1hVG9Db25uZWN0b3IsIHNraXBHZW5lcmF0aW9uKTtcblxuICAgICAgICBjb25zdCBHcmFwaFFMTW9kZWxlciA9IHJlcXVpcmUoJy4uL21vZGVsZXIvR3JhcGhRTCcpO1xuICAgICAgICBsZXQgZ3JhcGhRTE1vZGVsZXIgPSBuZXcgR3JhcGhRTE1vZGVsZXIoY29udGV4dCwgbGlua2VyLCBjb25uZWN0b3IpO1xuXG4gICAgICAgIHJldHVybiBncmFwaFFMTW9kZWxlci5tb2RlbGluZ18ocmVmaW5lZFNjaGVtYSk7XG4gICAgfSk7ICAgICAgICAgICAgXG59O1xuIl19