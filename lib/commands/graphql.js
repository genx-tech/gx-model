"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getSchemaConnectors
} = require('../utils/helpers');

const Linker = require('../lang/Linker');

module.exports = async (app, context) => {
  app.log('verbose', 'geml graphql');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let linker = new Linker(app, context);
  context.linker = linker;
  let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));
  let schemaToConnector = getSchemaConnectors(app, context.schemas);
  return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {
    app.log('verbose', `Processing schema "${schemaName}" ...`);
    let schema = linker.schemas[schemaName];

    if (!schema) {
      throw new Error(`Schema "${schemaName}" not found in model source."`);
    }

    let connector = schemaToConnector[schemaName];
    const skipGeneration = true;

    let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

    let dbModeler = new DbModeler(context, connector, deploymentSetting.extraOptions);
    let refinedSchema = dbModeler.modeling(schema, schemaToConnector, skipGeneration);

    const GraphQLModeler = require('../modeler/GraphQL');

    let graphQLModeler = new GraphQLModeler(context, connector);
    return graphQLModeler.modeling_(refinedSchema);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9ncmFwaHFsLmpzIl0sIm5hbWVzIjpbIl8iLCJlYWNoQXN5bmNfIiwicmVxdWlyZSIsInRocm93SWZGaWxlTm90RXhpc3QiLCJnZXRTY2hlbWFDb25uZWN0b3JzIiwiTGlua2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImNvbnRleHQiLCJsb2ciLCJnZW1sUGF0aCIsImxpbmtlciIsInNjaGVtYUZpbGVzIiwiZ2V0R2VtbEZpbGVzIiwidXNlSnNvblNvdXJjZSIsImZvckVhY2giLCJzY2hlbWFGaWxlIiwibGluayIsInNjaGVtYVRvQ29ubmVjdG9yIiwic2NoZW1hcyIsImRlcGxveW1lbnRTZXR0aW5nIiwic2NoZW1hTmFtZSIsInNjaGVtYSIsIkVycm9yIiwiY29ubmVjdG9yIiwic2tpcEdlbmVyYXRpb24iLCJEYk1vZGVsZXIiLCJkcml2ZXIiLCJkYk1vZGVsZXIiLCJleHRyYU9wdGlvbnMiLCJyZWZpbmVkU2NoZW1hIiwibW9kZWxpbmciLCJHcmFwaFFMTW9kZWxlciIsImdyYXBoUUxNb2RlbGVyIiwibW9kZWxpbmdfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBO0FBQXZCLElBQStDRixPQUFPLENBQUMsa0JBQUQsQ0FBNUQ7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBZUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsY0FBbkI7QUFFQVAsRUFBQUEsbUJBQW1CLENBQUMsVUFBRCxFQUFhTSxPQUFPLENBQUNFLFFBQXJCLENBQW5CO0FBRUEsTUFBSUMsTUFBTSxHQUFHLElBQUlQLE1BQUosQ0FBV0csR0FBWCxFQUFnQkMsT0FBaEIsQ0FBYjtBQUNBQSxFQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJBLE1BQWpCO0FBRUEsTUFBSUMsV0FBVyxHQUFHUixNQUFNLENBQUNTLFlBQVAsQ0FBb0JMLE9BQU8sQ0FBQ0UsUUFBNUIsRUFBc0NGLE9BQU8sQ0FBQ00sYUFBOUMsQ0FBbEI7QUFDQUYsRUFBQUEsV0FBVyxDQUFDRyxPQUFaLENBQW9CQyxVQUFVLElBQUlMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZRCxVQUFaLENBQWxDO0FBRUEsTUFBSUUsaUJBQWlCLEdBQUdmLG1CQUFtQixDQUFDSSxHQUFELEVBQU1DLE9BQU8sQ0FBQ1csT0FBZCxDQUEzQztBQUVBLFNBQU9uQixVQUFVLENBQUNRLE9BQU8sQ0FBQ1csT0FBVCxFQUFrQixPQUFPQyxpQkFBUCxFQUEwQkMsVUFBMUIsS0FBeUM7QUFDeEVkLElBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBb0Isc0JBQXFCWSxVQUFXLE9BQXBEO0FBRUEsUUFBSUMsTUFBTSxHQUFHWCxNQUFNLENBQUNRLE9BQVAsQ0FBZUUsVUFBZixDQUFiOztBQUVBLFFBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1QsWUFBTSxJQUFJQyxLQUFKLENBQVcsV0FBVUYsVUFBVywrQkFBaEMsQ0FBTjtBQUNIOztBQUVELFFBQUlHLFNBQVMsR0FBR04saUJBQWlCLENBQUNHLFVBQUQsQ0FBakM7QUFFQSxVQUFNSSxjQUFjLEdBQUcsSUFBdkI7O0FBRUEsUUFBSUMsU0FBUyxHQUFHekIsT0FBTyxDQUFFLHVCQUFzQnVCLFNBQVMsQ0FBQ0csTUFBTyxVQUF6QyxDQUF2Qjs7QUFDQSxRQUFJQyxTQUFTLEdBQUcsSUFBSUYsU0FBSixDQUFjbEIsT0FBZCxFQUF1QmdCLFNBQXZCLEVBQWtDSixpQkFBaUIsQ0FBQ1MsWUFBcEQsQ0FBaEI7QUFDQSxRQUFJQyxhQUFhLEdBQUdGLFNBQVMsQ0FBQ0csUUFBVixDQUFtQlQsTUFBbkIsRUFBMkJKLGlCQUEzQixFQUE4Q08sY0FBOUMsQ0FBcEI7O0FBRUEsVUFBTU8sY0FBYyxHQUFHL0IsT0FBTyxDQUFDLG9CQUFELENBQTlCOztBQUNBLFFBQUlnQyxjQUFjLEdBQUcsSUFBSUQsY0FBSixDQUFtQnhCLE9BQW5CLEVBQTRCZ0IsU0FBNUIsQ0FBckI7QUFFQSxXQUFPUyxjQUFjLENBQUNDLFNBQWYsQ0FBeUJKLGFBQXpCLENBQVA7QUFDSCxHQXJCZ0IsQ0FBakI7QUFzQkgsQ0FuQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8sIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRocm93SWZGaWxlTm90RXhpc3QsIGdldFNjaGVtYUNvbm5lY3RvcnMgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2hlbHBlcnMnKTtcbmNvbnN0IExpbmtlciA9IHJlcXVpcmUoJy4uL2xhbmcvTGlua2VyJyk7XG5cbi8qKlxuICogQnVpbGQgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscyBmcm9tIG9vbG9uZyBmaWxlcy5cbiAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LmdlbWxQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tb2RlbFBhdGggICAgICAgICBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LnNjcmlwdFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1hbmlmZXN0UGF0aFxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnVzZUpzb25Tb3VyY2VcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC5zYXZlSW50ZXJtZWRpYXRlXG4gKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5zY2hlbWFzICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBjb250ZXh0KSA9PiB7XG4gICAgYXBwLmxvZygndmVyYm9zZScsICdnZW1sIGdyYXBocWwnKTtcblxuICAgIHRocm93SWZGaWxlTm90RXhpc3QoXCJnZW1sUGF0aFwiLCBjb250ZXh0LmdlbWxQYXRoKTtcblxuICAgIGxldCBsaW5rZXIgPSBuZXcgTGlua2VyKGFwcCwgY29udGV4dCk7XG4gICAgY29udGV4dC5saW5rZXIgPSBsaW5rZXI7ICAgIFxuXG4gICAgbGV0IHNjaGVtYUZpbGVzID0gTGlua2VyLmdldEdlbWxGaWxlcyhjb250ZXh0LmdlbWxQYXRoLCBjb250ZXh0LnVzZUpzb25Tb3VyY2UpO1xuICAgIHNjaGVtYUZpbGVzLmZvckVhY2goc2NoZW1hRmlsZSA9PiBsaW5rZXIubGluayhzY2hlbWFGaWxlKSk7ICBcblxuICAgIGxldCBzY2hlbWFUb0Nvbm5lY3RvciA9IGdldFNjaGVtYUNvbm5lY3RvcnMoYXBwLCBjb250ZXh0LnNjaGVtYXMpO1xuXG4gICAgcmV0dXJuIGVhY2hBc3luY18oY29udGV4dC5zY2hlbWFzLCBhc3luYyAoZGVwbG95bWVudFNldHRpbmcsIHNjaGVtYU5hbWUpID0+IHsgICAgICBcbiAgICAgICAgYXBwLmxvZygndmVyYm9zZScsIGBQcm9jZXNzaW5nIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIiAuLi5gKTsgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBzY2hlbWEgPSBsaW5rZXIuc2NoZW1hc1tzY2hlbWFOYW1lXTtcblxuICAgICAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTY2hlbWEgXCIke3NjaGVtYU5hbWV9XCIgbm90IGZvdW5kIGluIG1vZGVsIHNvdXJjZS5cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbm5lY3RvciA9IHNjaGVtYVRvQ29ubmVjdG9yW3NjaGVtYU5hbWVdO1xuXG4gICAgICAgIGNvbnN0IHNraXBHZW5lcmF0aW9uID0gdHJ1ZTtcblxuICAgICAgICBsZXQgRGJNb2RlbGVyID0gcmVxdWlyZShgLi4vbW9kZWxlci9kYXRhYmFzZS8ke2Nvbm5lY3Rvci5kcml2ZXJ9L01vZGVsZXJgKTtcbiAgICAgICAgbGV0IGRiTW9kZWxlciA9IG5ldyBEYk1vZGVsZXIoY29udGV4dCwgY29ubmVjdG9yLCBkZXBsb3ltZW50U2V0dGluZy5leHRyYU9wdGlvbnMpO1xuICAgICAgICBsZXQgcmVmaW5lZFNjaGVtYSA9IGRiTW9kZWxlci5tb2RlbGluZyhzY2hlbWEsIHNjaGVtYVRvQ29ubmVjdG9yLCBza2lwR2VuZXJhdGlvbik7XG5cbiAgICAgICAgY29uc3QgR3JhcGhRTE1vZGVsZXIgPSByZXF1aXJlKCcuLi9tb2RlbGVyL0dyYXBoUUwnKTtcbiAgICAgICAgbGV0IGdyYXBoUUxNb2RlbGVyID0gbmV3IEdyYXBoUUxNb2RlbGVyKGNvbnRleHQsIGNvbm5lY3Rvcik7XG5cbiAgICAgICAgcmV0dXJuIGdyYXBoUUxNb2RlbGVyLm1vZGVsaW5nXyhyZWZpbmVkU2NoZW1hKTtcbiAgICB9KTsgICAgICAgICAgICBcbn07XG4iXX0=