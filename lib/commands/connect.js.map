{"version":3,"sources":["../../src/commands/connect.js"],"names":["_","eachAsync_","get","set","require","fs","npmInstall_","dependencies","module","exports","app","context","log","name","schemaName","option","dataSourceType","dataSourceName","connection","config","readJson","configFullPath","dsConfig","Error","logStatement","writeJson","spaces","workingPath"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,CAAF;AAAKC,EAAAA,UAAL;AAAiBC,EAAAA,GAAjB;AAAsBC,EAAAA;AAAtB,IAA8BC,OAAO,CAAC,YAAD,CAA3C;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAASD,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,sBAAD,CAA3B;;AAEA,MAAMG,YAAY,GAAG;AACjB,WAAS,CAAE,QAAF,CADQ;AAEjB,aAAW,CAAE,SAAF,CAFM;AAGjB,cAAY,CAAE,SAAF;AAHK,CAArB;;AAmBAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AACrCD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,GAAEF,GAAG,CAACG,IAAK,UAA/B;AAEA,QAAMC,UAAU,GAAGJ,GAAG,CAACK,MAAJ,CAAW,QAAX,CAAnB;AACA,QAAMC,cAAc,GAAGN,GAAG,CAACK,MAAJ,CAAW,MAAX,CAAvB;AACA,QAAME,cAAc,GAAGP,GAAG,CAACK,MAAJ,CAAW,IAAX,CAAvB;AACA,QAAMG,UAAU,GAAGR,GAAG,CAACK,MAAJ,CAAW,MAAX,CAAnB;AAEA,QAAMI,MAAM,GAAG,MAAMd,EAAE,CAACe,QAAH,CAAYT,OAAO,CAACU,cAApB,CAArB;AACA,QAAMC,QAAQ,GAAGpB,GAAG,CAACiB,MAAD,EAAS,CAAC,YAAD,EAAeH,cAAf,EAA+BC,cAA/B,CAAT,CAApB;;AACA,MAAIK,QAAQ,IAAI,IAAhB,EAAsB;AAClB,UAAM,IAAIC,KAAJ,CAAW,gBAAeP,cAAe,IAAGC,cAAe,mBAA3D,CAAN;AACH;;AAEDd,EAAAA,GAAG,CAACgB,MAAD,EAAS,CAAC,YAAD,EAAeH,cAAf,EAA+BC,cAA/B,CAAT,EAAyD;AACxDC,IAAAA,UADwD;AAExDM,IAAAA,YAAY,EAAE;AAF0C,GAAzD,CAAH;AAKArB,EAAAA,GAAG,CAACgB,MAAD,EAAS,CAAC,UAAD,EAAa,MAAb,EAAqB,SAArB,EAAgCL,UAAhC,EAA4C,YAA5C,CAAT,EAAqE,GAAEE,cAAe,IAAGC,cAAe,EAAxG,CAAH;AACA,QAAMZ,EAAE,CAACoB,SAAH,CAAad,OAAO,CAACU,cAArB,EAAqCF,MAArC,EAA6C;AAAEO,IAAAA,MAAM,EAAE;AAAV,GAA7C,CAAN;AACAhB,EAAAA,GAAG,CAACE,GAAJ,CAAQ,MAAR,EAAiB,2BAA0BE,UAAW,mBAAkBH,OAAO,CAACU,cAAe,EAA/F;AAEA,QAAMf,WAAW,CAACI,GAAD,EAAMA,GAAG,CAACiB,WAAV,EAAuBpB,YAAY,CAACS,cAAD,CAAnC,CAAjB;AACH,CAxBD","sourcesContent":["const { _, eachAsync_, get, set } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst npmInstall_ = require('../utils/npmInstall_');\n\nconst dependencies = {\n    \"mysql\": [ \"mysql2\" ],\n    \"mongodb\": [ \"mongodb\" ],\n    \"rabbitmq\": [ \"amqplib\" ],\n};\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} connect`);\n\n    const schemaName = app.option('schema');\n    const dataSourceType = app.option('dbms');\n    const dataSourceName = app.option('ds');\n    const connection = app.option('conn');  \n    \n    const config = await fs.readJson(context.configFullPath);\n    const dsConfig = get(config, ['dataSource', dataSourceType, dataSourceName]);\n    if (dsConfig != null) {\n        throw new Error(`Data source \"${dataSourceType}.${dataSourceName}\" already exists.`);\n    }\n\n    set(config, ['dataSource', dataSourceType, dataSourceName], {\n        connection,\n        logStatement: true\n    });    \n\n    set(config, ['settings', 'geml', 'schemas', schemaName, \"dataSource\"], `${dataSourceType}.${dataSourceName}`);\n    await fs.writeJson(context.configFullPath, config, { spaces: 4 });\n    app.log('info', `Data source for schema \"${schemaName}\" is added into ${context.configFullPath}`);\n\n    await npmInstall_(app, app.workingPath, dependencies[dataSourceType]);\n};\n"],"file":"connect.js"}