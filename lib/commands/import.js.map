{"version":3,"sources":["../../src/commands/import.js"],"names":["throwIfFileNotExist","importDataFiles","require","module","exports","app","context","log","name","modelPath","scriptPath","schemaName","option","dataset","ignoreDuplicate","schemaConfig","schemas","Error","db","Migrator","driver","migrator"],"mappings":";;;;AAAA,MAAM;AAAEA,EAAAA,mBAAF;AAAuBC,EAAAA;AAAvB,IAA2CC,OAAO,CAAC,kBAAD,CAAxD;;AAeAC,MAAM,CAACC,OAAP,GAAiB,OAAOC,GAAP,EAAYC,OAAZ,KAAwB;AACrCD,EAAAA,GAAG,CAACE,GAAJ,CAAQ,SAAR,EAAoB,GAAEF,GAAG,CAACG,IAAK,SAA/B;AAEAR,EAAAA,mBAAmB,CAAC,WAAD,EAAcM,OAAO,CAACG,SAAtB,CAAnB;AACAT,EAAAA,mBAAmB,CAAC,YAAD,EAAeM,OAAO,CAACI,UAAvB,CAAnB;AAEA,MAAIC,UAAU,GAAGN,GAAG,CAACO,MAAJ,CAAW,QAAX,CAAjB;AACA,MAAIC,OAAO,GAAGR,GAAG,CAACO,MAAJ,CAAW,SAAX,CAAd;AACA,MAAIE,eAAe,GAAGT,GAAG,CAACO,MAAJ,CAAW,QAAX,CAAtB;AAEA,MAAIG,YAAY,GAAGT,OAAO,CAACU,OAAR,CAAgBL,UAAhB,CAAnB;;AACA,MAAI,CAACI,YAAL,EAAmB;AACf,UAAM,IAAIE,KAAJ,CAAW,WAAUN,UAAW,6BAAhC,CAAN;AACH;;AAED,QAAMO,EAAE,GAAGb,GAAG,CAACa,EAAJ,CAAOP,UAAP,CAAX;;AAEA,QAAMQ,QAAQ,GAAGjB,OAAO,CAAE,gBAAegB,EAAE,CAACE,MAAO,EAA3B,CAAxB;;AACA,QAAMC,QAAQ,GAAG,IAAIF,QAAJ,CAAad,GAAb,EAAkBC,OAAlB,EAA2BY,EAA3B,CAAjB;AAEA,QAAMjB,eAAe,CAACoB,QAAD,EAAWR,OAAX,EAAoBC,eAApB,CAArB;AACH,CArBD","sourcesContent":["const { throwIfFileNotExist, importDataFiles } = require('../utils/helpers');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} import`);\n\n    throwIfFileNotExist(\"modelPath\", context.modelPath);\n    throwIfFileNotExist(\"scriptPath\", context.scriptPath);\n\n    let schemaName = app.option('schema');\n    let dataset = app.option('dataset');\n    let ignoreDuplicate = app.option('ignore');\n\n    let schemaConfig = context.schemas[schemaName];\n    if (!schemaConfig) {\n        throw new Error(`Schema \"${schemaName}\" not found in geml config.`);\n    }\n\n    const db = app.db(schemaName);        \n    \n    const Migrator = require(`../migration/${db.driver}`);\n    const migrator = new Migrator(app, context, db);\n\n    await importDataFiles(migrator, dataset, ignoreDuplicate);  \n};\n"],"file":"import.js"}