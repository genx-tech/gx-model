{"version":3,"sources":["../../src/commands/init.js"],"names":["path","require","_","eachAsync_","fs","throwIfFileNotExist","getSchemaConnectors","copyFileFromTemplate_","module","exports","app","context","log","name","moduleName","commandLine","option","schemaName","workingPath","configName","join","configFile","config","readJson","settings","geml","Error","gemlPath","modelPath","scriptPath","manifestPath","writeJson","spaces","ensureDir","schemaSource","resolve","__dirname","entitySource","schemaFile","entityFile","copyFile"],"mappings":"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","sourcesContent":["const path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\nconst { throwIfFileNotExist, getSchemaConnectors } = require('../utils/helpers');\nconst copyFileFromTemplate_ = require('../utils/copyFileFromTemplate_');\n\n/**\n * Build database scripts and entity models from oolong files.\n * @param {ServiceContainer} app\n * @param {object} context \n * @property {string} context.gemlPath\n * @property {string} context.modelPath         \n * @property {string} context.scriptPath\n * @property {string} context.manifestPath\n * @property {bool} context.useJsonSource\n * @property {bool} context.saveIntermediate\n * @property {object} context.schemas   \n * @returns {Promise}\n */\nmodule.exports = async (app, context) => {\n    app.log('verbose', `${app.name} init`);\n\n    const moduleName = app.commandLine.option('module');\n    const schemaName = app.commandLine.option('schema');\n\n    let workingPath = app.workingPath;\n    let configName;\n\n    if (moduleName) {\n        workingPath = path.join(workingPath, 'app_modules', moduleName);\n        configName = 'app';\n    } else {\n        configName = 'server';\n    }\n\n    const configFile = path.join(workingPath, 'conf', `${configName}.default.json`);\n    throwIfFileNotExist('config', configFile);\n\n    const config = await fs.readJson(configFile);\n    if (config.settings?.geml) {\n        throw new Error(`\"geml\" setting has already exist in ${configFile}`);\n    }\n\n    config.settings = {\n        ...config.settings,\n        geml: {\n            gemlPath: \"geml\",\n            modelPath: \"src/models\",\n            scriptPath: \"src/scripts\",\n            manifestPath: \"manifests\"\n        }\n    };\n\n    await fs.writeJson(configFile, config, { spaces: 4 });\n    app.log('info', `\"geml\" setting is added into ${configFile}`);\n\n    const gemlPath = path.join(workingPath, 'geml', 'entities');\n    await fs.ensureDir(gemlPath);\n\n    const schemaSource = path.resolve(__dirname, 'init/sample.geml');\n    const entitySource = path.resolve(__dirname, 'init/test.geml');\n\n    const schemaFile = path.join(workingPath, 'geml', `${schemaName}.geml`);\n    const entityFile = path.join(workingPath, 'geml', 'entities', 'test.geml');\n\n    await copyFileFromTemplate_(schemaSource, schemaFile, { schemaName });\n    app.log('info', `Created ${schemaFile}`);\n\n    await fs.copyFile(entitySource, entityFile);\n    app.log('info', `Created ${entityFile}`);\n};\n"],"file":"init.js"}