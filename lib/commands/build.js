"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getSchemaConnectors
} = require('../utils/helpers');

const Linker = require('../lang/Linker');

module.exports = async (app, context) => {
  app.log('verbose', 'geml build');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let linker = new Linker(app, context);
  context.linker = linker;
  let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));
  let schemaToConnector = getSchemaConnectors(app, context.schemas);
  return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {
    app.log('verbose', `Processing schema "${schemaName}" ...`);
    let schema = linker.schemas[schemaName];

    if (!schema) {
      throw new Error(`Schema "${schemaName}" not found in model source."`);
    }

    let connector = schemaToConnector[schemaName];

    let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

    let dbModeler = new DbModeler(context, connector, deploymentSetting.extraOptions);
    let refinedSchema = dbModeler.modeling(schema, schemaToConnector);

    const DaoModeler = require('../modeler/Dao');

    let daoModeler = new DaoModeler(context, connector);
    return daoModeler.modeling_(refinedSchema);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJfIiwiZWFjaEFzeW5jXyIsInJlcXVpcmUiLCJ0aHJvd0lmRmlsZU5vdEV4aXN0IiwiZ2V0U2NoZW1hQ29ubmVjdG9ycyIsIkxpbmtlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJjb250ZXh0IiwibG9nIiwiZ2VtbFBhdGgiLCJsaW5rZXIiLCJzY2hlbWFGaWxlcyIsImdldEdlbWxGaWxlcyIsInVzZUpzb25Tb3VyY2UiLCJmb3JFYWNoIiwic2NoZW1hRmlsZSIsImxpbmsiLCJzY2hlbWFUb0Nvbm5lY3RvciIsInNjaGVtYXMiLCJkZXBsb3ltZW50U2V0dGluZyIsInNjaGVtYU5hbWUiLCJzY2hlbWEiLCJFcnJvciIsImNvbm5lY3RvciIsIkRiTW9kZWxlciIsImRyaXZlciIsImRiTW9kZWxlciIsImV4dHJhT3B0aW9ucyIsInJlZmluZWRTY2hlbWEiLCJtb2RlbGluZyIsIkRhb01vZGVsZXIiLCJkYW9Nb2RlbGVyIiwibW9kZWxpbmdfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBO0FBQXZCLElBQStDRixPQUFPLENBQUMsa0JBQUQsQ0FBNUQ7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBZUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsWUFBbkI7QUFFQVAsRUFBQUEsbUJBQW1CLENBQUMsVUFBRCxFQUFhTSxPQUFPLENBQUNFLFFBQXJCLENBQW5CO0FBRUEsTUFBSUMsTUFBTSxHQUFHLElBQUlQLE1BQUosQ0FBV0csR0FBWCxFQUFnQkMsT0FBaEIsQ0FBYjtBQUNBQSxFQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJBLE1BQWpCO0FBRUEsTUFBSUMsV0FBVyxHQUFHUixNQUFNLENBQUNTLFlBQVAsQ0FBb0JMLE9BQU8sQ0FBQ0UsUUFBNUIsRUFBc0NGLE9BQU8sQ0FBQ00sYUFBOUMsQ0FBbEI7QUFDQUYsRUFBQUEsV0FBVyxDQUFDRyxPQUFaLENBQW9CQyxVQUFVLElBQUlMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZRCxVQUFaLENBQWxDO0FBRUEsTUFBSUUsaUJBQWlCLEdBQUdmLG1CQUFtQixDQUFDSSxHQUFELEVBQU1DLE9BQU8sQ0FBQ1csT0FBZCxDQUEzQztBQUVBLFNBQU9uQixVQUFVLENBQUNRLE9BQU8sQ0FBQ1csT0FBVCxFQUFrQixPQUFPQyxpQkFBUCxFQUEwQkMsVUFBMUIsS0FBeUM7QUFDeEVkLElBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBb0Isc0JBQXFCWSxVQUFXLE9BQXBEO0FBRUEsUUFBSUMsTUFBTSxHQUFHWCxNQUFNLENBQUNRLE9BQVAsQ0FBZUUsVUFBZixDQUFiOztBQUVBLFFBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1QsWUFBTSxJQUFJQyxLQUFKLENBQVcsV0FBVUYsVUFBVywrQkFBaEMsQ0FBTjtBQUNIOztBQUVELFFBQUlHLFNBQVMsR0FBR04saUJBQWlCLENBQUNHLFVBQUQsQ0FBakM7O0FBRUEsUUFBSUksU0FBUyxHQUFHeEIsT0FBTyxDQUFFLHVCQUFzQnVCLFNBQVMsQ0FBQ0UsTUFBTyxVQUF6QyxDQUF2Qjs7QUFDQSxRQUFJQyxTQUFTLEdBQUcsSUFBSUYsU0FBSixDQUFjakIsT0FBZCxFQUF1QmdCLFNBQXZCLEVBQWtDSixpQkFBaUIsQ0FBQ1EsWUFBcEQsQ0FBaEI7QUFDQSxRQUFJQyxhQUFhLEdBQUdGLFNBQVMsQ0FBQ0csUUFBVixDQUFtQlIsTUFBbkIsRUFBMkJKLGlCQUEzQixDQUFwQjs7QUFFQSxVQUFNYSxVQUFVLEdBQUc5QixPQUFPLENBQUMsZ0JBQUQsQ0FBMUI7O0FBQ0EsUUFBSStCLFVBQVUsR0FBRyxJQUFJRCxVQUFKLENBQWV2QixPQUFmLEVBQXdCZ0IsU0FBeEIsQ0FBakI7QUFFQSxXQUFPUSxVQUFVLENBQUNDLFNBQVgsQ0FBcUJKLGFBQXJCLENBQVA7QUFDSCxHQW5CZ0IsQ0FBakI7QUFvQkgsQ0FqQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IF8sIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRocm93SWZGaWxlTm90RXhpc3QsIGdldFNjaGVtYUNvbm5lY3RvcnMgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2hlbHBlcnMnKTtcbmNvbnN0IExpbmtlciA9IHJlcXVpcmUoJy4uL2xhbmcvTGlua2VyJyk7XG5cbi8qKlxuICogQnVpbGQgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscyBmcm9tIG9vbG9uZyBmaWxlcy5cbiAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LmdlbWxQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tb2RlbFBhdGggICAgICAgICBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LnNjcmlwdFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1hbmlmZXN0UGF0aFxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnVzZUpzb25Tb3VyY2VcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC5zYXZlSW50ZXJtZWRpYXRlXG4gKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5zY2hlbWFzICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBjb250ZXh0KSA9PiB7XG4gICAgYXBwLmxvZygndmVyYm9zZScsICdnZW1sIGJ1aWxkJyk7XG5cbiAgICB0aHJvd0lmRmlsZU5vdEV4aXN0KFwiZ2VtbFBhdGhcIiwgY29udGV4dC5nZW1sUGF0aCk7XG5cbiAgICBsZXQgbGlua2VyID0gbmV3IExpbmtlcihhcHAsIGNvbnRleHQpO1xuICAgIGNvbnRleHQubGlua2VyID0gbGlua2VyOyAgICBcblxuICAgIGxldCBzY2hlbWFGaWxlcyA9IExpbmtlci5nZXRHZW1sRmlsZXMoY29udGV4dC5nZW1sUGF0aCwgY29udGV4dC51c2VKc29uU291cmNlKTtcbiAgICBzY2hlbWFGaWxlcy5mb3JFYWNoKHNjaGVtYUZpbGUgPT4gbGlua2VyLmxpbmsoc2NoZW1hRmlsZSkpOyAgXG5cbiAgICBsZXQgc2NoZW1hVG9Db25uZWN0b3IgPSBnZXRTY2hlbWFDb25uZWN0b3JzKGFwcCwgY29udGV4dC5zY2hlbWFzKTtcblxuICAgIHJldHVybiBlYWNoQXN5bmNfKGNvbnRleHQuc2NoZW1hcywgYXN5bmMgKGRlcGxveW1lbnRTZXR0aW5nLCBzY2hlbWFOYW1lKSA9PiB7ICAgICAgXG4gICAgICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCBgUHJvY2Vzc2luZyBzY2hlbWEgXCIke3NjaGVtYU5hbWV9XCIgLi4uYCk7ICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgc2NoZW1hID0gbGlua2VyLnNjaGVtYXNbc2NoZW1hTmFtZV07XG5cbiAgICAgICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2NoZW1hIFwiJHtzY2hlbWFOYW1lfVwiIG5vdCBmb3VuZCBpbiBtb2RlbCBzb3VyY2UuXCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb25uZWN0b3IgPSBzY2hlbWFUb0Nvbm5lY3RvcltzY2hlbWFOYW1lXTtcblxuICAgICAgICBsZXQgRGJNb2RlbGVyID0gcmVxdWlyZShgLi4vbW9kZWxlci9kYXRhYmFzZS8ke2Nvbm5lY3Rvci5kcml2ZXJ9L01vZGVsZXJgKTtcbiAgICAgICAgbGV0IGRiTW9kZWxlciA9IG5ldyBEYk1vZGVsZXIoY29udGV4dCwgY29ubmVjdG9yLCBkZXBsb3ltZW50U2V0dGluZy5leHRyYU9wdGlvbnMpO1xuICAgICAgICBsZXQgcmVmaW5lZFNjaGVtYSA9IGRiTW9kZWxlci5tb2RlbGluZyhzY2hlbWEsIHNjaGVtYVRvQ29ubmVjdG9yKTtcblxuICAgICAgICBjb25zdCBEYW9Nb2RlbGVyID0gcmVxdWlyZSgnLi4vbW9kZWxlci9EYW8nKTtcbiAgICAgICAgbGV0IGRhb01vZGVsZXIgPSBuZXcgRGFvTW9kZWxlcihjb250ZXh0LCBjb25uZWN0b3IpO1xuXG4gICAgICAgIHJldHVybiBkYW9Nb2RlbGVyLm1vZGVsaW5nXyhyZWZpbmVkU2NoZW1hKTtcbiAgICB9KTsgICAgICAgICAgICBcbn07XG4iXX0=