"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const Linker = require('../lang/Linker');

module.exports = async (core, context) => {
  core.log('verbose', 'geml build');
  let linker = new Linker(core, context);
  context.linker = linker;
  let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));

  let schemaToConnector = _.mapValues(context.schemas, schemaConfig => {
    let connector = core.getService(schemaConfig.dataSource);

    if (!connector) {
      throw new Error(`Connector service not found for data source [${schemaConfig.dataSource}].`);
    }

    return connector;
  });

  return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {
    core.log('verbose', `Processing schema "${schemaName}" ...`);
    let schema = linker.schemas[schemaName];

    if (!schema) {
      throw new Error(`Schema "${schemaName}" not found in model source."`);
    }

    let connector = schemaToConnector[schemaName];

    let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

    let dbModeler = new DbModeler(context, connector, deploymentSetting.extraOptions);
    let refinedSchema = dbModeler.modeling(schema, schemaToConnector);

    const DaoModeler = require('../modeler/Dao');

    let daoModeler = new DaoModeler(context, connector);
    return daoModeler.modeling_(refinedSchema);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJfIiwiZWFjaEFzeW5jXyIsInJlcXVpcmUiLCJMaW5rZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiY29yZSIsImNvbnRleHQiLCJsb2ciLCJsaW5rZXIiLCJzY2hlbWFGaWxlcyIsImdldEdlbWxGaWxlcyIsImdlbWxQYXRoIiwidXNlSnNvblNvdXJjZSIsImZvckVhY2giLCJzY2hlbWFGaWxlIiwibGluayIsInNjaGVtYVRvQ29ubmVjdG9yIiwibWFwVmFsdWVzIiwic2NoZW1hcyIsInNjaGVtYUNvbmZpZyIsImNvbm5lY3RvciIsImdldFNlcnZpY2UiLCJkYXRhU291cmNlIiwiRXJyb3IiLCJkZXBsb3ltZW50U2V0dGluZyIsInNjaGVtYU5hbWUiLCJzY2hlbWEiLCJEYk1vZGVsZXIiLCJkcml2ZXIiLCJkYk1vZGVsZXIiLCJleHRyYU9wdGlvbnMiLCJyZWZpbmVkU2NoZW1hIiwibW9kZWxpbmciLCJEYW9Nb2RlbGVyIiwiZGFvTW9kZWxlciIsIm1vZGVsaW5nXyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CQyxPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFFQSxNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBQyxnQkFBRCxDQUF0Qjs7QUFlQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLElBQVAsRUFBYUMsT0FBYixLQUF5QjtBQUN0Q0QsRUFBQUEsSUFBSSxDQUFDRSxHQUFMLENBQVMsU0FBVCxFQUFvQixZQUFwQjtBQUVBLE1BQUlDLE1BQU0sR0FBRyxJQUFJTixNQUFKLENBQVdHLElBQVgsRUFBaUJDLE9BQWpCLENBQWI7QUFDQUEsRUFBQUEsT0FBTyxDQUFDRSxNQUFSLEdBQWlCQSxNQUFqQjtBQUVBLE1BQUlDLFdBQVcsR0FBR1AsTUFBTSxDQUFDUSxZQUFQLENBQW9CSixPQUFPLENBQUNLLFFBQTVCLEVBQXNDTCxPQUFPLENBQUNNLGFBQTlDLENBQWxCO0FBQ0FILEVBQUFBLFdBQVcsQ0FBQ0ksT0FBWixDQUFvQkMsVUFBVSxJQUFJTixNQUFNLENBQUNPLElBQVAsQ0FBWUQsVUFBWixDQUFsQzs7QUFFQSxNQUFJRSxpQkFBaUIsR0FBR2pCLENBQUMsQ0FBQ2tCLFNBQUYsQ0FBWVgsT0FBTyxDQUFDWSxPQUFwQixFQUE2QkMsWUFBWSxJQUFJO0FBQ2pFLFFBQUlDLFNBQVMsR0FBR2YsSUFBSSxDQUFDZ0IsVUFBTCxDQUFnQkYsWUFBWSxDQUFDRyxVQUE3QixDQUFoQjs7QUFDQSxRQUFJLENBQUNGLFNBQUwsRUFBZ0I7QUFDWixZQUFNLElBQUlHLEtBQUosQ0FBVyxnREFBK0NKLFlBQVksQ0FBQ0csVUFBVyxJQUFsRixDQUFOO0FBQ0g7O0FBQ0QsV0FBT0YsU0FBUDtBQUNILEdBTnVCLENBQXhCOztBQVFBLFNBQU9wQixVQUFVLENBQUNNLE9BQU8sQ0FBQ1ksT0FBVCxFQUFrQixPQUFPTSxpQkFBUCxFQUEwQkMsVUFBMUIsS0FBeUM7QUFDeEVwQixJQUFBQSxJQUFJLENBQUNFLEdBQUwsQ0FBUyxTQUFULEVBQXFCLHNCQUFxQmtCLFVBQVcsT0FBckQ7QUFFQSxRQUFJQyxNQUFNLEdBQUdsQixNQUFNLENBQUNVLE9BQVAsQ0FBZU8sVUFBZixDQUFiOztBQUVBLFFBQUksQ0FBQ0MsTUFBTCxFQUFhO0FBQ1QsWUFBTSxJQUFJSCxLQUFKLENBQVcsV0FBVUUsVUFBVywrQkFBaEMsQ0FBTjtBQUNIOztBQUVELFFBQUlMLFNBQVMsR0FBR0osaUJBQWlCLENBQUNTLFVBQUQsQ0FBakM7O0FBRUEsUUFBSUUsU0FBUyxHQUFHMUIsT0FBTyxDQUFFLHVCQUFzQm1CLFNBQVMsQ0FBQ1EsTUFBTyxVQUF6QyxDQUF2Qjs7QUFDQSxRQUFJQyxTQUFTLEdBQUcsSUFBSUYsU0FBSixDQUFjckIsT0FBZCxFQUF1QmMsU0FBdkIsRUFBa0NJLGlCQUFpQixDQUFDTSxZQUFwRCxDQUFoQjtBQUNBLFFBQUlDLGFBQWEsR0FBR0YsU0FBUyxDQUFDRyxRQUFWLENBQW1CTixNQUFuQixFQUEyQlYsaUJBQTNCLENBQXBCOztBQUVBLFVBQU1pQixVQUFVLEdBQUdoQyxPQUFPLENBQUMsZ0JBQUQsQ0FBMUI7O0FBQ0EsUUFBSWlDLFVBQVUsR0FBRyxJQUFJRCxVQUFKLENBQWUzQixPQUFmLEVBQXdCYyxTQUF4QixDQUFqQjtBQUVBLFdBQU9jLFVBQVUsQ0FBQ0MsU0FBWCxDQUFxQkosYUFBckIsQ0FBUDtBQUNILEdBbkJnQixDQUFqQjtBQW9CSCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuY29uc3QgTGlua2VyID0gcmVxdWlyZSgnLi4vbGFuZy9MaW5rZXInKTtcblxuLyoqXG4gKiBCdWlsZCBkYXRhYmFzZSBzY3JpcHRzIGFuZCBlbnRpdHkgbW9kZWxzIGZyb20gb29sb25nIGZpbGVzLlxuICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBjb3JlXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LmdlbWxQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tb2RlbFBhdGggICAgICAgICBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LnNjcmlwdFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1hbmlmZXN0UGF0aFxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnVzZUpzb25Tb3VyY2VcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC5zYXZlSW50ZXJtZWRpYXRlXG4gKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5zY2hlbWFzICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoY29yZSwgY29udGV4dCkgPT4ge1xuICAgIGNvcmUubG9nKCd2ZXJib3NlJywgJ2dlbWwgYnVpbGQnKTtcblxuICAgIGxldCBsaW5rZXIgPSBuZXcgTGlua2VyKGNvcmUsIGNvbnRleHQpO1xuICAgIGNvbnRleHQubGlua2VyID0gbGlua2VyOyAgICBcblxuICAgIGxldCBzY2hlbWFGaWxlcyA9IExpbmtlci5nZXRHZW1sRmlsZXMoY29udGV4dC5nZW1sUGF0aCwgY29udGV4dC51c2VKc29uU291cmNlKTtcbiAgICBzY2hlbWFGaWxlcy5mb3JFYWNoKHNjaGVtYUZpbGUgPT4gbGlua2VyLmxpbmsoc2NoZW1hRmlsZSkpOyAgXG5cbiAgICBsZXQgc2NoZW1hVG9Db25uZWN0b3IgPSBfLm1hcFZhbHVlcyhjb250ZXh0LnNjaGVtYXMsIHNjaGVtYUNvbmZpZyA9PiB7XG4gICAgICAgIGxldCBjb25uZWN0b3IgPSBjb3JlLmdldFNlcnZpY2Uoc2NoZW1hQ29uZmlnLmRhdGFTb3VyY2UpO1xuICAgICAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb25uZWN0b3Igc2VydmljZSBub3QgZm91bmQgZm9yIGRhdGEgc291cmNlIFske3NjaGVtYUNvbmZpZy5kYXRhU291cmNlfV0uYCk7XG4gICAgICAgIH0gXG4gICAgICAgIHJldHVybiBjb25uZWN0b3I7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZWFjaEFzeW5jXyhjb250ZXh0LnNjaGVtYXMsIGFzeW5jIChkZXBsb3ltZW50U2V0dGluZywgc2NoZW1hTmFtZSkgPT4geyAgICAgIFxuICAgICAgICBjb3JlLmxvZygndmVyYm9zZScsIGBQcm9jZXNzaW5nIHNjaGVtYSBcIiR7c2NoZW1hTmFtZX1cIiAuLi5gKTsgICBcbiAgICAgICAgXG4gICAgICAgIGxldCBzY2hlbWEgPSBsaW5rZXIuc2NoZW1hc1tzY2hlbWFOYW1lXTtcblxuICAgICAgICBpZiAoIXNjaGVtYSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTY2hlbWEgXCIke3NjaGVtYU5hbWV9XCIgbm90IGZvdW5kIGluIG1vZGVsIHNvdXJjZS5cImApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNvbm5lY3RvciA9IHNjaGVtYVRvQ29ubmVjdG9yW3NjaGVtYU5hbWVdO1xuXG4gICAgICAgIGxldCBEYk1vZGVsZXIgPSByZXF1aXJlKGAuLi9tb2RlbGVyL2RhdGFiYXNlLyR7Y29ubmVjdG9yLmRyaXZlcn0vTW9kZWxlcmApO1xuICAgICAgICBsZXQgZGJNb2RlbGVyID0gbmV3IERiTW9kZWxlcihjb250ZXh0LCBjb25uZWN0b3IsIGRlcGxveW1lbnRTZXR0aW5nLmV4dHJhT3B0aW9ucyk7XG4gICAgICAgIGxldCByZWZpbmVkU2NoZW1hID0gZGJNb2RlbGVyLm1vZGVsaW5nKHNjaGVtYSwgc2NoZW1hVG9Db25uZWN0b3IpO1xuXG4gICAgICAgIGNvbnN0IERhb01vZGVsZXIgPSByZXF1aXJlKCcuLi9tb2RlbGVyL0RhbycpO1xuICAgICAgICBsZXQgZGFvTW9kZWxlciA9IG5ldyBEYW9Nb2RlbGVyKGNvbnRleHQsIGNvbm5lY3Rvcik7XG5cbiAgICAgICAgcmV0dXJuIGRhb01vZGVsZXIubW9kZWxpbmdfKHJlZmluZWRTY2hlbWEpO1xuICAgIH0pOyAgICAgICAgICAgIFxufTtcbiJdfQ==