"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getSchemaConnectors
} = require('../utils/helpers');

const Linker = require('../lang/Linker');

module.exports = async (app, context) => {
  app.log('verbose', 'geml build');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let linker = new Linker(app, context);
  let schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);
  schemaFiles.forEach(schemaFile => linker.link(schemaFile));
  let schemaToConnector = getSchemaConnectors(app, context.schemas);
  return eachAsync_(context.schemas, async (deploymentSetting, schemaName) => {
    app.log('verbose', `Processing schema "${schemaName}" ...`);
    let schema = linker.schemas[schemaName];

    if (!schema) {
      throw new Error(`Schema "${schemaName}" not found in model source."`);
    }

    let connector = schemaToConnector[schemaName];

    let DbModeler = require(`../modeler/database/${connector.driver}/Modeler`);

    let dbModeler = new DbModeler(context, linker, connector, deploymentSetting.extraOptions);
    let refinedSchema = dbModeler.modeling(schema, schemaToConnector);

    const DaoModeler = require('../modeler/Dao');

    let daoModeler = new DaoModeler(context, linker, connector);
    return daoModeler.modeling_(refinedSchema);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9idWlsZC5qcyJdLCJuYW1lcyI6WyJfIiwiZWFjaEFzeW5jXyIsInJlcXVpcmUiLCJ0aHJvd0lmRmlsZU5vdEV4aXN0IiwiZ2V0U2NoZW1hQ29ubmVjdG9ycyIsIkxpbmtlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJjb250ZXh0IiwibG9nIiwiZ2VtbFBhdGgiLCJsaW5rZXIiLCJzY2hlbWFGaWxlcyIsImdldEdlbWxGaWxlcyIsInVzZUpzb25Tb3VyY2UiLCJmb3JFYWNoIiwic2NoZW1hRmlsZSIsImxpbmsiLCJzY2hlbWFUb0Nvbm5lY3RvciIsInNjaGVtYXMiLCJkZXBsb3ltZW50U2V0dGluZyIsInNjaGVtYU5hbWUiLCJzY2hlbWEiLCJFcnJvciIsImNvbm5lY3RvciIsIkRiTW9kZWxlciIsImRyaXZlciIsImRiTW9kZWxlciIsImV4dHJhT3B0aW9ucyIsInJlZmluZWRTY2hlbWEiLCJtb2RlbGluZyIsIkRhb01vZGVsZXIiLCJkYW9Nb2RlbGVyIiwibW9kZWxpbmdfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTTtBQUFFQSxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsSUFBb0JDLE9BQU8sQ0FBQyxVQUFELENBQWpDOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBO0FBQXZCLElBQStDRixPQUFPLENBQUMsa0JBQUQsQ0FBNUQ7O0FBQ0EsTUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsZ0JBQUQsQ0FBdEI7O0FBZUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsWUFBbkI7QUFFQVAsRUFBQUEsbUJBQW1CLENBQUMsVUFBRCxFQUFhTSxPQUFPLENBQUNFLFFBQXJCLENBQW5CO0FBRUEsTUFBSUMsTUFBTSxHQUFHLElBQUlQLE1BQUosQ0FBV0csR0FBWCxFQUFnQkMsT0FBaEIsQ0FBYjtBQUVBLE1BQUlJLFdBQVcsR0FBR1IsTUFBTSxDQUFDUyxZQUFQLENBQW9CTCxPQUFPLENBQUNFLFFBQTVCLEVBQXNDRixPQUFPLENBQUNNLGFBQTlDLENBQWxCO0FBQ0FGLEVBQUFBLFdBQVcsQ0FBQ0csT0FBWixDQUFvQkMsVUFBVSxJQUFJTCxNQUFNLENBQUNNLElBQVAsQ0FBWUQsVUFBWixDQUFsQztBQUVBLE1BQUlFLGlCQUFpQixHQUFHZixtQkFBbUIsQ0FBQ0ksR0FBRCxFQUFNQyxPQUFPLENBQUNXLE9BQWQsQ0FBM0M7QUFFQSxTQUFPbkIsVUFBVSxDQUFDUSxPQUFPLENBQUNXLE9BQVQsRUFBa0IsT0FBT0MsaUJBQVAsRUFBMEJDLFVBQTFCLEtBQXlDO0FBQ3hFZCxJQUFBQSxHQUFHLENBQUNFLEdBQUosQ0FBUSxTQUFSLEVBQW9CLHNCQUFxQlksVUFBVyxPQUFwRDtBQUVBLFFBQUlDLE1BQU0sR0FBR1gsTUFBTSxDQUFDUSxPQUFQLENBQWVFLFVBQWYsQ0FBYjs7QUFFQSxRQUFJLENBQUNDLE1BQUwsRUFBYTtBQUNULFlBQU0sSUFBSUMsS0FBSixDQUFXLFdBQVVGLFVBQVcsK0JBQWhDLENBQU47QUFDSDs7QUFFRCxRQUFJRyxTQUFTLEdBQUdOLGlCQUFpQixDQUFDRyxVQUFELENBQWpDOztBQUVBLFFBQUlJLFNBQVMsR0FBR3hCLE9BQU8sQ0FBRSx1QkFBc0J1QixTQUFTLENBQUNFLE1BQU8sVUFBekMsQ0FBdkI7O0FBQ0EsUUFBSUMsU0FBUyxHQUFHLElBQUlGLFNBQUosQ0FBY2pCLE9BQWQsRUFBdUJHLE1BQXZCLEVBQStCYSxTQUEvQixFQUEwQ0osaUJBQWlCLENBQUNRLFlBQTVELENBQWhCO0FBQ0EsUUFBSUMsYUFBYSxHQUFHRixTQUFTLENBQUNHLFFBQVYsQ0FBbUJSLE1BQW5CLEVBQTJCSixpQkFBM0IsQ0FBcEI7O0FBRUEsVUFBTWEsVUFBVSxHQUFHOUIsT0FBTyxDQUFDLGdCQUFELENBQTFCOztBQUNBLFFBQUkrQixVQUFVLEdBQUcsSUFBSUQsVUFBSixDQUFldkIsT0FBZixFQUF3QkcsTUFBeEIsRUFBZ0NhLFNBQWhDLENBQWpCO0FBRUEsV0FBT1EsVUFBVSxDQUFDQyxTQUFYLENBQXFCSixhQUFyQixDQUFQO0FBQ0gsR0FuQmdCLENBQWpCO0FBb0JILENBaENEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBfLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0aHJvd0lmRmlsZU5vdEV4aXN0LCBnZXRTY2hlbWFDb25uZWN0b3JzIH0gPSByZXF1aXJlKCcuLi91dGlscy9oZWxwZXJzJyk7XG5jb25zdCBMaW5rZXIgPSByZXF1aXJlKCcuLi9sYW5nL0xpbmtlcicpO1xuXG4vKipcbiAqIEJ1aWxkIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMgZnJvbSBvb2xvbmcgZmlsZXMuXG4gKiBAcGFyYW0ge1NlcnZpY2VDb250YWluZXJ9IGFwcFxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5nZW1sUGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubW9kZWxQYXRoICAgICAgICAgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5zY3JpcHRQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tYW5pZmVzdFBhdGhcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC51c2VKc29uU291cmNlXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQuc2F2ZUludGVybWVkaWF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuc2NoZW1hcyAgIFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGFwcCwgY29udGV4dCkgPT4ge1xuICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCAnZ2VtbCBidWlsZCcpO1xuXG4gICAgdGhyb3dJZkZpbGVOb3RFeGlzdChcImdlbWxQYXRoXCIsIGNvbnRleHQuZ2VtbFBhdGgpO1xuXG4gICAgbGV0IGxpbmtlciA9IG5ldyBMaW5rZXIoYXBwLCBjb250ZXh0KTtcblxuICAgIGxldCBzY2hlbWFGaWxlcyA9IExpbmtlci5nZXRHZW1sRmlsZXMoY29udGV4dC5nZW1sUGF0aCwgY29udGV4dC51c2VKc29uU291cmNlKTtcbiAgICBzY2hlbWFGaWxlcy5mb3JFYWNoKHNjaGVtYUZpbGUgPT4gbGlua2VyLmxpbmsoc2NoZW1hRmlsZSkpOyAgXG5cbiAgICBsZXQgc2NoZW1hVG9Db25uZWN0b3IgPSBnZXRTY2hlbWFDb25uZWN0b3JzKGFwcCwgY29udGV4dC5zY2hlbWFzKTtcblxuICAgIHJldHVybiBlYWNoQXN5bmNfKGNvbnRleHQuc2NoZW1hcywgYXN5bmMgKGRlcGxveW1lbnRTZXR0aW5nLCBzY2hlbWFOYW1lKSA9PiB7ICAgICAgXG4gICAgICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCBgUHJvY2Vzc2luZyBzY2hlbWEgXCIke3NjaGVtYU5hbWV9XCIgLi4uYCk7ICAgXG4gICAgICAgIFxuICAgICAgICBsZXQgc2NoZW1hID0gbGlua2VyLnNjaGVtYXNbc2NoZW1hTmFtZV07XG5cbiAgICAgICAgaWYgKCFzY2hlbWEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2NoZW1hIFwiJHtzY2hlbWFOYW1lfVwiIG5vdCBmb3VuZCBpbiBtb2RlbCBzb3VyY2UuXCJgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb25uZWN0b3IgPSBzY2hlbWFUb0Nvbm5lY3RvcltzY2hlbWFOYW1lXTtcblxuICAgICAgICBsZXQgRGJNb2RlbGVyID0gcmVxdWlyZShgLi4vbW9kZWxlci9kYXRhYmFzZS8ke2Nvbm5lY3Rvci5kcml2ZXJ9L01vZGVsZXJgKTtcbiAgICAgICAgbGV0IGRiTW9kZWxlciA9IG5ldyBEYk1vZGVsZXIoY29udGV4dCwgbGlua2VyLCBjb25uZWN0b3IsIGRlcGxveW1lbnRTZXR0aW5nLmV4dHJhT3B0aW9ucyk7XG4gICAgICAgIGxldCByZWZpbmVkU2NoZW1hID0gZGJNb2RlbGVyLm1vZGVsaW5nKHNjaGVtYSwgc2NoZW1hVG9Db25uZWN0b3IpO1xuXG4gICAgICAgIGNvbnN0IERhb01vZGVsZXIgPSByZXF1aXJlKCcuLi9tb2RlbGVyL0RhbycpO1xuICAgICAgICBsZXQgZGFvTW9kZWxlciA9IG5ldyBEYW9Nb2RlbGVyKGNvbnRleHQsIGxpbmtlciwgY29ubmVjdG9yKTtcblxuICAgICAgICByZXR1cm4gZGFvTW9kZWxlci5tb2RlbGluZ18ocmVmaW5lZFNjaGVtYSk7XG4gICAgfSk7ICAgICAgICAgICAgXG59O1xuIl19