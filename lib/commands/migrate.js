"use strict";

require("source-map-support/register");

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getSchemaConnectors,
  importDataFiles
} = require('../utils/helpers');

module.exports = async (app, context) => {
  app.log('verbose', 'geml migrate');
  throwIfFileNotExist("modelPath", context.modelPath);
  throwIfFileNotExist("scriptPath", context.scriptPath);
  let reset = app.option('reset');

  if (reset) {
    await eachAsync_(Object.keys(context.schemas).reverse(), async schemaName => {
      const db = app.db(schemaName);

      const Migrator = require(`../migration/${db.driver}`);

      const migrator = new Migrator(app, context, db);
      await migrator.reset_();
    });
  }

  return eachAsync_(context.schemas, async (schemaConfig, schemaName) => {
    const db = app.db(schemaName);

    const Migrator = require(`../migration/${db.driver}`);

    const migrator = new Migrator(app, context, db);
    await migrator.create_(schemaConfig.extraOptions);
    await importDataFiles(migrator, '_init');
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9taWdyYXRlLmpzIl0sIm5hbWVzIjpbIl8iLCJlYWNoQXN5bmNfIiwicmVxdWlyZSIsInRocm93SWZGaWxlTm90RXhpc3QiLCJnZXRTY2hlbWFDb25uZWN0b3JzIiwiaW1wb3J0RGF0YUZpbGVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImNvbnRleHQiLCJsb2ciLCJtb2RlbFBhdGgiLCJzY3JpcHRQYXRoIiwicmVzZXQiLCJvcHRpb24iLCJPYmplY3QiLCJrZXlzIiwic2NoZW1hcyIsInJldmVyc2UiLCJzY2hlbWFOYW1lIiwiZGIiLCJNaWdyYXRvciIsImRyaXZlciIsIm1pZ3JhdG9yIiwicmVzZXRfIiwic2NoZW1hQ29uZmlnIiwiY3JlYXRlXyIsImV4dHJhT3B0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU07QUFBRUEsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQTtBQUFMLElBQW9CQyxPQUFPLENBQUMsVUFBRCxDQUFqQzs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQSxtQkFBdkI7QUFBNENDLEVBQUFBO0FBQTVDLElBQWdFSCxPQUFPLENBQUMsa0JBQUQsQ0FBN0U7O0FBZUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsY0FBbkI7QUFFQVAsRUFBQUEsbUJBQW1CLENBQUMsV0FBRCxFQUFjTSxPQUFPLENBQUNFLFNBQXRCLENBQW5CO0FBQ0FSLEVBQUFBLG1CQUFtQixDQUFDLFlBQUQsRUFBZU0sT0FBTyxDQUFDRyxVQUF2QixDQUFuQjtBQUVBLE1BQUlDLEtBQUssR0FBR0wsR0FBRyxDQUFDTSxNQUFKLENBQVcsT0FBWCxDQUFaOztBQUVBLE1BQUlELEtBQUosRUFBVztBQUNQLFVBQU1aLFVBQVUsQ0FBQ2MsTUFBTSxDQUFDQyxJQUFQLENBQVlQLE9BQU8sQ0FBQ1EsT0FBcEIsRUFBNkJDLE9BQTdCLEVBQUQsRUFBeUMsTUFBT0MsVUFBUCxJQUFzQjtBQUMzRSxZQUFNQyxFQUFFLEdBQUdaLEdBQUcsQ0FBQ1ksRUFBSixDQUFPRCxVQUFQLENBQVg7O0FBRUEsWUFBTUUsUUFBUSxHQUFHbkIsT0FBTyxDQUFFLGdCQUFla0IsRUFBRSxDQUFDRSxNQUFPLEVBQTNCLENBQXhCOztBQUNBLFlBQU1DLFFBQVEsR0FBRyxJQUFJRixRQUFKLENBQWFiLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCVyxFQUEzQixDQUFqQjtBQUVBLFlBQU1HLFFBQVEsQ0FBQ0MsTUFBVCxFQUFOO0FBQ0gsS0FQZSxDQUFoQjtBQVFIOztBQUVELFNBQU92QixVQUFVLENBQUNRLE9BQU8sQ0FBQ1EsT0FBVCxFQUFrQixPQUFPUSxZQUFQLEVBQXFCTixVQUFyQixLQUFvQztBQUNuRSxVQUFNQyxFQUFFLEdBQUdaLEdBQUcsQ0FBQ1ksRUFBSixDQUFPRCxVQUFQLENBQVg7O0FBRUEsVUFBTUUsUUFBUSxHQUFHbkIsT0FBTyxDQUFFLGdCQUFla0IsRUFBRSxDQUFDRSxNQUFPLEVBQTNCLENBQXhCOztBQUNBLFVBQU1DLFFBQVEsR0FBRyxJQUFJRixRQUFKLENBQWFiLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCVyxFQUEzQixDQUFqQjtBQUVBLFVBQU1HLFFBQVEsQ0FBQ0csT0FBVCxDQUFpQkQsWUFBWSxDQUFDRSxZQUE5QixDQUFOO0FBRUEsVUFBTXRCLGVBQWUsQ0FBQ2tCLFFBQUQsRUFBVyxPQUFYLENBQXJCO0FBQ0gsR0FUZ0IsQ0FBakI7QUFVSCxDQTdCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgXywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgdGhyb3dJZkZpbGVOb3RFeGlzdCwgZ2V0U2NoZW1hQ29ubmVjdG9ycywgaW1wb3J0RGF0YUZpbGVzIH0gPSByZXF1aXJlKCcuLi91dGlscy9oZWxwZXJzJyk7XG5cbi8qKlxuICogQnVpbGQgZGF0YWJhc2Ugc2NyaXB0cyBhbmQgZW50aXR5IG1vZGVscyBmcm9tIG9vbG9uZyBmaWxlcy5cbiAqIEBwYXJhbSB7U2VydmljZUNvbnRhaW5lcn0gYXBwXG4gKiBAcGFyYW0ge29iamVjdH0gY29udGV4dCBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LmdlbWxQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tb2RlbFBhdGggICAgICAgICBcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0LnNjcmlwdFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1hbmlmZXN0UGF0aFxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnVzZUpzb25Tb3VyY2VcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC5zYXZlSW50ZXJtZWRpYXRlXG4gKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dC5zY2hlbWFzICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBjb250ZXh0KSA9PiB7XG4gICAgYXBwLmxvZygndmVyYm9zZScsICdnZW1sIG1pZ3JhdGUnKTtcblxuICAgIHRocm93SWZGaWxlTm90RXhpc3QoXCJtb2RlbFBhdGhcIiwgY29udGV4dC5tb2RlbFBhdGgpO1xuICAgIHRocm93SWZGaWxlTm90RXhpc3QoXCJzY3JpcHRQYXRoXCIsIGNvbnRleHQuc2NyaXB0UGF0aCk7XG5cbiAgICBsZXQgcmVzZXQgPSBhcHAub3B0aW9uKCdyZXNldCcpO1xuXG4gICAgaWYgKHJlc2V0KSB7XG4gICAgICAgIGF3YWl0IGVhY2hBc3luY18oT2JqZWN0LmtleXMoY29udGV4dC5zY2hlbWFzKS5yZXZlcnNlKCksIGFzeW5jIChzY2hlbWFOYW1lKSA9PiB7ICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBkYiA9IGFwcC5kYihzY2hlbWFOYW1lKTtcbiAgICBcbiAgICAgICAgICAgIGNvbnN0IE1pZ3JhdG9yID0gcmVxdWlyZShgLi4vbWlncmF0aW9uLyR7ZGIuZHJpdmVyfWApO1xuICAgICAgICAgICAgY29uc3QgbWlncmF0b3IgPSBuZXcgTWlncmF0b3IoYXBwLCBjb250ZXh0LCBkYik7XG5cbiAgICAgICAgICAgIGF3YWl0IG1pZ3JhdG9yLnJlc2V0XygpOyAgICBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhY2hBc3luY18oY29udGV4dC5zY2hlbWFzLCBhc3luYyAoc2NoZW1hQ29uZmlnLCBzY2hlbWFOYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IGRiID0gYXBwLmRiKHNjaGVtYU5hbWUpOyAgICAgICAgXG4gICAgXG4gICAgICAgIGNvbnN0IE1pZ3JhdG9yID0gcmVxdWlyZShgLi4vbWlncmF0aW9uLyR7ZGIuZHJpdmVyfWApO1xuICAgICAgICBjb25zdCBtaWdyYXRvciA9IG5ldyBNaWdyYXRvcihhcHAsIGNvbnRleHQsIGRiKTtcblxuICAgICAgICBhd2FpdCBtaWdyYXRvci5jcmVhdGVfKHNjaGVtYUNvbmZpZy5leHRyYU9wdGlvbnMpOyAgICAgIFxuXG4gICAgICAgIGF3YWl0IGltcG9ydERhdGFGaWxlcyhtaWdyYXRvciwgJ19pbml0Jyk7ICBcbiAgICB9KTtcbn07XG4iXX0=