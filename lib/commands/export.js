"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getDateNamedDir
} = require('../utils/helpers');

module.exports = async (app, context) => {
  app.log('verbose', 'geml export');
  throwIfFileNotExist("gemlPath", context.gemlPath);

  if (!context.export) {
    throw new Error('Config "geml.export" for  is required.');
  }

  let schemaName = app.option('schema');
  let override = app.option('override');
  let db = app.db(schemaName);
  let basePath = path.join(context.manifestPath, 'export');
  let exportOutput = getDateNamedDir(basePath, undefined, override);

  const Migrator = require(`../migration/${db.connector.driver}`);

  const migrator = new Migrator(app, context, db);
  await migrator.export_(context.export, exportOutput);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnQuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZWFjaEFzeW5jXyIsInRocm93SWZGaWxlTm90RXhpc3QiLCJnZXREYXRlTmFtZWREaXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXBwIiwiY29udGV4dCIsImxvZyIsImdlbWxQYXRoIiwiZXhwb3J0IiwiRXJyb3IiLCJzY2hlbWFOYW1lIiwib3B0aW9uIiwib3ZlcnJpZGUiLCJkYiIsImJhc2VQYXRoIiwiam9pbiIsIm1hbmlmZXN0UGF0aCIsImV4cG9ydE91dHB1dCIsInVuZGVmaW5lZCIsIk1pZ3JhdG9yIiwiY29ubmVjdG9yIiwiZHJpdmVyIiwibWlncmF0b3IiLCJleHBvcnRfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFvQkYsT0FBTyxDQUFDLFVBQUQsQ0FBakM7O0FBQ0EsTUFBTTtBQUFFRyxFQUFBQSxtQkFBRjtBQUF1QkMsRUFBQUE7QUFBdkIsSUFBMkNKLE9BQU8sQ0FBQyxrQkFBRCxDQUF4RDs7QUFnQkFLLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixPQUFPQyxHQUFQLEVBQVlDLE9BQVosS0FBd0I7QUFDckNELEVBQUFBLEdBQUcsQ0FBQ0UsR0FBSixDQUFRLFNBQVIsRUFBbUIsYUFBbkI7QUFFQU4sRUFBQUEsbUJBQW1CLENBQUMsVUFBRCxFQUFhSyxPQUFPLENBQUNFLFFBQXJCLENBQW5COztBQUVBLE1BQUksQ0FBQ0YsT0FBTyxDQUFDRyxNQUFiLEVBQXFCO0FBQ2pCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHdDQUFWLENBQU47QUFDSDs7QUFFRCxNQUFJQyxVQUFVLEdBQUdOLEdBQUcsQ0FBQ08sTUFBSixDQUFXLFFBQVgsQ0FBakI7QUFDQSxNQUFJQyxRQUFRLEdBQUdSLEdBQUcsQ0FBQ08sTUFBSixDQUFXLFVBQVgsQ0FBZjtBQUVBLE1BQUlFLEVBQUUsR0FBR1QsR0FBRyxDQUFDUyxFQUFKLENBQU9ILFVBQVAsQ0FBVDtBQUVBLE1BQUlJLFFBQVEsR0FBR2xCLElBQUksQ0FBQ21CLElBQUwsQ0FBVVYsT0FBTyxDQUFDVyxZQUFsQixFQUFnQyxRQUFoQyxDQUFmO0FBRUEsTUFBSUMsWUFBWSxHQUFHaEIsZUFBZSxDQUFDYSxRQUFELEVBQVdJLFNBQVgsRUFBc0JOLFFBQXRCLENBQWxDOztBQUVBLFFBQU1PLFFBQVEsR0FBR3RCLE9BQU8sQ0FBRSxnQkFBZWdCLEVBQUUsQ0FBQ08sU0FBSCxDQUFhQyxNQUFPLEVBQXJDLENBQXhCOztBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJSCxRQUFKLENBQWFmLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCUSxFQUEzQixDQUFqQjtBQUVBLFFBQU1TLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQmxCLE9BQU8sQ0FBQ0csTUFBekIsRUFBaUNTLFlBQWpDLENBQU47QUFDSCxDQXRCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRocm93SWZGaWxlTm90RXhpc3QsIGdldERhdGVOYW1lZERpciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvaGVscGVycycpO1xuXG4vKipcbiAqIEJ1aWxkIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMgZnJvbSBvb2xvbmcgZmlsZXMuXG4gKiBAcGFyYW0ge1NlcnZpY2VDb250YWluZXJ9IGFwcFxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5nZW1sUGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubW9kZWxQYXRoICAgICAgICAgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5zY3JpcHRQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tYW5pZmVzdFBhdGhcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC51c2VKc29uU291cmNlXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQuc2F2ZUludGVybWVkaWF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuc2NoZW1hcyAgIFxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuZXhwb3J0ICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBjb250ZXh0KSA9PiB7XG4gICAgYXBwLmxvZygndmVyYm9zZScsICdnZW1sIGV4cG9ydCcpO1xuXG4gICAgdGhyb3dJZkZpbGVOb3RFeGlzdChcImdlbWxQYXRoXCIsIGNvbnRleHQuZ2VtbFBhdGgpO1xuXG4gICAgaWYgKCFjb250ZXh0LmV4cG9ydCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBcImdlbWwuZXhwb3J0XCIgZm9yICBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICBsZXQgc2NoZW1hTmFtZSA9IGFwcC5vcHRpb24oJ3NjaGVtYScpO1xuICAgIGxldCBvdmVycmlkZSA9IGFwcC5vcHRpb24oJ292ZXJyaWRlJyk7XG5cbiAgICBsZXQgZGIgPSBhcHAuZGIoc2NoZW1hTmFtZSk7XG4gICAgXG4gICAgbGV0IGJhc2VQYXRoID0gcGF0aC5qb2luKGNvbnRleHQubWFuaWZlc3RQYXRoLCAnZXhwb3J0Jyk7XG5cbiAgICBsZXQgZXhwb3J0T3V0cHV0ID0gZ2V0RGF0ZU5hbWVkRGlyKGJhc2VQYXRoLCB1bmRlZmluZWQsIG92ZXJyaWRlKTsgICBcblxuICAgIGNvbnN0IE1pZ3JhdG9yID0gcmVxdWlyZShgLi4vbWlncmF0aW9uLyR7ZGIuY29ubmVjdG9yLmRyaXZlcn1gKTtcbiAgICBjb25zdCBtaWdyYXRvciA9IG5ldyBNaWdyYXRvcihhcHAsIGNvbnRleHQsIGRiKTtcblxuICAgIGF3YWl0IG1pZ3JhdG9yLmV4cG9ydF8oY29udGV4dC5leHBvcnQsIGV4cG9ydE91dHB1dCk7ICAgICBcbn07XG4iXX0=