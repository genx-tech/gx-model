"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getDateNamedDir
} = require('../utils/helpers');

module.exports = async (app, context) => {
  app.log('verbose', 'geml export');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let schemaName = app.option('schema');
  let override = app.option('override');
  let db = app.db(schemaName);
  let basePath = path.join(context.manifestPath, 'export');
  let exportOutput = getDateNamedDir(basePath, undefined, override);

  const Migrator = require(`../migration/${db.connector.driver}`);

  const migrator = new Migrator(app, context, db);

  if (!context.export) {
    throw new Error('Config "geml.export" for is required.');
  }

  if (typeof context.export === "string") {
    const exportFilePath = path.resolve(app.options.configPath, context.export);
    context.export = fs.readJsonSync(exportFilePath, "utf8");
  } else if (Array.isArray(context.export)) {
    const items = await eachAsync_(context.export, exportFile => {
      const exportFilePath = path.resolve(app.options.configPath, exportFile);
      const exportConfig = fs.readJsonSync(exportFilePath, "utf8");
      return migrator.export_(exportConfig, exportOutput, true);
    });
    migrator.writeIndexFile(exportOutput, items);
    return items;
  }

  return migrator.export_(context.export, exportOutput);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnQuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidGhyb3dJZkZpbGVOb3RFeGlzdCIsImdldERhdGVOYW1lZERpciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJjb250ZXh0IiwibG9nIiwiZ2VtbFBhdGgiLCJzY2hlbWFOYW1lIiwib3B0aW9uIiwib3ZlcnJpZGUiLCJkYiIsImJhc2VQYXRoIiwiam9pbiIsIm1hbmlmZXN0UGF0aCIsImV4cG9ydE91dHB1dCIsInVuZGVmaW5lZCIsIk1pZ3JhdG9yIiwiY29ubmVjdG9yIiwiZHJpdmVyIiwibWlncmF0b3IiLCJleHBvcnQiLCJFcnJvciIsImV4cG9ydEZpbGVQYXRoIiwicmVzb2x2ZSIsIm9wdGlvbnMiLCJjb25maWdQYXRoIiwicmVhZEpzb25TeW5jIiwiQXJyYXkiLCJpc0FycmF5IiwiaXRlbXMiLCJleHBvcnRGaWxlIiwiZXhwb3J0Q29uZmlnIiwiZXhwb3J0XyIsIndyaXRlSW5kZXhGaWxlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUEsRUFBTDtBQUFTQyxFQUFBQTtBQUFULElBQXdCSCxPQUFPLENBQUMsVUFBRCxDQUFyQzs7QUFDQSxNQUFNO0FBQUVJLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQTtBQUF2QixJQUEyQ0wsT0FBTyxDQUFDLGtCQUFELENBQXhEOztBQWdCQU0sTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLEdBQVAsRUFBWUMsT0FBWixLQUF3QjtBQUNyQ0QsRUFBQUEsR0FBRyxDQUFDRSxHQUFKLENBQVEsU0FBUixFQUFtQixhQUFuQjtBQUVBTixFQUFBQSxtQkFBbUIsQ0FBQyxVQUFELEVBQWFLLE9BQU8sQ0FBQ0UsUUFBckIsQ0FBbkI7QUFFQSxNQUFJQyxVQUFVLEdBQUdKLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLFFBQVgsQ0FBakI7QUFDQSxNQUFJQyxRQUFRLEdBQUdOLEdBQUcsQ0FBQ0ssTUFBSixDQUFXLFVBQVgsQ0FBZjtBQUVBLE1BQUlFLEVBQUUsR0FBR1AsR0FBRyxDQUFDTyxFQUFKLENBQU9ILFVBQVAsQ0FBVDtBQUVBLE1BQUlJLFFBQVEsR0FBR2pCLElBQUksQ0FBQ2tCLElBQUwsQ0FBVVIsT0FBTyxDQUFDUyxZQUFsQixFQUFnQyxRQUFoQyxDQUFmO0FBRUEsTUFBSUMsWUFBWSxHQUFHZCxlQUFlLENBQUNXLFFBQUQsRUFBV0ksU0FBWCxFQUFzQk4sUUFBdEIsQ0FBbEM7O0FBRUEsUUFBTU8sUUFBUSxHQUFHckIsT0FBTyxDQUFFLGdCQUFlZSxFQUFFLENBQUNPLFNBQUgsQ0FBYUMsTUFBTyxFQUFyQyxDQUF4Qjs7QUFDQSxRQUFNQyxRQUFRLEdBQUcsSUFBSUgsUUFBSixDQUFhYixHQUFiLEVBQWtCQyxPQUFsQixFQUEyQk0sRUFBM0IsQ0FBakI7O0FBRUEsTUFBSSxDQUFDTixPQUFPLENBQUNnQixNQUFiLEVBQXFCO0FBQ2pCLFVBQU0sSUFBSUMsS0FBSixDQUFVLHVDQUFWLENBQU47QUFDSDs7QUFFRCxNQUFJLE9BQU9qQixPQUFPLENBQUNnQixNQUFmLEtBQTBCLFFBQTlCLEVBQXdDO0FBQ3BDLFVBQU1FLGNBQWMsR0FBRzVCLElBQUksQ0FBQzZCLE9BQUwsQ0FBYXBCLEdBQUcsQ0FBQ3FCLE9BQUosQ0FBWUMsVUFBekIsRUFBcUNyQixPQUFPLENBQUNnQixNQUE3QyxDQUF2QjtBQUNBaEIsSUFBQUEsT0FBTyxDQUFDZ0IsTUFBUixHQUFpQnZCLEVBQUUsQ0FBQzZCLFlBQUgsQ0FBZ0JKLGNBQWhCLEVBQWdDLE1BQWhDLENBQWpCO0FBQ0gsR0FIRCxNQUdPLElBQUlLLEtBQUssQ0FBQ0MsT0FBTixDQUFjeEIsT0FBTyxDQUFDZ0IsTUFBdEIsQ0FBSixFQUFtQztBQUN0QyxVQUFNUyxLQUFLLEdBQUcsTUFBTS9CLFVBQVUsQ0FBQ00sT0FBTyxDQUFDZ0IsTUFBVCxFQUFrQlUsVUFBRCxJQUFnQjtBQUMzRCxZQUFNUixjQUFjLEdBQUc1QixJQUFJLENBQUM2QixPQUFMLENBQWFwQixHQUFHLENBQUNxQixPQUFKLENBQVlDLFVBQXpCLEVBQXFDSyxVQUFyQyxDQUF2QjtBQUNBLFlBQU1DLFlBQVksR0FBR2xDLEVBQUUsQ0FBQzZCLFlBQUgsQ0FBZ0JKLGNBQWhCLEVBQWdDLE1BQWhDLENBQXJCO0FBQ0EsYUFBT0gsUUFBUSxDQUFDYSxPQUFULENBQWlCRCxZQUFqQixFQUErQmpCLFlBQS9CLEVBQTZDLElBQTdDLENBQVA7QUFDSCxLQUo2QixDQUE5QjtBQU1BSyxJQUFBQSxRQUFRLENBQUNjLGNBQVQsQ0FBd0JuQixZQUF4QixFQUFzQ2UsS0FBdEM7QUFFQSxXQUFPQSxLQUFQO0FBQ0g7O0FBRUQsU0FBT1YsUUFBUSxDQUFDYSxPQUFULENBQWlCNUIsT0FBTyxDQUFDZ0IsTUFBekIsRUFBaUNOLFlBQWpDLENBQVA7QUFDSCxDQXJDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0aHJvd0lmRmlsZU5vdEV4aXN0LCBnZXREYXRlTmFtZWREaXIgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2hlbHBlcnMnKTtcblxuLyoqXG4gKiBCdWlsZCBkYXRhYmFzZSBzY3JpcHRzIGFuZCBlbnRpdHkgbW9kZWxzIGZyb20gb29sb25nIGZpbGVzLlxuICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBhcHBcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQuZ2VtbFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1vZGVsUGF0aCAgICAgICAgIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQuc2NyaXB0UGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubWFuaWZlc3RQYXRoXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQudXNlSnNvblNvdXJjZVxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnNhdmVJbnRlcm1lZGlhdGVcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0LnNjaGVtYXMgICBcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0LmV4cG9ydCAgIFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGFwcCwgY29udGV4dCkgPT4ge1xuICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCAnZ2VtbCBleHBvcnQnKTtcblxuICAgIHRocm93SWZGaWxlTm90RXhpc3QoXCJnZW1sUGF0aFwiLCBjb250ZXh0LmdlbWxQYXRoKTtcblxuICAgIGxldCBzY2hlbWFOYW1lID0gYXBwLm9wdGlvbignc2NoZW1hJyk7XG4gICAgbGV0IG92ZXJyaWRlID0gYXBwLm9wdGlvbignb3ZlcnJpZGUnKTtcblxuICAgIGxldCBkYiA9IGFwcC5kYihzY2hlbWFOYW1lKTtcbiAgICBcbiAgICBsZXQgYmFzZVBhdGggPSBwYXRoLmpvaW4oY29udGV4dC5tYW5pZmVzdFBhdGgsICdleHBvcnQnKTtcblxuICAgIGxldCBleHBvcnRPdXRwdXQgPSBnZXREYXRlTmFtZWREaXIoYmFzZVBhdGgsIHVuZGVmaW5lZCwgb3ZlcnJpZGUpOyAgIFxuXG4gICAgY29uc3QgTWlncmF0b3IgPSByZXF1aXJlKGAuLi9taWdyYXRpb24vJHtkYi5jb25uZWN0b3IuZHJpdmVyfWApO1xuICAgIGNvbnN0IG1pZ3JhdG9yID0gbmV3IE1pZ3JhdG9yKGFwcCwgY29udGV4dCwgZGIpO1xuXG4gICAgaWYgKCFjb250ZXh0LmV4cG9ydCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbmZpZyBcImdlbWwuZXhwb3J0XCIgZm9yIGlzIHJlcXVpcmVkLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY29udGV4dC5leHBvcnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgY29uc3QgZXhwb3J0RmlsZVBhdGggPSBwYXRoLnJlc29sdmUoYXBwLm9wdGlvbnMuY29uZmlnUGF0aCwgY29udGV4dC5leHBvcnQpO1xuICAgICAgICBjb250ZXh0LmV4cG9ydCA9IGZzLnJlYWRKc29uU3luYyhleHBvcnRGaWxlUGF0aCwgXCJ1dGY4XCIpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb250ZXh0LmV4cG9ydCkpIHtcbiAgICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBlYWNoQXN5bmNfKGNvbnRleHQuZXhwb3J0LCAoZXhwb3J0RmlsZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZXhwb3J0RmlsZVBhdGggPSBwYXRoLnJlc29sdmUoYXBwLm9wdGlvbnMuY29uZmlnUGF0aCwgZXhwb3J0RmlsZSk7XG4gICAgICAgICAgICBjb25zdCBleHBvcnRDb25maWcgPSBmcy5yZWFkSnNvblN5bmMoZXhwb3J0RmlsZVBhdGgsIFwidXRmOFwiKTtcbiAgICAgICAgICAgIHJldHVybiBtaWdyYXRvci5leHBvcnRfKGV4cG9ydENvbmZpZywgZXhwb3J0T3V0cHV0LCB0cnVlKTsgICAgIFxuICAgICAgICB9KTtcblxuICAgICAgICBtaWdyYXRvci53cml0ZUluZGV4RmlsZShleHBvcnRPdXRwdXQsIGl0ZW1zKTtcblxuICAgICAgICByZXR1cm4gaXRlbXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZ3JhdG9yLmV4cG9ydF8oY29udGV4dC5leHBvcnQsIGV4cG9ydE91dHB1dCk7ICAgICBcbn07XG4iXX0=