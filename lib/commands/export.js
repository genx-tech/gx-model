"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getDateNamedDir
} = require('../utils/helpers');

module.exports = async (app, context) => {
  app.log('verbose', 'geml export');
  throwIfFileNotExist("gemlPath", context.gemlPath);

  if (!context.export) {
    throw new Error('Config "geml.export" for is required.');
  }

  if (typeof context.export === "string") {
    const exportFilePath = path.resolve(app.options.configPath, context.export);
    context.export = fs.readJsonSync(exportFilePath, "utf8");
  }

  let schemaName = app.option('schema');
  let override = app.option('override');
  let db = app.db(schemaName);
  let basePath = path.join(context.manifestPath, 'export');
  let exportOutput = getDateNamedDir(basePath, undefined, override);

  const Migrator = require(`../migration/${db.connector.driver}`);

  const migrator = new Migrator(app, context, db);
  await migrator.export_(context.export, exportOutput);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnQuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZnMiLCJ0aHJvd0lmRmlsZU5vdEV4aXN0IiwiZ2V0RGF0ZU5hbWVkRGlyIiwibW9kdWxlIiwiZXhwb3J0cyIsImFwcCIsImNvbnRleHQiLCJsb2ciLCJnZW1sUGF0aCIsImV4cG9ydCIsIkVycm9yIiwiZXhwb3J0RmlsZVBhdGgiLCJyZXNvbHZlIiwib3B0aW9ucyIsImNvbmZpZ1BhdGgiLCJyZWFkSnNvblN5bmMiLCJzY2hlbWFOYW1lIiwib3B0aW9uIiwib3ZlcnJpZGUiLCJkYiIsImJhc2VQYXRoIiwiam9pbiIsIm1hbmlmZXN0UGF0aCIsImV4cG9ydE91dHB1dCIsInVuZGVmaW5lZCIsIk1pZ3JhdG9yIiwiY29ubmVjdG9yIiwiZHJpdmVyIiwibWlncmF0b3IiLCJleHBvcnRfIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLENBQUY7QUFBS0MsRUFBQUE7QUFBTCxJQUFZRixPQUFPLENBQUMsVUFBRCxDQUF6Qjs7QUFDQSxNQUFNO0FBQUVHLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQTtBQUF2QixJQUEyQ0osT0FBTyxDQUFDLGtCQUFELENBQXhEOztBQWdCQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCLE9BQU9DLEdBQVAsRUFBWUMsT0FBWixLQUF3QjtBQUNyQ0QsRUFBQUEsR0FBRyxDQUFDRSxHQUFKLENBQVEsU0FBUixFQUFtQixhQUFuQjtBQUVBTixFQUFBQSxtQkFBbUIsQ0FBQyxVQUFELEVBQWFLLE9BQU8sQ0FBQ0UsUUFBckIsQ0FBbkI7O0FBRUEsTUFBSSxDQUFDRixPQUFPLENBQUNHLE1BQWIsRUFBcUI7QUFDakIsVUFBTSxJQUFJQyxLQUFKLENBQVUsdUNBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUksT0FBT0osT0FBTyxDQUFDRyxNQUFmLEtBQTBCLFFBQTlCLEVBQXdDO0FBQ3BDLFVBQU1FLGNBQWMsR0FBR2QsSUFBSSxDQUFDZSxPQUFMLENBQWFQLEdBQUcsQ0FBQ1EsT0FBSixDQUFZQyxVQUF6QixFQUFxQ1IsT0FBTyxDQUFDRyxNQUE3QyxDQUF2QjtBQUNBSCxJQUFBQSxPQUFPLENBQUNHLE1BQVIsR0FBaUJULEVBQUUsQ0FBQ2UsWUFBSCxDQUFnQkosY0FBaEIsRUFBZ0MsTUFBaEMsQ0FBakI7QUFDSDs7QUFFRCxNQUFJSyxVQUFVLEdBQUdYLEdBQUcsQ0FBQ1ksTUFBSixDQUFXLFFBQVgsQ0FBakI7QUFDQSxNQUFJQyxRQUFRLEdBQUdiLEdBQUcsQ0FBQ1ksTUFBSixDQUFXLFVBQVgsQ0FBZjtBQUVBLE1BQUlFLEVBQUUsR0FBR2QsR0FBRyxDQUFDYyxFQUFKLENBQU9ILFVBQVAsQ0FBVDtBQUVBLE1BQUlJLFFBQVEsR0FBR3ZCLElBQUksQ0FBQ3dCLElBQUwsQ0FBVWYsT0FBTyxDQUFDZ0IsWUFBbEIsRUFBZ0MsUUFBaEMsQ0FBZjtBQUVBLE1BQUlDLFlBQVksR0FBR3JCLGVBQWUsQ0FBQ2tCLFFBQUQsRUFBV0ksU0FBWCxFQUFzQk4sUUFBdEIsQ0FBbEM7O0FBRUEsUUFBTU8sUUFBUSxHQUFHM0IsT0FBTyxDQUFFLGdCQUFlcUIsRUFBRSxDQUFDTyxTQUFILENBQWFDLE1BQU8sRUFBckMsQ0FBeEI7O0FBQ0EsUUFBTUMsUUFBUSxHQUFHLElBQUlILFFBQUosQ0FBYXBCLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCYSxFQUEzQixDQUFqQjtBQUVBLFFBQU1TLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQnZCLE9BQU8sQ0FBQ0csTUFBekIsRUFBaUNjLFlBQWpDLENBQU47QUFDSCxDQTNCRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyB0aHJvd0lmRmlsZU5vdEV4aXN0LCBnZXREYXRlTmFtZWREaXIgfSA9IHJlcXVpcmUoJy4uL3V0aWxzL2hlbHBlcnMnKTtcblxuLyoqXG4gKiBCdWlsZCBkYXRhYmFzZSBzY3JpcHRzIGFuZCBlbnRpdHkgbW9kZWxzIGZyb20gb29sb25nIGZpbGVzLlxuICogQHBhcmFtIHtTZXJ2aWNlQ29udGFpbmVyfSBhcHBcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb250ZXh0IFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQuZ2VtbFBhdGhcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb250ZXh0Lm1vZGVsUGF0aCAgICAgICAgIFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQuc2NyaXB0UGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubWFuaWZlc3RQYXRoXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQudXNlSnNvblNvdXJjZVxuICogQHByb3BlcnR5IHtib29sfSBjb250ZXh0LnNhdmVJbnRlcm1lZGlhdGVcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0LnNjaGVtYXMgICBcbiAqIEBwcm9wZXJ0eSB7b2JqZWN0fSBjb250ZXh0LmV4cG9ydCAgIFxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgKGFwcCwgY29udGV4dCkgPT4ge1xuICAgIGFwcC5sb2coJ3ZlcmJvc2UnLCAnZ2VtbCBleHBvcnQnKTtcblxuICAgIHRocm93SWZGaWxlTm90RXhpc3QoXCJnZW1sUGF0aFwiLCBjb250ZXh0LmdlbWxQYXRoKTtcblxuICAgIGlmICghY29udGV4dC5leHBvcnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb25maWcgXCJnZW1sLmV4cG9ydFwiIGZvciBpcyByZXF1aXJlZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbnRleHQuZXhwb3J0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNvbnN0IGV4cG9ydEZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGFwcC5vcHRpb25zLmNvbmZpZ1BhdGgsIGNvbnRleHQuZXhwb3J0KTtcbiAgICAgICAgY29udGV4dC5leHBvcnQgPSBmcy5yZWFkSnNvblN5bmMoZXhwb3J0RmlsZVBhdGgsIFwidXRmOFwiKTtcbiAgICB9XG5cbiAgICBsZXQgc2NoZW1hTmFtZSA9IGFwcC5vcHRpb24oJ3NjaGVtYScpO1xuICAgIGxldCBvdmVycmlkZSA9IGFwcC5vcHRpb24oJ292ZXJyaWRlJyk7XG5cbiAgICBsZXQgZGIgPSBhcHAuZGIoc2NoZW1hTmFtZSk7XG4gICAgXG4gICAgbGV0IGJhc2VQYXRoID0gcGF0aC5qb2luKGNvbnRleHQubWFuaWZlc3RQYXRoLCAnZXhwb3J0Jyk7XG5cbiAgICBsZXQgZXhwb3J0T3V0cHV0ID0gZ2V0RGF0ZU5hbWVkRGlyKGJhc2VQYXRoLCB1bmRlZmluZWQsIG92ZXJyaWRlKTsgICBcblxuICAgIGNvbnN0IE1pZ3JhdG9yID0gcmVxdWlyZShgLi4vbWlncmF0aW9uLyR7ZGIuY29ubmVjdG9yLmRyaXZlcn1gKTtcbiAgICBjb25zdCBtaWdyYXRvciA9IG5ldyBNaWdyYXRvcihhcHAsIGNvbnRleHQsIGRiKTtcblxuICAgIGF3YWl0IG1pZ3JhdG9yLmV4cG9ydF8oY29udGV4dC5leHBvcnQsIGV4cG9ydE91dHB1dCk7ICAgICBcbn07XG4iXX0=