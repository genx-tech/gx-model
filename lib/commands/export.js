"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_
} = require('rk-utils');

const {
  throwIfFileNotExist,
  getDateNamedDir
} = require('../utils/helpers');

module.exports = async (app, context) => {
  app.log('verbose', 'geml export');
  throwIfFileNotExist("gemlPath", context.gemlPath);
  let schemaName = app.option('schema');
  let override = app.option('override');
  let db = app.db(schemaName);
  let basePath = path.join(context.manifestPath, 'export');
  let exportOutput = getDateNamedDir(basePath, undefined, override);

  const Migrator = require(`../migration/${db.connector.driver}`);

  const migrator = new Migrator(app, context, db);

  if (!context.export) {
    throw new Error('Config "geml.export" for is required.');
  }

  if (typeof context.export === "string") {
    const exportFilePath = path.resolve(app.options.configPath, context.export);
    context.export = fs.readJsonSync(exportFilePath, "utf8");
  } else if (Array.isArray(context.export)) {
    return eachAsync_(context.export, exportFile => {
      const exportFilePath = path.resolve(app.options.configPath, exportFile);
      const exportConfig = fs.readJsonSync(exportFilePath, "utf8");
      return migrator.export_(exportConfig, exportOutput);
    });
  }

  return migrator.export_(context.export, exportOutput);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tYW5kcy9leHBvcnQuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJfIiwiZnMiLCJlYWNoQXN5bmNfIiwidGhyb3dJZkZpbGVOb3RFeGlzdCIsImdldERhdGVOYW1lZERpciIsIm1vZHVsZSIsImV4cG9ydHMiLCJhcHAiLCJjb250ZXh0IiwibG9nIiwiZ2VtbFBhdGgiLCJzY2hlbWFOYW1lIiwib3B0aW9uIiwib3ZlcnJpZGUiLCJkYiIsImJhc2VQYXRoIiwiam9pbiIsIm1hbmlmZXN0UGF0aCIsImV4cG9ydE91dHB1dCIsInVuZGVmaW5lZCIsIk1pZ3JhdG9yIiwiY29ubmVjdG9yIiwiZHJpdmVyIiwibWlncmF0b3IiLCJleHBvcnQiLCJFcnJvciIsImV4cG9ydEZpbGVQYXRoIiwicmVzb2x2ZSIsIm9wdGlvbnMiLCJjb25maWdQYXRoIiwicmVhZEpzb25TeW5jIiwiQXJyYXkiLCJpc0FycmF5IiwiZXhwb3J0RmlsZSIsImV4cG9ydENvbmZpZyIsImV4cG9ydF8iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBO0FBQVQsSUFBd0JILE9BQU8sQ0FBQyxVQUFELENBQXJDOztBQUNBLE1BQU07QUFBRUksRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBO0FBQXZCLElBQTJDTCxPQUFPLENBQUMsa0JBQUQsQ0FBeEQ7O0FBZ0JBTSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsT0FBT0MsR0FBUCxFQUFZQyxPQUFaLEtBQXdCO0FBQ3JDRCxFQUFBQSxHQUFHLENBQUNFLEdBQUosQ0FBUSxTQUFSLEVBQW1CLGFBQW5CO0FBRUFOLEVBQUFBLG1CQUFtQixDQUFDLFVBQUQsRUFBYUssT0FBTyxDQUFDRSxRQUFyQixDQUFuQjtBQUVBLE1BQUlDLFVBQVUsR0FBR0osR0FBRyxDQUFDSyxNQUFKLENBQVcsUUFBWCxDQUFqQjtBQUNBLE1BQUlDLFFBQVEsR0FBR04sR0FBRyxDQUFDSyxNQUFKLENBQVcsVUFBWCxDQUFmO0FBRUEsTUFBSUUsRUFBRSxHQUFHUCxHQUFHLENBQUNPLEVBQUosQ0FBT0gsVUFBUCxDQUFUO0FBRUEsTUFBSUksUUFBUSxHQUFHakIsSUFBSSxDQUFDa0IsSUFBTCxDQUFVUixPQUFPLENBQUNTLFlBQWxCLEVBQWdDLFFBQWhDLENBQWY7QUFFQSxNQUFJQyxZQUFZLEdBQUdkLGVBQWUsQ0FBQ1csUUFBRCxFQUFXSSxTQUFYLEVBQXNCTixRQUF0QixDQUFsQzs7QUFFQSxRQUFNTyxRQUFRLEdBQUdyQixPQUFPLENBQUUsZ0JBQWVlLEVBQUUsQ0FBQ08sU0FBSCxDQUFhQyxNQUFPLEVBQXJDLENBQXhCOztBQUNBLFFBQU1DLFFBQVEsR0FBRyxJQUFJSCxRQUFKLENBQWFiLEdBQWIsRUFBa0JDLE9BQWxCLEVBQTJCTSxFQUEzQixDQUFqQjs7QUFFQSxNQUFJLENBQUNOLE9BQU8sQ0FBQ2dCLE1BQWIsRUFBcUI7QUFDakIsVUFBTSxJQUFJQyxLQUFKLENBQVUsdUNBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUksT0FBT2pCLE9BQU8sQ0FBQ2dCLE1BQWYsS0FBMEIsUUFBOUIsRUFBd0M7QUFDcEMsVUFBTUUsY0FBYyxHQUFHNUIsSUFBSSxDQUFDNkIsT0FBTCxDQUFhcEIsR0FBRyxDQUFDcUIsT0FBSixDQUFZQyxVQUF6QixFQUFxQ3JCLE9BQU8sQ0FBQ2dCLE1BQTdDLENBQXZCO0FBQ0FoQixJQUFBQSxPQUFPLENBQUNnQixNQUFSLEdBQWlCdkIsRUFBRSxDQUFDNkIsWUFBSCxDQUFnQkosY0FBaEIsRUFBZ0MsTUFBaEMsQ0FBakI7QUFDSCxHQUhELE1BR08sSUFBSUssS0FBSyxDQUFDQyxPQUFOLENBQWN4QixPQUFPLENBQUNnQixNQUF0QixDQUFKLEVBQW1DO0FBQ3RDLFdBQU90QixVQUFVLENBQUNNLE9BQU8sQ0FBQ2dCLE1BQVQsRUFBa0JTLFVBQUQsSUFBZ0I7QUFDOUMsWUFBTVAsY0FBYyxHQUFHNUIsSUFBSSxDQUFDNkIsT0FBTCxDQUFhcEIsR0FBRyxDQUFDcUIsT0FBSixDQUFZQyxVQUF6QixFQUFxQ0ksVUFBckMsQ0FBdkI7QUFDQSxZQUFNQyxZQUFZLEdBQUdqQyxFQUFFLENBQUM2QixZQUFILENBQWdCSixjQUFoQixFQUFnQyxNQUFoQyxDQUFyQjtBQUNBLGFBQU9ILFFBQVEsQ0FBQ1ksT0FBVCxDQUFpQkQsWUFBakIsRUFBK0JoQixZQUEvQixDQUFQO0FBQ0gsS0FKZ0IsQ0FBakI7QUFLSDs7QUFFRCxTQUFPSyxRQUFRLENBQUNZLE9BQVQsQ0FBaUIzQixPQUFPLENBQUNnQixNQUF6QixFQUFpQ04sWUFBakMsQ0FBUDtBQUNILENBakNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHsgXywgZnMsIGVhY2hBc3luY18gfSA9IHJlcXVpcmUoJ3JrLXV0aWxzJyk7XG5jb25zdCB7IHRocm93SWZGaWxlTm90RXhpc3QsIGdldERhdGVOYW1lZERpciB9ID0gcmVxdWlyZSgnLi4vdXRpbHMvaGVscGVycycpO1xuXG4vKipcbiAqIEJ1aWxkIGRhdGFiYXNlIHNjcmlwdHMgYW5kIGVudGl0eSBtb2RlbHMgZnJvbSBvb2xvbmcgZmlsZXMuXG4gKiBAcGFyYW0ge1NlcnZpY2VDb250YWluZXJ9IGFwcFxuICogQHBhcmFtIHtvYmplY3R9IGNvbnRleHQgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5nZW1sUGF0aFxuICogQHByb3BlcnR5IHtzdHJpbmd9IGNvbnRleHQubW9kZWxQYXRoICAgICAgICAgXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5zY3JpcHRQYXRoXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29udGV4dC5tYW5pZmVzdFBhdGhcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gY29udGV4dC51c2VKc29uU291cmNlXG4gKiBAcHJvcGVydHkge2Jvb2x9IGNvbnRleHQuc2F2ZUludGVybWVkaWF0ZVxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuc2NoZW1hcyAgIFxuICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQuZXhwb3J0ICAgXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoYXBwLCBjb250ZXh0KSA9PiB7XG4gICAgYXBwLmxvZygndmVyYm9zZScsICdnZW1sIGV4cG9ydCcpO1xuXG4gICAgdGhyb3dJZkZpbGVOb3RFeGlzdChcImdlbWxQYXRoXCIsIGNvbnRleHQuZ2VtbFBhdGgpO1xuXG4gICAgbGV0IHNjaGVtYU5hbWUgPSBhcHAub3B0aW9uKCdzY2hlbWEnKTtcbiAgICBsZXQgb3ZlcnJpZGUgPSBhcHAub3B0aW9uKCdvdmVycmlkZScpO1xuXG4gICAgbGV0IGRiID0gYXBwLmRiKHNjaGVtYU5hbWUpO1xuICAgIFxuICAgIGxldCBiYXNlUGF0aCA9IHBhdGguam9pbihjb250ZXh0Lm1hbmlmZXN0UGF0aCwgJ2V4cG9ydCcpO1xuXG4gICAgbGV0IGV4cG9ydE91dHB1dCA9IGdldERhdGVOYW1lZERpcihiYXNlUGF0aCwgdW5kZWZpbmVkLCBvdmVycmlkZSk7ICAgXG5cbiAgICBjb25zdCBNaWdyYXRvciA9IHJlcXVpcmUoYC4uL21pZ3JhdGlvbi8ke2RiLmNvbm5lY3Rvci5kcml2ZXJ9YCk7XG4gICAgY29uc3QgbWlncmF0b3IgPSBuZXcgTWlncmF0b3IoYXBwLCBjb250ZXh0LCBkYik7XG5cbiAgICBpZiAoIWNvbnRleHQuZXhwb3J0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29uZmlnIFwiZ2VtbC5leHBvcnRcIiBmb3IgaXMgcmVxdWlyZWQuJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0LmV4cG9ydCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBleHBvcnRGaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShhcHAub3B0aW9ucy5jb25maWdQYXRoLCBjb250ZXh0LmV4cG9ydCk7XG4gICAgICAgIGNvbnRleHQuZXhwb3J0ID0gZnMucmVhZEpzb25TeW5jKGV4cG9ydEZpbGVQYXRoLCBcInV0ZjhcIik7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNvbnRleHQuZXhwb3J0KSkge1xuICAgICAgICByZXR1cm4gZWFjaEFzeW5jXyhjb250ZXh0LmV4cG9ydCwgKGV4cG9ydEZpbGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGV4cG9ydEZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKGFwcC5vcHRpb25zLmNvbmZpZ1BhdGgsIGV4cG9ydEZpbGUpO1xuICAgICAgICAgICAgY29uc3QgZXhwb3J0Q29uZmlnID0gZnMucmVhZEpzb25TeW5jKGV4cG9ydEZpbGVQYXRoLCBcInV0ZjhcIik7XG4gICAgICAgICAgICByZXR1cm4gbWlncmF0b3IuZXhwb3J0XyhleHBvcnRDb25maWcsIGV4cG9ydE91dHB1dCk7ICAgICBcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZ3JhdG9yLmV4cG9ydF8oY29udGV4dC5leHBvcnQsIGV4cG9ydE91dHB1dCk7ICAgICBcbn07XG4iXX0=