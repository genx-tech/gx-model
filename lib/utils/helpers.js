"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_
} = require('rk-utils');

exports.throwIfFileNotExist = (name, filePath) => {
  if (!fs.existsSync(filePath)) {
    throw new Error(`Path [${name}="${filePath}"] not exist.`);
  }
};

exports.getSchemaConnectors = (app, schemas) => _.mapValues(schemas, (schemaConfig, name) => {
  let connector = app.getService(schemaConfig.dataSource);

  if (!connector) {
    throw new Error(`Connector service not found for data source [${schemaConfig.dataSource}] of schmea "${name}".`);
  }

  return connector;
});

async function importDataFilesByList(migrator, dataSetPath, dataListFile) {
  let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);

  if (!dataList) {
    return;
  }

  return eachAsync_(dataList, async line => {
    line = line.trim();

    if (line.length > 0 && line[0] !== '#') {
      let dataFile = path.join(dataSetPath, line);

      if (!fs.existsSync(dataFile)) {
        throw new Error(`Data file "${dataFile}" not found.`);
      }

      await migrator.load_(dataFile);
    }
  });
}

exports.importDataFiles = async function (migrator, folderName) {
  let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);
  let dataListFile = path.join(dataSetPath, 'index.list');
  let runtimeDataSetPath,
      stageDataSetFile,
      imported = false;

  if (process.env.STAGE_ENV) {
    runtimeDataSetPath = path.join(dataSetPath, process.env.STAGE_ENV);
    stageDataSetFile = path.join(runtimeDataSetPath, 'index.list');
  }

  if (fs.existsSync(dataListFile)) {
    await importDataFilesByList(migrator, dataSetPath, dataListFile);
    imported = true;
  } else {
    migrator.app.log('warn', `Dataset index file "${dataListFile}" not exist.`);
  }

  if (stageDataSetFile && fs.existsSync(stageDataSetFile)) {
    await importDataFilesByList(migrator, runtimeDataSetPath, stageDataSetFile);
    imported = true;
  } else if (process.env.STAGE_ENV) {
    migrator.app.log(imported ? 'info' : 'warn', `Dataset index file of "${process.env.STAGE_ENV}" stage env "${stageDataSetFile}" not exist.`);
  }

  if (!imported) {
    throw new Error(`Entry file of dataset "${folderName}" not found.`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiXyIsImZzIiwiZWFjaEFzeW5jXyIsImV4cG9ydHMiLCJ0aHJvd0lmRmlsZU5vdEV4aXN0IiwibmFtZSIsImZpbGVQYXRoIiwiZXhpc3RzU3luYyIsIkVycm9yIiwiZ2V0U2NoZW1hQ29ubmVjdG9ycyIsImFwcCIsInNjaGVtYXMiLCJtYXBWYWx1ZXMiLCJzY2hlbWFDb25maWciLCJjb25uZWN0b3IiLCJnZXRTZXJ2aWNlIiwiZGF0YVNvdXJjZSIsImltcG9ydERhdGFGaWxlc0J5TGlzdCIsIm1pZ3JhdG9yIiwiZGF0YVNldFBhdGgiLCJkYXRhTGlzdEZpbGUiLCJkYXRhTGlzdCIsInJlYWRGaWxlU3luYyIsInRvU3RyaW5nIiwibWF0Y2giLCJsaW5lIiwidHJpbSIsImxlbmd0aCIsImRhdGFGaWxlIiwiam9pbiIsImxvYWRfIiwiaW1wb3J0RGF0YUZpbGVzIiwiZm9sZGVyTmFtZSIsImRiU2NyaXB0UGF0aCIsInJ1bnRpbWVEYXRhU2V0UGF0aCIsInN0YWdlRGF0YVNldEZpbGUiLCJpbXBvcnRlZCIsInByb2Nlc3MiLCJlbnYiLCJTVEFHRV9FTlYiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBO0FBQVQsSUFBd0JILE9BQU8sQ0FBQyxVQUFELENBQXJDOztBQUVBSSxPQUFPLENBQUNDLG1CQUFSLEdBQThCLENBQUNDLElBQUQsRUFBT0MsUUFBUCxLQUFvQjtBQUM5QyxNQUFJLENBQUNMLEVBQUUsQ0FBQ00sVUFBSCxDQUFjRCxRQUFkLENBQUwsRUFBOEI7QUFDMUIsVUFBTSxJQUFJRSxLQUFKLENBQVcsU0FBUUgsSUFBSyxLQUFJQyxRQUFTLGVBQXJDLENBQU47QUFDSDtBQUNKLENB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QUNDLFFBQUQsRUFBV2dCLGtCQUFYLEVBQStCQyxnQkFBL0IsQ0FBM0I7QUFDQUMsSUFBQUEsUUFBUSxHQUFHLElBQVg7QUFDSCxHQUhELE1BR08sSUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQWhCLEVBQTJCO0FBQzlCckIsSUFBQUEsUUFBUSxDQUFDUixHQUFULENBQWE4QixHQUFiLENBQWlCSixRQUFRLEdBQUcsTUFBSCxHQUFZLE1BQXJDLEVBQThDLDBCQUF5QkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQVUsZ0JBQWVKLGdCQUFpQixjQUE3SDtBQUNIOztBQUVELE1BQUksQ0FBQ0MsUUFBTCxFQUFlO0FBQ1gsVUFBTSxJQUFJNUIsS0FBSixDQUFXLDBCQUF5QndCLFVBQVcsY0FBL0MsQ0FBTjtBQUNIO0FBQ0gsQ0E1QkYiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgeyBfLCBmcywgZWFjaEFzeW5jXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcblxuZXhwb3J0cy50aHJvd0lmRmlsZU5vdEV4aXN0ID0gKG5hbWUsIGZpbGVQYXRoKSA9PiB7XG4gICAgaWYgKCFmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhdGggWyR7bmFtZX09XCIke2ZpbGVQYXRofVwiXSBub3QgZXhpc3QuYCk7XG4gICAgfVxufVxuXG5leHBvcnRzLmdldFNjaGVtYUNvbm5lY3RvcnMgPSAoYXBwLCBzY2hlbWFzKSA9PiBfLm1hcFZhbHVlcyhzY2hlbWFzLCAoc2NoZW1hQ29uZmlnLCBuYW1lKSA9PiB7XG4gICAgbGV0IGNvbm5lY3RvciA9IGFwcC5nZXRTZXJ2aWNlKHNjaGVtYUNvbmZpZy5kYXRhU291cmNlKTtcbiAgICBpZiAoIWNvbm5lY3Rvcikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbm5lY3RvciBzZXJ2aWNlIG5vdCBmb3VuZCBmb3IgZGF0YSBzb3VyY2UgWyR7c2NoZW1hQ29uZmlnLmRhdGFTb3VyY2V9XSBvZiBzY2htZWEgXCIke25hbWV9XCIuYCk7XG4gICAgfSBcbiAgICByZXR1cm4gY29ubmVjdG9yO1xufSk7XG5cbmFzeW5jIGZ1bmN0aW9uIGltcG9ydERhdGFGaWxlc0J5TGlzdChtaWdyYXRvciwgZGF0YVNldFBhdGgsIGRhdGFMaXN0RmlsZSkge1xuICAgIGxldCBkYXRhTGlzdCA9IGZzLnJlYWRGaWxlU3luYyhkYXRhTGlzdEZpbGUpLnRvU3RyaW5nKCkubWF0Y2goL14uKyQvZ20pO1xuXG4gICAgaWYgKCFkYXRhTGlzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGVhY2hBc3luY18oZGF0YUxpc3QsIGFzeW5jIGxpbmUgPT4ge1xuICAgICAgICBsaW5lID0gbGluZS50cmltKCk7XG5cbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID4gMCAmJiBsaW5lWzBdICE9PSAnIycpIHsgICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCBkYXRhRmlsZSA9IHBhdGguam9pbihkYXRhU2V0UGF0aCwgbGluZSk7XG4gICAgICAgICAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGF0YUZpbGUpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEYXRhIGZpbGUgXCIke2RhdGFGaWxlfVwiIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgbWlncmF0b3IubG9hZF8oZGF0YUZpbGUpO1xuICAgICAgICB9XG4gICAgfSk7IFxufVxuXG5leHBvcnRzLmltcG9ydERhdGFGaWxlcyA9IGFzeW5jIGZ1bmN0aW9uIChtaWdyYXRvciwgZm9sZGVyTmFtZSkge1xuICAgIGxldCBkYXRhU2V0UGF0aCA9IHBhdGguam9pbihtaWdyYXRvci5kYlNjcmlwdFBhdGgsICdkYXRhJywgZm9sZGVyTmFtZSk7XG4gICAgbGV0IGRhdGFMaXN0RmlsZSA9IHBhdGguam9pbihkYXRhU2V0UGF0aCwgJ2luZGV4Lmxpc3QnKTtcblxuICAgIGxldCBydW50aW1lRGF0YVNldFBhdGgsIHN0YWdlRGF0YVNldEZpbGUsIGltcG9ydGVkID0gZmFsc2U7ICAgIFxuXG4gICAgaWYgKHByb2Nlc3MuZW52LlNUQUdFX0VOVikge1xuICAgICAgICBydW50aW1lRGF0YVNldFBhdGggPSBwYXRoLmpvaW4oZGF0YVNldFBhdGgsIHByb2Nlc3MuZW52LlNUQUdFX0VOVik7ICAgICAgICBcbiAgICAgICAgc3RhZ2VEYXRhU2V0RmlsZSA9IHBhdGguam9pbihydW50aW1lRGF0YVNldFBhdGgsICdpbmRleC5saXN0Jyk7XG4gICAgfSAgICBcblxuICAgIGlmIChmcy5leGlzdHNTeW5jKGRhdGFMaXN0RmlsZSkpIHtcbiAgICAgICAgYXdhaXQgaW1wb3J0RGF0YUZpbGVzQnlMaXN0KG1pZ3JhdG9yLCBkYXRhU2V0UGF0aCwgZGF0YUxpc3RGaWxlKTsgICAgICBcbiAgICAgICAgaW1wb3J0ZWQgPSB0cnVlOyAgXG4gICAgfSBlbHNlIHtcbiAgICAgICAgbWlncmF0b3IuYXBwLmxvZygnd2FybicsIGBEYXRhc2V0IGluZGV4IGZpbGUgXCIke2RhdGFMaXN0RmlsZX1cIiBub3QgZXhpc3QuYClcbiAgICB9XG4gICAgXG4gICAgaWYgKHN0YWdlRGF0YVNldEZpbGUgJiYgZnMuZXhpc3RzU3luYyhzdGFnZURhdGFTZXRGaWxlKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnREYXRhRmlsZXNCeUxpc3QobWlncmF0b3IsIHJ1bnRpbWVEYXRhU2V0UGF0aCwgc3RhZ2VEYXRhU2V0RmlsZSk7ICAgIFxuICAgICAgICBpbXBvcnRlZCA9IHRydWU7ICAgICAgXG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5TVEFHRV9FTlYpIHtcbiAgICAgICAgbWlncmF0b3IuYXBwLmxvZyhpbXBvcnRlZCA/ICdpbmZvJyA6ICd3YXJuJywgYERhdGFzZXQgaW5kZXggZmlsZSBvZiBcIiR7cHJvY2Vzcy5lbnYuU1RBR0VfRU5WfVwiIHN0YWdlIGVudiBcIiR7c3RhZ2VEYXRhU2V0RmlsZX1cIiBub3QgZXhpc3QuYClcbiAgICB9XG4gICAgXG4gICAgaWYgKCFpbXBvcnRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVudHJ5IGZpbGUgb2YgZGF0YXNldCBcIiR7Zm9sZGVyTmFtZX1cIiBub3QgZm91bmQuYCk7XG4gICAgfSAgICBcbiB9Il19