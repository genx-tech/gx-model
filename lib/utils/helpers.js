"use strict";

require("source-map-support/register");

const path = require('path');

const {
  _,
  fs,
  eachAsync_
} = require('rk-utils');

exports.throwIfFileNotExist = (name, filePath) => {
  if (!fs.existsSync(filePath)) {
    throw new Error(`Path [${name}="${filePath}"] not exist.`);
  }
};

exports.getSchemaConnectors = (app, schemas) => _.mapValues(schemas, (schemaConfig, name) => {
  let connector = app.getService(schemaConfig.dataSource);

  if (!connector) {
    throw new Error(`Connector service not found for data source [${schemaConfig.dataSource}] of schmea "${name}".`);
  }

  return connector;
});

async function importDataFilesByList(migrator, dataSetPath, dataListFile) {
  let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);

  if (!dataList) {
    return;
  }

  return eachAsync_(dataList, async line => {
    line = line.trim();

    if (line.length > 0 && line[0] !== '#') {
      let dataFile = path.join(dataSetPath, line);

      if (!fs.existsSync(dataFile)) {
        throw new Error(`Data file "${dataFile}" not found.`);
      }

      await migrator.load_(dataFile);
    }
  });
}

exports.importDataFiles = async function (migrator, folderName) {
  let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);
  if (!fs.existsSync(dataSetPath)) return;
  let dataListFile = path.join(dataSetPath, 'index.list');
  let runtimeDataSetPath,
      stageDataSetFile,
      imported = false;

  if (process.env.STAGE_ENV) {
    runtimeDataSetPath = path.join(dataSetPath, process.env.STAGE_ENV);
    stageDataSetFile = path.join(runtimeDataSetPath, 'index.list');
  }

  if (fs.existsSync(dataListFile)) {
    await importDataFilesByList(migrator, dataSetPath, dataListFile);
    imported = true;
  } else {
    migrator.app.log('warn', `Dataset index file "${dataListFile}" not exist.`);
  }

  if (stageDataSetFile && fs.existsSync(stageDataSetFile)) {
    await importDataFilesByList(migrator, runtimeDataSetPath, stageDataSetFile);
    imported = true;
  } else if (process.env.STAGE_ENV) {
    migrator.app.log(imported ? 'info' : 'warn', `Dataset index file of "${process.env.STAGE_ENV}" stage env "${stageDataSetFile}" not exist.`);
  }

  if (!imported) {
    throw new Error(`Entry file of dataset "${folderName}" not found.`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwiXyIsImZzIiwiZWFjaEFzeW5jXyIsImV4cG9ydHMiLCJ0aHJvd0lmRmlsZU5vdEV4aXN0IiwibmFtZSIsImZpbGVQYXRoIiwiZXhpc3RzU3luYyIsIkVycm9yIiwiZ2V0U2NoZW1hQ29ubmVjdG9ycyIsImFwcCIsInNjaGVtYXMiLCJtYXBWYWx1ZXMiLCJzY2hlbWFDb25maWciLCJjb25uZWN0b3IiLCJnZXRTZXJ2aWNlIiwiZGF0YVNvdXJjZSIsImltcG9ydERhdGFGaWxlc0J5TGlzdCIsIm1pZ3JhdG9yIiwiZGF0YVNldFBhdGgiLCJkYXRhTGlzdEZpbGUiLCJkYXRhTGlzdCIsInJlYWRGaWxlU3luYyIsInRvU3RyaW5nIiwibWF0Y2giLCJsaW5lIiwidHJpbSIsImxlbmd0aCIsImRhdGFGaWxlIiwiam9pbiIsImxvYWRfIiwiaW1wb3J0RGF0YUZpbGVzIiwiZm9sZGVyTmFtZSIsImRiU2NyaXB0UGF0aCIsInJ1bnRpbWVEYXRhU2V0UGF0aCIsInN0YWdlRGF0YVNldEZpbGUiLCJpbXBvcnRlZCIsInByb2Nlc3MiLCJlbnYiLCJTVEFHRV9FTlYiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsQ0FBRjtBQUFLQyxFQUFBQSxFQUFMO0FBQVNDLEVBQUFBO0FBQVQsSUFBd0JILE9BQU8sQ0FBQyxVQUFELENBQXJDOztBQUVBSSxPQUFPLENBQUNDLG1CQUFSLEdBQThCLENBQUNDLElBQUQsRUFBT0MsUUFBUCxLQUFvQjtBQUM5QyxNQUFJLENBQUNMLEVBQUUsQ0FBQ00sVUFBSCxDQUFjRCxRQUFkLENBQUwsRUFBOEI7QUFDMUIsVUFBTSxJQUFJRSxLQUFKLENBQVcsU0FBUUgsSUFBSyxLQUFJQyxRQUFTLGVBQXJDLENBQU47QUFDSDtBQUNKLENB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QUNNLFVBQUgsQ0FBYzRCLGdCQUFkLENBQXhCLEVBQXlEO0FBQ3JELFVBQU1sQixxQkFBcUIsQ0FBQ0MsUUFBRCxFQUFXZ0Isa0JBQVgsRUFBK0JDLGdCQUEvQixDQUEzQjtBQUNBQyxJQUFBQSxRQUFRLEdBQUcsSUFBWDtBQUNILEdBSEQsTUFHTyxJQUFJQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBaEIsRUFBMkI7QUFDOUJyQixJQUFBQSxRQUFRLENBQUNSLEdBQVQsQ0FBYThCLEdBQWIsQ0FBaUJKLFFBQVEsR0FBRyxNQUFILEdBQVksTUFBckMsRUFBOEMsMEJBQXlCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsU0FBVSxnQkFBZUosZ0JBQWlCLGNBQTdIO0FBQ0g7O0FBRUQsTUFBSSxDQUFDQyxRQUFMLEVBQWU7QUFDWCxVQUFNLElBQUk1QixLQUFKLENBQVcsMEJBQXlCd0IsVUFBVyxjQUEvQyxDQUFOO0FBQ0g7QUFDSCxDQTlCRiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IF8sIGZzLCBlYWNoQXN5bmNfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuXG5leHBvcnRzLnRocm93SWZGaWxlTm90RXhpc3QgPSAobmFtZSwgZmlsZVBhdGgpID0+IHtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZmlsZVBhdGgpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUGF0aCBbJHtuYW1lfT1cIiR7ZmlsZVBhdGh9XCJdIG5vdCBleGlzdC5gKTtcbiAgICB9XG59XG5cbmV4cG9ydHMuZ2V0U2NoZW1hQ29ubmVjdG9ycyA9IChhcHAsIHNjaGVtYXMpID0+IF8ubWFwVmFsdWVzKHNjaGVtYXMsIChzY2hlbWFDb25maWcsIG5hbWUpID0+IHtcbiAgICBsZXQgY29ubmVjdG9yID0gYXBwLmdldFNlcnZpY2Uoc2NoZW1hQ29uZmlnLmRhdGFTb3VyY2UpO1xuICAgIGlmICghY29ubmVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29ubmVjdG9yIHNlcnZpY2Ugbm90IGZvdW5kIGZvciBkYXRhIHNvdXJjZSBbJHtzY2hlbWFDb25maWcuZGF0YVNvdXJjZX1dIG9mIHNjaG1lYSBcIiR7bmFtZX1cIi5gKTtcbiAgICB9IFxuICAgIHJldHVybiBjb25uZWN0b3I7XG59KTtcblxuYXN5bmMgZnVuY3Rpb24gaW1wb3J0RGF0YUZpbGVzQnlMaXN0KG1pZ3JhdG9yLCBkYXRhU2V0UGF0aCwgZGF0YUxpc3RGaWxlKSB7XG4gICAgbGV0IGRhdGFMaXN0ID0gZnMucmVhZEZpbGVTeW5jKGRhdGFMaXN0RmlsZSkudG9TdHJpbmcoKS5tYXRjaCgvXi4rJC9nbSk7XG5cbiAgICBpZiAoIWRhdGFMaXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZWFjaEFzeW5jXyhkYXRhTGlzdCwgYXN5bmMgbGluZSA9PiB7XG4gICAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcblxuICAgICAgICBpZiAobGluZS5sZW5ndGggPiAwICYmIGxpbmVbMF0gIT09ICcjJykgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGRhdGFGaWxlID0gcGF0aC5qb2luKGRhdGFTZXRQYXRoLCBsaW5lKTtcbiAgICAgICAgICAgIGlmICghZnMuZXhpc3RzU3luYyhkYXRhRmlsZSkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYERhdGEgZmlsZSBcIiR7ZGF0YUZpbGV9XCIgbm90IGZvdW5kLmApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhd2FpdCBtaWdyYXRvci5sb2FkXyhkYXRhRmlsZSk7XG4gICAgICAgIH1cbiAgICB9KTsgXG59XG5cbmV4cG9ydHMuaW1wb3J0RGF0YUZpbGVzID0gYXN5bmMgZnVuY3Rpb24gKG1pZ3JhdG9yLCBmb2xkZXJOYW1lKSB7XG4gICAgbGV0IGRhdGFTZXRQYXRoID0gcGF0aC5qb2luKG1pZ3JhdG9yLmRiU2NyaXB0UGF0aCwgJ2RhdGEnLCBmb2xkZXJOYW1lKTtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGF0YVNldFBhdGgpKSByZXR1cm47XG5cbiAgICBsZXQgZGF0YUxpc3RGaWxlID0gcGF0aC5qb2luKGRhdGFTZXRQYXRoLCAnaW5kZXgubGlzdCcpO1xuXG4gICAgbGV0IHJ1bnRpbWVEYXRhU2V0UGF0aCwgc3RhZ2VEYXRhU2V0RmlsZSwgaW1wb3J0ZWQgPSBmYWxzZTsgICAgXG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuU1RBR0VfRU5WKSB7XG4gICAgICAgIHJ1bnRpbWVEYXRhU2V0UGF0aCA9IHBhdGguam9pbihkYXRhU2V0UGF0aCwgcHJvY2Vzcy5lbnYuU1RBR0VfRU5WKTsgICAgICAgIFxuICAgICAgICBzdGFnZURhdGFTZXRGaWxlID0gcGF0aC5qb2luKHJ1bnRpbWVEYXRhU2V0UGF0aCwgJ2luZGV4Lmxpc3QnKTtcbiAgICB9ICAgIFxuXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoZGF0YUxpc3RGaWxlKSkge1xuICAgICAgICBhd2FpdCBpbXBvcnREYXRhRmlsZXNCeUxpc3QobWlncmF0b3IsIGRhdGFTZXRQYXRoLCBkYXRhTGlzdEZpbGUpOyAgICAgIFxuICAgICAgICBpbXBvcnRlZCA9IHRydWU7ICBcbiAgICB9IGVsc2Uge1xuICAgICAgICBtaWdyYXRvci5hcHAubG9nKCd3YXJuJywgYERhdGFzZXQgaW5kZXggZmlsZSBcIiR7ZGF0YUxpc3RGaWxlfVwiIG5vdCBleGlzdC5gKVxuICAgIH1cbiAgICBcbiAgICBpZiAoc3RhZ2VEYXRhU2V0RmlsZSAmJiBmcy5leGlzdHNTeW5jKHN0YWdlRGF0YVNldEZpbGUpKSB7XG4gICAgICAgIGF3YWl0IGltcG9ydERhdGFGaWxlc0J5TGlzdChtaWdyYXRvciwgcnVudGltZURhdGFTZXRQYXRoLCBzdGFnZURhdGFTZXRGaWxlKTsgICAgXG4gICAgICAgIGltcG9ydGVkID0gdHJ1ZTsgICAgICBcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52LlNUQUdFX0VOVikge1xuICAgICAgICBtaWdyYXRvci5hcHAubG9nKGltcG9ydGVkID8gJ2luZm8nIDogJ3dhcm4nLCBgRGF0YXNldCBpbmRleCBmaWxlIG9mIFwiJHtwcm9jZXNzLmVudi5TVEFHRV9FTlZ9XCIgc3RhZ2UgZW52IFwiJHtzdGFnZURhdGFTZXRGaWxlfVwiIG5vdCBleGlzdC5gKVxuICAgIH1cbiAgICBcbiAgICBpZiAoIWltcG9ydGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRW50cnkgZmlsZSBvZiBkYXRhc2V0IFwiJHtmb2xkZXJOYW1lfVwiIG5vdCBmb3VuZC5gKTtcbiAgICB9ICAgIFxuIH0iXX0=