{"version":3,"file":"helpers.js","names":["path","require","_","eachAsync_","fs","exports","throwIfFileNotExist","name","filePath","existsSync","Error","getSchemaConnectors","app","schemas","mapValues","schemaConfig","connector","getService","dataSource","getDateNamedDir","baseDir","prefix","override","now","Date","folder","getFullYear","getMonth","getDate","outputDir","join","num","folder2","toString","importDataFilesByList","migrator","dataSetPath","dataListFile","ignoreDuplicate","dataList","readFileSync","match","line","trim","length","dataFile","load_","importDataFiles","folderName","dbScriptPath","runtimeDataSetPath","stageDataSetFile","imported","process","env","STAGE_ENV","log"],"sources":["../../src/utils/helpers.js"],"sourcesContent":["const path = require('path');\nconst { _, eachAsync_ } = require('@genx/july');\nconst { fs } = require('@genx/sys');\n\nexports.throwIfFileNotExist = (name, filePath) => {\n    if (!fs.existsSync(filePath)) {\n        throw new Error(`Path [${name}=\"${filePath}\"] not exist.`);\n    }\n}\n\nexports.getSchemaConnectors = (app, schemas) => _.mapValues(schemas, (schemaConfig, name) => {\n    let connector = app.getService(schemaConfig.dataSource);\n    if (!connector) {\n        throw new Error(`Connector service not found for data source [${schemaConfig.dataSource}] of schema \"${name}\".`);\n    } \n    return connector;\n});\n\n/**\n * Get default reverse output path.\n * @param {string} prefix \n * @param {bool} override \n * @returns {string} Output path of oolong generated files.\n */\nexports.getDateNamedDir = (baseDir, prefix, override) => {\n    let now = new Date();\n\n    (prefix == null) && (prefix = '');\n\n    let folder = `${prefix}${now.getFullYear()}-${now.getMonth()+1}-${now.getDate()}`;\n    let outputDir = path.join(baseDir, folder);\n\n    if (override) return outputDir;\n\n    let num = 1;\n\n    while (fs.existsSync(outputDir)) {\n        let folder2 = folder + '_' + (++num).toString();\n        outputDir = path.join(baseDir, folder2);\n    }\n\n    return outputDir;\n};\n\nasync function importDataFilesByList(migrator, dataSetPath, dataListFile, ignoreDuplicate) {\n    let dataList = fs.readFileSync(dataListFile).toString().match(/^.+$/gm);\n\n    if (!dataList) {\n        return;\n    }\n\n    return eachAsync_(dataList, async line => {\n        line = line.trim();\n\n        if (line.length > 0 && line[0] !== '#') {            \n            let dataFile = path.join(dataSetPath, line);\n            if (!fs.existsSync(dataFile)) {\n                throw new Error(`Data file \"${dataFile}\" not found.`);\n            }\n\n            await migrator.load_(dataFile, ignoreDuplicate);\n        }\n    }); \n}\n\nexports.importDataFiles = async function (migrator, folderName, ignoreDuplicate) {\n    let dataSetPath = path.join(migrator.dbScriptPath, 'data', folderName);\n    if (!fs.existsSync(dataSetPath)) return;\n\n    let dataListFile = path.join(dataSetPath, 'index.list');\n\n    let runtimeDataSetPath, stageDataSetFile, imported = false;    \n\n    if (process.env.STAGE_ENV) {\n        runtimeDataSetPath = path.join(dataSetPath, process.env.STAGE_ENV);        \n        stageDataSetFile = path.join(runtimeDataSetPath, 'index.list');\n    }    \n\n    if (fs.existsSync(dataListFile)) {\n        await importDataFilesByList(migrator, dataSetPath, dataListFile, ignoreDuplicate);      \n        imported = true;  \n    } else {\n        migrator.app.log('warn', `Dataset index file \"${dataListFile}\" not exist.`)\n    }\n    \n    if (stageDataSetFile && fs.existsSync(stageDataSetFile)) {\n        await importDataFilesByList(migrator, runtimeDataSetPath, stageDataSetFile, ignoreDuplicate);    \n        imported = true;      \n    } else if (process.env.STAGE_ENV) {\n        migrator.app.log(imported ? 'info' : 'warn', `Dataset index file of \"${process.env.STAGE_ENV}\" stage env \"${stageDataSetFile}\" not exist.`)\n    }\n    \n    if (!imported) {\n        throw new Error(`Entry file of dataset \"${folderName}\" not found.`);\n    }    \n }"],"mappings":"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"}