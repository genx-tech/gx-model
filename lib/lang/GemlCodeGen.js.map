{"version":3,"file":"GemlCodeGen.js","names":["_","quote","require","generateDisplayName","isNothing","isQuotedWith","KW_NAMESPACE","KW_SCHEMA","KW_ENTITIES","KW_ENTITY_AS_ALIAS","KW_TYPE_DEFINE","KW_ENTITY","KW_CODE","KW_COMMENT","KW_WITH_FEATURE","KW_FIELDS","KW_ASSOCIATIONS","KW_KEY","KW_INDEXES","Types","GemlTypes","GemlCodeGen","transform","json","options","codeGen","generate","constructor","generateObject","content","appendLine","line","arguments","length","join","indented","repeat","indent","dedent","post","obj","forOwn","v","k","generateMethod","Error","generate_namespace","namespaces","pre","Array","isArray","forEach","ns","generate_schema","schema","schemaInfo","name","entities","entityEntry","alias","entity","generate_type","types","isPlainObject","isEmpty","type","lineInfo","_translateType","generate_field_comment","entityName","colName","colNameFullSnake","trimStart","snakeCase","colNameFirstWord","colNameRest","split","result","entityNameFullSnake","trim","endsWith","generate_entity","enityName","source","comment","hasAutoId","features","feature","args","map","a","JSON","stringify","fields","field","assert","push","Builtin","has","associations","srcField","destEntity","connectedBy","key","indexes","i","indexInfo","unique","extraTypeInfo","omit","castArray","_translateArgs","modifiers","_translatePipedValue","value","oolType","Lang","VALIDATOR","_translateModifier","PROCESSOR","ACTIVATOR","f","r","_translateArg","hasOwnProperty","pipeline","module","exports"],"sources":["../../src/lang/GemlCodeGen.js"],"sourcesContent":["\"use strict\";\n\nconst { _, quote } = require('@genx/july');\nconst { generateDisplayName } = require('./GemlUtils');\nconst { isNothing, isQuotedWith } = require('../utils/lang');\n\nconst KW_NAMESPACE = 'import';\nconst KW_SCHEMA = 'schema';\nconst KW_ENTITIES = 'entities';\nconst KW_ENTITY_AS_ALIAS = 'as';\nconst KW_TYPE_DEFINE = 'type';\nconst KW_ENTITY = 'entity';\nconst KW_CODE = 'code';\nconst KW_COMMENT = '--';\nconst KW_WITH_FEATURE = 'with';\nconst KW_FIELDS = 'has';\nconst KW_ASSOCIATIONS = 'associations';\nconst KW_KEY = 'key';\nconst KW_INDEXES = 'index';\n\nconst { Types } = require('@genx/data');\nconst GemlTypes = require('./GemlTypes');\n\nclass GemlCodeGen {\n    static transform(json, options) {\n        let codeGen = new GemlCodeGen(options);\n        return codeGen.generate(json);\n    }\n\n    indented = 0;\n    content = '';\n\n    constructor(options) {\n        this.options = options;\n    }\n\n    generate(json) {\n        this.generateObject(json);\n\n        return this.content;\n    }\n\n    appendLine(line) {\n        if (line) {\n            if (arguments.length > 1) {\n                line = [ ...arguments].join(' ');\n            }\n\n            this.content += (this.indented > 0 ? _.repeat(' ', this.indented) : '') + line + '\\n';\n        } else {\n            this.content += '\\n';\n        }\n        return this;\n    }\n\n    indent() {\n        this.indented += 2;\n        return this;\n    }\n\n    dedent() {\n        this.indented -= 2;\n        return this;\n        post: this.indented >= 0, 'Unexpected indented state.';\n    }\n\n    generateObject(obj) {\n        _.forOwn(obj, (v,k) => {\n            let generateMethod = 'generate_' + k;\n\n            if (generateMethod in this) {\n                return this[generateMethod](v);\n            }\n\n            throw new Error('to be implemented, object: ' + k);\n        });\n    }\n\n    generate_namespace(namespaces) {\n        pre: {\n            Array.isArray(namespaces), 'Invalid namespaces.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        if (namespaces.length > 0) {\n            this.appendLine(KW_NAMESPACE).indent();\n\n            namespaces.forEach(ns => {\n                this.appendLine(quote(ns, \"'\"));\n            });\n\n            this.dedent().appendLine();\n        }\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_schema(schema) {\n        pre: {            \n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        _.forOwn(schema, (schemaInfo, name) => {\n            this.appendLine(KW_SCHEMA, quote(name, \"'\")).indent();\n\n            if (schemaInfo.entities) {\n                this.appendLine(KW_ENTITIES).indent();\n\n                schemaInfo.entities.forEach(entityEntry => {\n                    if (entityEntry.alias) {\n                        this.appendLine(entityEntry.entity, KW_ENTITY_AS_ALIAS, entityEntry.alias);\n                    } else {\n                        this.appendLine(entityEntry.entity);\n                    }\n                });\n\n                this.dedent().appendLine();\n            }\n\n            this.dedent();\n        });        \n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_type(types) {\n        pre: {\n            _.isPlainObject(types), 'Invalid types.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        if (!_.isEmpty(types)) {\n            this.appendLine(KW_TYPE_DEFINE).indent();\n\n            _.forOwn(types, (type, name) => {\n                let lineInfo = [ name, ':', type.type ];\n\n                this._translateType(type, lineInfo);\n\n                this.appendLine(...lineInfo);\n            });\n\n            this.dedent().appendLine();\n        }\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    generate_field_comment(entityName, colName) {\n        let colNameFullSnake = _.trimStart(_.snakeCase(colName), '_');\n        let  [ colNameFirstWord, colNameRest ] = colNameFullSnake.split('_', 2);\n\n        let result;\n\n        let entityNameFullSnake = _.trim(_.snakeCase(entityName), '_');\n        if (_.endsWith(entityNameFullSnake, colNameFirstWord)) {\n            result = entityNameFullSnake + '_' + colNameRest;\n        } else {\n            result = entityNameFullSnake + '_' + colNameFullSnake;\n        }\n\n        return generateDisplayName(result);\n    }\n\n    generate_entity(entities) {\n        pre: {\n            _.isPlainObject(entities), 'Invalid entities.';\n            this.indented == 0, 'Unexpected indented state.';\n        }\n\n        _.forOwn(entities, (entity, enityName) => {\n            this.appendLine(KW_ENTITY, enityName).indent();\n\n            if (entity.source) {\n                this.appendLine(KW_CODE, quote(entity.source));\n            }\n\n            this.appendLine(KW_COMMENT, quote(entity.comment || generateDisplayName(enityName)));\n\n            let hasAutoId = false;\n\n            if (!_.isEmpty(entity.features)) {\n                this.appendLine(KW_WITH_FEATURE).indent();\n\n                entity.features.forEach(feature => {\n                    if (typeof feature === 'string') {\n                        feature = { name: feature };\n                    }\n\n                    if (feature.name === 'autoId') {\n                        hasAutoId = true;\n                    }\n\n                    if (feature.args) {\n                        this.appendLine(feature.name + '(' + feature.args.map(a => JSON.stringify(a)).join(', ') + ')');\n                    } else {\n                        this.appendLine(feature.name);\n                    }\n                });\n\n                this.dedent();\n            }\n\n            if (!_.isEmpty(entity.fields)) {\n                this.appendLine().appendLine(KW_FIELDS).indent();\n\n                _.forOwn(entity.fields, (field, name) => {\n                    assert: field.type;                    \n\n                    let lineInfo = [];\n                    lineInfo.push(Types.Builtin.has(name) ? quote(name) : name);                    \n                    \n                    if (field.type !== name) {\n                        lineInfo.push(':');\n                        lineInfo.push(field.type);\n                    }                  \n\n                    this._translateType(field, lineInfo);\n\n                    lineInfo.push(KW_COMMENT + ' ' + quote(field.comment || this.generate_field_comment(enityName, name)));\n\n                    this.appendLine(...lineInfo);\n                });\n\n                this.dedent();\n            }\n\n            if (!_.isEmpty(entity.associations)) {\n                this.appendLine().appendLine(KW_ASSOCIATIONS).indent();\n\n                entity.associations.forEach(({ type, srcField, destEntity, connectedBy }) => {\n                    if (srcField) {\n                        this.appendLine(type, quote(destEntity, \"'\"), 'as', quote(srcField, \"'\"));\n                    } else if (connectedBy) {\n                        this.appendLine(type, quote(destEntity, \"'\"), 'connectedBy', quote(connectedBy, \"'\"));\n                    } else {\n                        this.appendLine(type, quote(destEntity, \"'\"));\n                    }                    \n                });\n\n                this.dedent();\n            }\n\n            if (entity.key && !hasAutoId) {\n                let key = (Array.isArray(entity.key) && entity.key.length === 1) ? entity.key[0] : entity.key;\n                if (Array.isArray(key)) {\n                    this.appendLine().appendLine(KW_KEY, '[ ' + key.join(', ') + ' ]');\n                } else {\n                    this.appendLine().appendLine(KW_KEY, key);\n                }                \n            }\n\n            if (!_.isEmpty(entity.indexes)) {\n                this.appendLine().appendLine(KW_INDEXES).indent();\n\n                entity.indexes.forEach(i => {\n                    let indexInfo = [];\n\n                    if (Array.isArray(i.fields)) {\n                        indexInfo.push('[' + i.fields.join(', ') + ']');\n                    } else {\n                        indexInfo.push(i.fields);\n                    }\n\n                    if (i.unique) {\n                        indexInfo.push('is');\n                        indexInfo.push('unique');\n                    }\n\n                    this.appendLine(...indexInfo);\n                });\n\n                this.dedent();\n            }\n\n            this.dedent();\n        });\n\n        post: this.indented == 0, 'Unexpected indented state.';\n    }\n\n    _translateType(field, lineInfo) {\n        let extraTypeInfo = _.omit(field, ['type', 'modifiers', 'name']);\n        //let typeMeta = Types[field.type];\n        _.forOwn(extraTypeInfo, (v, k) => {\n            //if (!typeMeta.qualifiers.includes(k)) {\n            //    throw new Error(`\"${k}\" is not a valid qualifier for type \"${field.type}\".`);\n            //}\n            if (k === 'comment') return;\n\n            if (typeof v === 'boolean' || isNothing(v)) {\n                if (v) {\n                    lineInfo.push(k);\n                }\n            } else {\n                v = _.castArray(v);\n                lineInfo.push(k + '(' + this._translateArgs(v) + ')');\n            }\n        });\n\n        if (field.modifiers) {\n            this._translatePipedValue(lineInfo, field);\n        }        \n    }\n\n    _translatePipedValue(lineInfo, value) {        \n        if (value.modifiers) {\n            value.modifiers.forEach(v => {\n                switch (v.oolType) {\n                    case GemlTypes.Lang.VALIDATOR:\n                    lineInfo.push('|~' + this._translateModifier(v));\n                    break;\n\n                    case GemlTypes.Lang.PROCESSOR:\n                    lineInfo.push('|>' + this._translateModifier(v));\n                    break;\n\n                    case GemlTypes.Lang.ACTIVATOR:\n                    lineInfo.push('|=' + this._translateModifier(v));\n                    break;\n\n                    default:\n                        throw new Error(`Unknown modifier type: \"${v.oolType}\"!`);\n                }                                \n            });\n        } \n    }\n\n    _translateModifier(f) {\n        let r = f.name;\n\n        if (!_.isEmpty(f.args)) {\n            r += '(';\n\n            r += this._translateArgs(f.args);\n\n            r += ')';\n        }\n\n        return r;\n    }\n\n    _translateArgs(args) {\n        return args.map(a => this._translateArg(a)).join(', ');\n    }\n\n    _translateArg(a) {\n        if (_.isPlainObject(a) && a.hasOwnProperty('oolType')) {\n            if (a.oolType === 'PipedValue') {\n                let pipeline = [ this._translateArg(a.value) ];\n\n                if (a.modifiers) {\n                    this._translatePipedValue(pipeline, a);\n                }\n\n                return pipeline.join(' ');\n            } else if (a.oolType === 'ObjectReference') {\n                return '@' + a.name;\n            } else {\n                throw new Error('Not supported oolType: ' + a.oolType);\n            }\n        } \n\n        if (typeof a === 'string' && isQuotedWith(a, '/')) return a;\n        \n        return JSON.stringify(a);\n    }\n}\n\nmodule.exports = GemlCodeGen;"],"mappings":"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"}