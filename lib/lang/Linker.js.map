{"version":3,"sources":["../../src/lang/Linker.js"],"names":["path","require","_","fs","glob","Types","Geml","GemlParser","parser","GemlTypes","Entity","Schema","View","Dataset","ELEMENT_CLASS_MAP","Element","ENTITY","VIEW","DATASET","GEML_SOURCE_EXT","BUILTINS_PATH","resolve","__dirname","Linker","getGemlFiles","sourceDir","useJsonSource","recursive","pattern","sync","join","nodir","constructor","app","context","sourcePath","gemlPath","saveIntermediate","schemas","_gemlModules","_elementsCache","_mapOfReferenceToModuleId","Map","log","args","isModuleLoaded","moduleId","getModuleById","link","entryFileName","entryModule","loadModule","Error","isEmpty","schema","forOwn","schemaInfo","schemaName","hasOwnProperty","jsFile","writeFileSync","JSON","stringify","toJSON","modulePath","id","getModuleIdByPath","existsSync","undefined","gemlModule","_compile","getTypeInfo","name","location","type","trackBackType","info","Builtin","has","baseInfo","loadElement","TYPE","ownerModule","rootTypeInfo","derivedInfo","cloneDeep","omit","modifiers","subClass","push","translateOolValue","value","isPlainObject","oolType","Lang","CONST_REF","refedValue","CONST","uniqueId","getElementUniqueId","get","mapValues","v","Array","isArray","map","isBuiltinEntity","startsWith","relative","refererModule","elementType","elementName","loadEntity","throwOnMissing","entity","fields","associations","loadType","loadDataset","loadView","targetModule","index","findLastIndex","namespace","elementSelfId","set","elementInfo","element","ElementClass","oolFile","endsWith","substr","length","ool","searchExt","readJsonSync","parse","readFileSync","error","baseName","basename","currentPath","dirname","expandNs","namespaces","ns","stats","statSync","isFile","isDirectory","files","readdirSync","forEach","f","p","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst path = require('path');\nconst { _ } = require('@genx/july');\nconst { fs, glob } = require('@genx/sys');\nconst { Types } = require('@genx/data');\n\nconst Geml = require('./grammar/geml');\nconst GemlParser = Geml.parser;\nconst GemlTypes = require('./GemlTypes');\nconst Entity = require('./Entity');\nconst Schema = require('./Schema');\nconst View = require('./View');\nconst Dataset = require('./Dataset');\n\nconst ELEMENT_CLASS_MAP = {\n    [GemlTypes.Element.ENTITY]: Entity,\n    [GemlTypes.Element.VIEW]: View,\n    [GemlTypes.Element.DATASET]: Dataset,\n};\n\nconst GEML_SOURCE_EXT = '.geml';\nconst BUILTINS_PATH = path.resolve(__dirname, 'builtins');\n\n/**\n * Linker of geml\n * @class GemlLinker\n */\nclass Linker {\n    static getGemlFiles(sourceDir, useJsonSource, recursive) {\n        let pattern = '*' + GEML_SOURCE_EXT;\n\n        if (useJsonSource) {\n            pattern += '.json';\n        }\n\n        if (recursive) {\n            pattern = '**/' + pattern;\n        }\n\n        return glob.sync(path.join(sourceDir, pattern), {nodir: true});\n    }\n\n    /**\n     * @param {ServiceContainer} app \n     * @param {object} context\n     * @property {string} context.gemlPath - Geml source files path     \n     * @property {bool} [context.useJsonSource=false] - Use .json intermediate source file instead of .ool\n     * @property {bool} [context.saveIntermediate=false] - Save intermediate source file while linking\n     */\n    constructor(app, context) {\n        /**\n         * App\n         * @member {ServiceContainer}\n         */\n        this.app = app;\n\n        /**\n         * Geml source files path\n         * @member {string}\n         */\n        this.sourcePath = context.gemlPath;\n\n        /**\n         * Use json or ols\n         * @member {bool}\n         */\n        this.useJsonSource = context.useJsonSource;\n\n        /**\n         * Save intermediate files\n         * @member {bool}\n         */\n        this.saveIntermediate = context.saveIntermediate;\n\n        /**\n         * Linked schemas\n         * @member {object.<string, Schema>}\n         */\n        this.schemas = {};\n\n        /**\n         * Parsed oolong files, path => module\n         * @member {object}\n         * @private\n         */\n        this._gemlModules = {};\n\n        /**\n         * Element cache, map of <referenceId, element> and <selfId, element>\n         * @member {object} \n         * @private\n         */\n        this._elementsCache = {};\n\n        /**\n         * Map of <referenceId, moduleId>\n         * @member {object}\n         * @private\n         */\n        this._mapOfReferenceToModuleId = new Map();\n    }\n\n    /**\n     * Write log\n     * @param {string} level\n     * @param {string} message\n     * @param {object} [data]\n     */\n    log(...args) {\n        this.app.log(...args);\n    }\n\n    /**\n     * Check whether a module is loaded\n     * @param {string} moduleId\n     * @returns {boolean}\n     */\n    isModuleLoaded(moduleId) {\n        return (moduleId in this._gemlModules);\n    }\n\n    /**\n     * Get a loaded oolone module\n     * @param {string} moduleId\n     * @returns {object}\n     */\n    getModuleById(moduleId) {\n        return this._gemlModules[moduleId];\n    }\n\n    /**\n     * Start linking oolong files\n     * @param {string} entryFileName\n     */\n    link(entryFileName) {\n        //compile entry file        \n        let entryModule = this.loadModule(entryFileName);\n\n        if (!entryModule) {\n            throw new Error(`Cannot resolve file \"${entryFileName}\".`);\n        }\n\n        if (_.isEmpty(entryModule.schema)) {\n            throw new Error('No schema defined in entry file.');\n        }\n\n        _.forOwn(entryModule.schema, (schemaInfo, schemaName) => {            \n            let schema = new Schema(this, schemaName, entryModule, schemaInfo);\n            schema.link();\n\n            if (this.schemas.hasOwnProperty(schemaName)) {\n                throw new Error(`Duplicate schema: \"${schemaName}\".`);\n            }\n            this.schemas[schemaName] = schema;\n\n            if (this.saveIntermediate) {\n                let jsFile = path.resolve(this.sourcePath, entryFileName + '-linked.json');\n                fs.writeFileSync(jsFile, JSON.stringify(schema.toJSON(), null, 4));\n            }\n        });     \n    }\n\n    /**\n     * Load a oolong module, return undefined if not exist\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    loadModule(modulePath) {        \n        modulePath = path.resolve(this.sourcePath, modulePath);\n\n        let id = this.getModuleIdByPath(modulePath);\n\n        if (this.isModuleLoaded(id)) {\n            return this.getModuleById(id);\n        }\n\n        if (!fs.existsSync(modulePath)) {\n            return undefined;\n        }       \n\n        let gemlModule = this._compile(modulePath);\n\n        return (this._gemlModules[id] = gemlModule);\n    }\n\n    getTypeInfo(name, location) {\n        const gemlModule = this.getModuleById(location);\n        return gemlModule.type[name];\n    }\n\n    /**\n     * Track back the type derived chain.\n     * @param {object} gemlModule\n     * @param {object} info\n     * @returns {Array} [ derivedInfo, baseInfo ]\n     */\n    trackBackType(gemlModule, info) {\n        if (Types.Builtin.has(info.type)) {\n            return [ info ];\n        }\n\n        let baseInfo = this.loadElement(gemlModule, GemlTypes.Element.TYPE, info.type, true);\n\n        if (!Types.Builtin.has(baseInfo.type)) {\n            //the base type is not a builtin type\n            let ownerModule = baseInfo.gemlModule;  \n\n            let [ rootTypeInfo ] = this.trackBackType(ownerModule, baseInfo);\n            ownerModule.type[baseInfo.type] = rootTypeInfo;\n            baseInfo = rootTypeInfo;\n        }\n\n        let derivedInfo = { ..._.cloneDeep(_.omit(baseInfo, ['gemlModule', 'modifiers'])), ..._.omit(info, ['gemlModule', 'type', 'modifiers'])};\n        if (baseInfo.modifiers || info.modifiers) {\n            derivedInfo.modifiers = [ ...(baseInfo.modifiers || []), ...(info.modifiers || []) ];\n        }\n\n        if (!derivedInfo.subClass) {\n            derivedInfo.subClass = [];\n        }\n        derivedInfo.subClass.push(info.type);\n        return [ derivedInfo, baseInfo ];\n    }    \n    \n    /**\n     * Translate an value by inferring all the references.\n     * @param {object} gemlModule \n     * @param {*} value \n     * @returns {*} - Translated value.\n     */\n    translateOolValue(gemlModule, value) {\n        if (_.isPlainObject(value)) {\n            if (value.oolType === GemlTypes.Lang.CONST_REF) {                \n                let refedValue = this.loadElement(gemlModule, GemlTypes.Element.CONST, value.name, true);\n                let uniqueId = this.getElementUniqueId(gemlModule, GemlTypes.Element.CONST, value.name);\n                let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId.get(uniqueId));\n                return this.translateOolValue(ownerModule, refedValue);\n            } else if (value.oolType) {\n                throw new Error(`todo: translateOolValue with type: ${value.oolType}`)\n            }\n\n            return _.mapValues(value, v => this.translateOolValue(gemlModule, v));\n        }\n\n        if (Array.isArray(value)) {\n            return value.map(v => this.translateOolValue(gemlModule, v));\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the unique module id by source file path.\n     * @param {string} modulePath - The path of an oolong source file.\n     * @returns {string} - The module id.\n     */\n    getModuleIdByPath(modulePath) {        \n        let isBuiltinEntity = _.startsWith(modulePath, BUILTINS_PATH);      \n        return isBuiltinEntity ? \n            path.relative(BUILTINS_PATH, modulePath) : \n            './' + path.relative(this.sourcePath, modulePath);  \n    }\n\n    /**\n     * Get the unique name of an element.\n     * @param {object} refererModule \n     * @param {string} elementType \n     * @param {string} elementName \n     * @returns {string} - The unique name of an element.\n     */\n    getElementUniqueId(refererModule, elementType, elementName) {\n        return elementType + ':' + elementName + '<-' + refererModule.id;\n    }\n\n    loadEntity(refererModule, elementName, throwOnMissing = true) {\n        let entity = this.loadElement(refererModule, GemlTypes.Element.ENTITY, elementName, throwOnMissing);\n\n        if (entity && _.isEmpty(entity.fields) && _.isEmpty(entity.info.associations)) {\n            throw new Error(`Entity \"${elementName}\" has no any fields defined.`);\n        }\n\n        return entity;\n    }\n\n    loadType(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.TYPE, elementName, throwOnMissing);\n    }\n\n    loadDataset(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.DATASET, elementName, throwOnMissing);\n    }\n\n    loadView(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.VIEW, elementName, throwOnMissing);\n    }\n\n    /**\n     * Load an element based on the namespace chain.\n     * @param {object} refererModule \n     * @param {string} elementType \n     * @param {string} elementName \n     */\n    loadElement(refererModule, elementType, elementName, throwOnMissing) {\n        // the element id with type, should be unique among the whole schema\n        let uniqueId = this.getElementUniqueId(refererModule, elementType, elementName);\n\n        // the element id + referer\n        if (uniqueId in this._elementsCache) {\n            return this._elementsCache[uniqueId];\n        }\n\n        let targetModule;        \n\n        if (elementType in refererModule && elementName in refererModule[elementType]) {\n            // see if it exists in the same module                        \n            targetModule = refererModule;\n        } else {\n            // search reversely by the namespaces\n            //this.log('verbose', `Searching ${elementType} \"${elementName}\" from \"${refererModule.id}\" ...`);\n\n            let index = _.findLastIndex(refererModule.namespace, modulePath => {\n                //this.log('debug', `Looking for ${elementType} \"${elementName}\" in \"${modulePath}\" ...`);\n\n                targetModule = this.loadModule(modulePath);\n\n                return targetModule && targetModule[elementType] && (elementName in targetModule[elementType]);\n            });\n\n            if (index === -1) {   \n                if (throwOnMissing) {             \n                    throw new Error(`${elementType} \"${elementName}\" not found in imported namespaces. Referer: ${refererModule.id}`);\n                }\n\n                return undefined;\n            }\n        }\n\n        let elementSelfId = elementType + ':' + elementName + '@' + targetModule.id;\n        if (elementSelfId in this._elementsCache) {\n            // already initialized            \n            return (this._elementsCache[uniqueId] = this._elementsCache[elementSelfId]);\n        }\n       \n        this._mapOfReferenceToModuleId.set(uniqueId, targetModule.id);\n\n        // retrieve the compiled info\n        let elementInfo = targetModule[elementType][elementName];\n        let element;\n\n        if (elementType in ELEMENT_CLASS_MAP) {\n            // element need linking\n            let ElementClass = ELEMENT_CLASS_MAP[elementType];            \n\n            element = new ElementClass(this, elementName, targetModule, elementInfo);   \n            element.link();         \n        } else {\n            if (elementType === GemlTypes.Element.TYPE) {\n                element = {\n                    ...elementInfo,\n                    gemlModule: targetModule\n                };\n            } else {\n                element = elementInfo;\n            }            \n        }\n\n        this._elementsCache[elementSelfId] = element;\n        this._elementsCache[uniqueId] = element;\n        \n        return element;\n    }\n\n    _compile(oolFile) {\n        let jsFile;\n        \n        if (oolFile.endsWith('.json')) {\n            jsFile = oolFile;\n            oolFile = oolFile.substr(0, oolFile.length - 5);\n        } else {\n            jsFile = oolFile + '.json';\n        }                \n        \n        let ool, searchExt;\n\n        if (this.useJsonSource) {\n            if (!fs.existsSync(jsFile)) {\n                throw new Error(`\"useJsonSource\" enabeld but json file \"${jsFile}\" not found.`);\n            }\n\n            ool = fs.readJsonSync(jsFile);\n            searchExt = GEML_SOURCE_EXT + '.json';\n        } else {\n\n            //this.log('debug', 'Compiling ' + oolFile + ' ...');        \n            \n            try {\n                ool = GemlParser.parse(fs.readFileSync(oolFile, 'utf8'));\n            } catch (error) {\n                throw error;\n                //throw new Error(`Failed to compile \"${ oolFile }\".\\n${ error.message || error }`)\n            }\n\n            if (!ool) {\n                throw new Error('Unknown error occurred while compiling.');\n            }       \n            \n            searchExt = GEML_SOURCE_EXT;\n        }\n\n        let baseName = path.basename(oolFile, GEML_SOURCE_EXT);\n\n        let namespace = [];\n\n        let currentPath = path.dirname(oolFile);\n\n        /**\n         * \n         * @param {*} namespaces - Searching path\n         * @param {string} ns - Import line\n         * @param {*} recursive \n         */\n        function expandNs(namespaces, ns, recursive) {\n            let stats = fs.statSync(ns);\n\n            //import '/path/user.ool'\n            if (stats.isFile() && ns.endsWith(searchExt)) {\n                namespaces.push(ns);\n                return;\n            }\n\n            if (stats.isDirectory() && recursive) {\n                //resursive expand sub-directory\n                let files = fs.readdirSync(ns);\n                files.forEach(f => expandNs(namespaces, path.join(ns, f), true));\n            }\n        }\n\n        if (ool.namespace) {\n            ool.namespace.forEach(ns => {\n                let p;\n                \n                if (ns.startsWith('<builtins>/')) {\n                    ns = path.join(BUILTINS_PATH, ns.substr(11));   \n                } else if (ns.startsWith('<source>/')) {\n                    ns = path.join(this.sourcePath, ns.substr(9));   \n                }               \n\n                if (ns.endsWith('/*')) {\n                    p = path.resolve(currentPath, ns.substr(0, ns.length - 2));\n                    let files = fs.readdirSync(p);\n                    files.forEach(f => expandNs(namespace, path.join(p, f), false));\n                } else if (ns.endsWith('/**')) {\n                    p = path.resolve(currentPath, ns.substr(0, ns.length - 3));\n                    let files = fs.readdirSync(p);\n                    files.forEach(f => expandNs(namespace, path.join(p, f), true));\n                } else {\n                    namespace.push(path.resolve(currentPath, _.endsWith(ns, GEML_SOURCE_EXT) ? ns : ns + GEML_SOURCE_EXT));\n                }\n            });\n        }\n\n        ool.namespace = namespace;\n\n        ool.id = this.getModuleIdByPath(oolFile);        \n        ool.name = baseName;       \n        \n        if (!this.useJsonSource && this.saveIntermediate) {                 \n            fs.writeFileSync(jsFile, JSON.stringify(ool, null, 4));\n        }\n\n        return ool;\n    }\n}\n\nmodule.exports = Linker;"],"file":"Linker.js"}