{"version":3,"file":"Linker.js","names":["path","require","_","fs","glob","Types","Geml","GemlParser","parser","GemlTypes","Entity","Schema","View","Dataset","ELEMENT_CLASS_MAP","Element","ENTITY","VIEW","DATASET","GEML_SOURCE_EXT","BUILTINS_PATH","resolve","__dirname","Linker","getGemlFiles","sourceDir","useJsonSource","recursive","pattern","sync","join","nodir","buildSchemaObjects","app","context","schemaObjects","schemaFiles","gemlPath","forEach","schemaFile","linker","link","schemas","schemaObject","schemaName","Error","constructor","sourcePath","saveIntermediate","dependencies","_gemlModules","_elementsCache","_mapOfReferenceToModuleId","log","args","isModuleLoaded","moduleId","getModuleById","entryFileName","entryModule","loadModule","isEmpty","schema","overrides","entities","customizeEntities","Set","map","entityItem","entity","forOwn","schemaInfo","jsFile","writeFileSync","JSON","stringify","toJSON","modulePath","packageName","id","getModuleIdByPath","existsSync","undefined","gemlModule","_compile","getTypeInfo","name","location","type","trackBackType","info","Builtin","has","baseInfo","loadElement","TYPE","backupBaseInfo","ownerModule","rootTypeInfo","derivedInfo","cloneDeep","omit","modifiers","subClass","push","translateOolValue","value","isPlainObject","oolType","Lang","CONST_REF","refedValue","CONST","uniqueId","getElementUniqueId","mapValues","v","Array","isArray","isBuiltinEntity","startsWith","relative","refererModule","elementType","elementName","loadEntity","throwOnMissing","loadType","loadDataset","loadView","targetModule","index","findLastIndex","namespace","elementSelfId","elementInfo","element","overrideElement","ENTITY_OVERRIDE","overrideEntityMeta","ElementClass","oolFile","endsWith","substr","length","ool","searchExt","readJsonSync","parse","readFileSync","error","message","baseName","basename","currentPath","dirname","expandNs","namespaces","ns","stats","statSync","isFile","isDirectory","files","readdirSync","f","p","packageSep","indexOf","substring","pkgPath","module","exports"],"sources":["../../src/lang/Linker.js"],"sourcesContent":["\"use strict\";\n\nconst path = require(\"path\");\nconst { _ } = require(\"@genx/july\");\nconst { fs, glob } = require(\"@genx/sys\");\nconst { Types } = require(\"@genx/data\");\n\nconst Geml = require(\"./grammar/geml\");\nconst GemlParser = Geml.parser;\nconst GemlTypes = require(\"./GemlTypes\");\nconst Entity = require(\"./Entity\");\nconst Schema = require(\"./Schema\");\nconst View = require(\"./View\");\nconst Dataset = require(\"./Dataset\");\n\nconst ELEMENT_CLASS_MAP = {\n    [GemlTypes.Element.ENTITY]: Entity,\n    [GemlTypes.Element.VIEW]: View,\n    [GemlTypes.Element.DATASET]: Dataset,\n};\n\nconst GEML_SOURCE_EXT = \".geml\";\nconst BUILTINS_PATH = path.resolve(__dirname, \"builtins\");\n\n/**\n * Linker of geml\n * @class GemlLinker\n */\nclass Linker {\n    /**\n     * Get geml files\n     * @param {string} sourceDir\n     * @param {boolean} [useJsonSource]\n     * @param {boolean} [recursive]\n     * @returns {array} geml files\n     */\n    static getGemlFiles(sourceDir, useJsonSource, recursive) {\n        let pattern = \"*\" + GEML_SOURCE_EXT;\n\n        if (useJsonSource) {\n            pattern += \".json\";\n        }\n\n        if (recursive) {\n            pattern = \"**/\" + pattern;\n        }\n\n        return glob.sync(path.join(sourceDir, pattern), { nodir: true });\n    }\n\n    /**\n     * Compile and link geml files into schema objects\n     * @param {App} app\n     * @param {object} context\n     * @returns {object} map of schema name to object\n     */\n    static buildSchemaObjects(app, context) {\n        const schemaObjects = {};\n        const schemaFiles = Linker.getGemlFiles(context.gemlPath, context.useJsonSource);\n        schemaFiles.forEach((schemaFile) => {\n            const linker = new Linker(app, context);\n            linker.link(schemaFile);\n\n            _.forEach(linker.schemas, async (schemaObject, schemaName) => {\n                if (schemaObjects[schemaName]) {\n                    throw new Error(`Duplicate schema found: \"${schemaName}\".`);\n                }\n\n                schemaObjects[schemaName] = schemaObject;\n            });\n        });\n\n        return schemaObjects;\n    }\n\n    /**\n     * @param {ServiceContainer} app\n     * @param {object} context\n     * @property {string} context.gemlPath - Geml source files path\n     * @property {bool} [context.useJsonSource=false] - Use .json intermediate source file instead of .ool\n     * @property {bool} [context.saveIntermediate=false] - Save intermediate source file while linking\n     */\n    constructor(app, context) {\n        /**\n         * App\n         * @member {ServiceContainer}\n         */\n        this.app = app;\n\n        /**\n         * Geml source files path\n         * @member {string}\n         */\n        this.sourcePath = context.gemlPath;\n\n        /**\n         * Use json or ols\n         * @member {bool}\n         */\n        this.useJsonSource = context.useJsonSource;\n\n        /**\n         * Save intermediate files\n         * @member {bool}\n         */\n        this.saveIntermediate = context.saveIntermediate;\n\n        /**\n         * Linked schemas\n         * @member {object.<string, Schema>}\n         */\n        this.schemas = {};\n\n        /**\n         * Dependent packages\n         * @member {object.<string, string>}\n         */\n        this.dependencies = context.dependencies ?? {};\n\n        /**\n         * Parsed oolong files, path => module\n         * @member {object}\n         * @private\n         */\n        this._gemlModules = {};\n\n        /**\n         * Element cache, map of <referenceId, element> and <selfId, element>\n         * @member {object}\n         * @private\n         */\n        this._elementsCache = {};\n\n        /**\n         * Map of <referenceId, moduleId>\n         * @member {object}\n         * @private\n         */\n        this._mapOfReferenceToModuleId = {};\n\n        //this.entryModule\n        //this.customizeEntities\n    }\n\n    /**\n     * Write log\n     * @param {string} level\n     * @param {string} message\n     * @param {object} [data]\n     */\n    log(...args) {\n        this.app.log(...args);\n    }\n\n    /**\n     * Check whether a module is loaded\n     * @param {string} moduleId\n     * @returns {boolean}\n     */\n    isModuleLoaded(moduleId) {\n        return moduleId in this._gemlModules;\n    }\n\n    /**\n     * Get a loaded oolone module\n     * @param {string} moduleId\n     * @returns {object}\n     */\n    getModuleById(moduleId) {\n        return this._gemlModules[moduleId];\n    }\n\n    /**\n     * Start linking oolong files\n     * @param {string} entryFileName\n     */\n    link(entryFileName) {\n        // compile entry file\n        this.entryModule = this.loadModule(entryFileName);\n\n        if (!this.entryModule) {\n            throw new Error(`Cannot resolve file \"${entryFileName}\".`);\n        }\n\n        if (_.isEmpty(this.entryModule.schema)) {\n            throw new Error(\"No schema defined in entry file.\");\n        }\n\n        if (this.entryModule.overrides) {\n            if (this.entryModule.overrides.entities) {\n                this.customizeEntities = new Set(\n                    this.entryModule.overrides.entities.map((entityItem) => entityItem.entity)\n                );\n            }\n        }\n\n        // compile schemas\n        _.forOwn(this.entryModule.schema, (schemaInfo, schemaName) => {\n            let schema = new Schema(this, schemaName, schemaInfo);\n            schema.link();\n\n            this.schemas[schemaName] = schema;\n\n            if (this.saveIntermediate) {\n                let jsFile = path.resolve(this.sourcePath, entryFileName + \"-linked.json\");\n                fs.writeFileSync(jsFile, JSON.stringify(schema.toJSON(), null, 4));\n            }\n        });\n    }\n\n    /**\n     * Load a oolong module, return undefined if not exist\n     * @param {string} modulePath\n     * @returns {*}\n     */\n    loadModule(modulePath, packageName) {\n        modulePath = path.resolve(this.sourcePath, modulePath);\n\n        let id = this.getModuleIdByPath(modulePath);\n\n        if (this.isModuleLoaded(id)) {\n            return this.getModuleById(id);\n        }\n\n        if (!fs.existsSync(modulePath)) {\n            return undefined;\n        }\n\n        let gemlModule = this._compile(modulePath, packageName);\n\n        return (this._gemlModules[id] = gemlModule);\n    }\n\n    getTypeInfo(name, location) {\n        const gemlModule = this.getModuleById(location);\n        return gemlModule.type[name];\n    }\n\n    /**\n     * Track back the type derived chain.\n     * @param {object} gemlModule\n     * @param {object} info\n     * @returns {Array} [ derivedInfo, baseInfo ]\n     */\n    trackBackType(gemlModule, info) {\n        if (Types.Builtin.has(info.type)) {\n            return [info];\n        }\n\n        let baseInfo = this.loadElement(gemlModule, GemlTypes.Element.TYPE, info.type, true);\n        let backupBaseInfo = baseInfo.type !== info.type ? baseInfo : null;\n\n        if (!Types.Builtin.has(baseInfo.type)) {\n            //the base type is not a builtin type\n            let ownerModule = baseInfo.gemlModule;\n\n            let [rootTypeInfo] = this.trackBackType(ownerModule, baseInfo);\n\n            ownerModule.type[baseInfo.type] = rootTypeInfo;\n            baseInfo = rootTypeInfo;\n        } else {\n            backupBaseInfo = null;\n        }\n\n        let derivedInfo = {\n            ..._.cloneDeep(_.omit(baseInfo, [\"gemlModule\", \"modifiers\"])),\n            ..._.omit(info, [\"gemlModule\", \"type\", \"modifiers\"]),\n        };\n        if (baseInfo.modifiers || info.modifiers) {\n            derivedInfo.modifiers = [...(baseInfo.modifiers || []), ...(info.modifiers || [])];\n        }\n\n        if (!derivedInfo.subClass) {\n            derivedInfo.subClass = [];\n        }\n        derivedInfo.subClass.push(info.type);\n        return [derivedInfo, backupBaseInfo];\n    }\n\n    /**\n     * Translate an value by inferring all the references.\n     * @param {object} gemlModule\n     * @param {*} value\n     * @returns {*} - Translated value.\n     */\n    translateOolValue(gemlModule, value) {\n        if (_.isPlainObject(value)) {\n            if (value.oolType === GemlTypes.Lang.CONST_REF) {\n                let refedValue = this.loadElement(gemlModule, GemlTypes.Element.CONST, value.name, true);\n                let uniqueId = this.getElementUniqueId(gemlModule, GemlTypes.Element.CONST, value.name);\n                let ownerModule = this.getModuleById(this._mapOfReferenceToModuleId[uniqueId]);\n                return this.translateOolValue(ownerModule, refedValue);\n            } else if (value.oolType) {\n                throw new Error(`todo: translateOolValue with type: ${value.oolType}`);\n            }\n\n            return _.mapValues(value, (v) => this.translateOolValue(gemlModule, v));\n        }\n\n        if (Array.isArray(value)) {\n            return value.map((v) => this.translateOolValue(gemlModule, v));\n        }\n\n        return value;\n    }\n\n    /**\n     * Get the unique module id by source file path.\n     * @param {string} modulePath - The path of an oolong source file.\n     * @returns {string} - The module id.\n     */\n    getModuleIdByPath(modulePath) {\n        let isBuiltinEntity = _.startsWith(modulePath, BUILTINS_PATH);\n        return isBuiltinEntity\n            ? path.relative(BUILTINS_PATH, modulePath)\n            : \"./\" + path.relative(this.sourcePath, modulePath);\n    }\n\n    /**\n     * Get the unique name of an element.\n     * @param {object} refererModule\n     * @param {string} elementType\n     * @param {string} elementName\n     * @returns {string} - The unique name of an element.\n     */\n    getElementUniqueId(refererModule, elementType, elementName) {\n        return elementType + \":\" + elementName + \"<-\" + refererModule.id;\n    }\n\n    loadEntity(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.ENTITY, elementName, throwOnMissing);\n    }\n\n    loadType(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.TYPE, elementName, throwOnMissing);\n    }\n\n    loadDataset(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.DATASET, elementName, throwOnMissing);\n    }\n\n    loadView(refererModule, elementName, throwOnMissing = true) {\n        return this.loadElement(refererModule, GemlTypes.Element.VIEW, elementName, throwOnMissing);\n    }\n\n    /**\n     * Load an element based on the namespace chain.\n     * @param {object} refererModule\n     * @param {string} elementType\n     * @param {string} elementName\n     */\n    loadElement(refererModule, elementType, elementName, throwOnMissing) {\n        // the element id with type, should be unique among the whole schema\n        let uniqueId = this.getElementUniqueId(refererModule, elementType, elementName);\n\n        // the element id + referer\n        if (uniqueId in this._elementsCache) {\n            return this._elementsCache[uniqueId];\n        }\n\n        let targetModule;\n\n        if (elementType in refererModule && elementName in refererModule[elementType]) {\n            // see if it exists in the same module\n            targetModule = refererModule;\n        } else {\n            // search reversely by the namespaces\n            //this.log('verbose', `Searching ${elementType} \"${elementName}\" from \"${refererModule.id}\" ...`);\n\n            let index = _.findLastIndex(refererModule.namespace, (modulePath) => {\n                //this.log('debug', `Looking for ${elementType} \"${elementName}\" in \"${modulePath}\" ...`);\n                let packageName;\n\n                if (Array.isArray(modulePath)) {\n                    packageName = modulePath[1];\n                    modulePath = modulePath[0];\n                }\n\n                targetModule = this.loadModule(modulePath, packageName);\n                if (!targetModule) {\n                    return undefined;\n                }\n\n                return targetModule[elementType] && elementName in targetModule[elementType];\n            });\n\n            if (index === -1) {\n                if (throwOnMissing) {\n                    throw new Error(\n                        `${elementType} \"${elementName}\" not found in imported namespaces. Referer: ${refererModule.id}`\n                    );\n                }\n\n                return undefined;\n            }\n        }\n\n        let elementSelfId = elementType + \":\" + elementName + \"@\" + targetModule.id;\n        if (elementSelfId in this._elementsCache) {\n            // already initialized\n            return (this._elementsCache[uniqueId] = this._elementsCache[elementSelfId]);\n        }\n\n        this._mapOfReferenceToModuleId[uniqueId] = targetModule.id;\n\n        // retrieve the compiled info\n        let elementInfo = targetModule[elementType][elementName];\n        let element;\n\n        if (elementType === GemlTypes.Element.ENTITY && this.customizeEntities?.has(elementName)) {            \n            const overrideElement = this.loadElement(this.entryModule, GemlTypes.Element.ENTITY_OVERRIDE, elementName, true);\n\n            Entity.overrideEntityMeta(elementInfo, overrideElement);\n\n            //console.dir(elementInfo, { depth: 10 });\n        }\n\n        if (elementType in ELEMENT_CLASS_MAP) {\n            // element need linking\n            let ElementClass = ELEMENT_CLASS_MAP[elementType];\n\n            element = new ElementClass(this, elementName, targetModule, elementInfo);\n            element.link();\n        } else {\n            if (elementType === GemlTypes.Element.TYPE) {\n                element = {\n                    ...elementInfo,\n                    gemlModule: targetModule,\n                };\n            } else {\n                element = elementInfo;\n            }\n        }\n\n        this._elementsCache[elementSelfId] = element;\n        this._elementsCache[uniqueId] = element;\n\n        return element;\n    }\n\n    _compile(oolFile, packageName) {\n        let jsFile;\n\n        if (oolFile.endsWith(\".json\")) {\n            jsFile = oolFile;\n            oolFile = oolFile.substr(0, oolFile.length - 5);\n        } else {\n            jsFile = oolFile + \".json\";\n        }\n\n        let ool, searchExt;\n\n        if (this.useJsonSource) {\n            if (!fs.existsSync(jsFile)) {\n                throw new Error(`\"useJsonSource\" enabeld but json file \"${jsFile}\" not found.`);\n            }\n\n            ool = fs.readJsonSync(jsFile);\n            searchExt = GEML_SOURCE_EXT + \".json\";\n        } else {\n            try {\n                ool = GemlParser.parse(fs.readFileSync(oolFile, \"utf8\"));\n            } catch (error) {\n                throw new Error(`Failed to compile \"${oolFile}\".\\n${error.message || error}`);\n            }\n\n            if (!ool) {\n                throw new Error(\"Unknown error occurred while compiling: \" + oolFile);\n            }\n\n            searchExt = GEML_SOURCE_EXT;\n        }\n\n        let baseName = path.basename(oolFile, GEML_SOURCE_EXT);\n\n        let namespace = [];\n\n        let currentPath = path.dirname(oolFile);\n\n        /**\n         *\n         * @param {*} namespaces - Searching path\n         * @param {string} ns - Import line\n         * @param {*} recursive\n         */\n        function expandNs(namespaces, ns, recursive, packageName) {\n            let stats = fs.statSync(ns);\n\n            //import '/path/user.ool'\n            if (stats.isFile() && ns.endsWith(searchExt)) {\n                if (packageName) {\n                    namespaces.push([ns, packageName]);\n                } else {\n                    namespaces.push(ns);\n                }\n\n                return;\n            }\n\n            if (stats.isDirectory() && recursive) {\n                //resursive expand sub-directory\n                let files = fs.readdirSync(ns);\n                files.forEach((f) => expandNs(namespaces, path.join(ns, f), true, packageName));\n            }\n        }\n\n        if (ool.namespace) {\n            ool.namespace.forEach((ns) => {\n                let p;\n                let packageName;\n\n                const packageSep = ns.indexOf(\":\");\n                if (packageSep > 0) {\n                    //reference to a package\n                    packageName = ns.substring(0, packageSep);\n                    const pkgPath = this.dependencies[packageName];\n\n                    if (pkgPath == null) {\n                        throw new Error(\n                            `Package \"${packageName}\" not found in geml dependencies settings. Failed to compile ${oolFile}`\n                        );\n                    }\n\n                    ns = path.join(pkgPath, ns.substring(packageSep + 1));\n                }\n\n                if (ns.endsWith(\"/*\")) {\n                    p = path.resolve(currentPath, ns.substr(0, ns.length - 2));\n                    let files = fs.readdirSync(p);\n                    files.forEach((f) => expandNs(namespace, path.join(p, f), false, packageName));\n                } else if (ns.endsWith(\"/**\")) {\n                    p = path.resolve(currentPath, ns.substr(0, ns.length - 3));\n                    let files = fs.readdirSync(p);\n                    files.forEach((f) => expandNs(namespace, path.join(p, f), true, packageName));\n                } else {\n                    ns = path.resolve(currentPath, _.endsWith(ns, GEML_SOURCE_EXT) ? ns : ns + GEML_SOURCE_EXT);\n                    if (packageName) {\n                        namespace.push([ns, packageName]);\n                    } else {\n                        namespace.push(ns);\n                    }\n                }\n            });\n        }\n\n        ool.namespace = namespace;\n\n        ool.id = this.getModuleIdByPath(oolFile);\n        if (packageName) {\n            ool.packageName = packageName;\n        }\n        ool.name = baseName;\n\n        if (!this.useJsonSource && this.saveIntermediate) {\n            fs.writeFileSync(jsFile, JSON.stringify(ool, null, 4));\n        }\n\n        return ool;\n    }\n}\n\nmodule.exports = Linker;\n"],"mappings":"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"}