"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  fieldNaming
} = require('./OolUtils');

const {
  Types
} = require('@genx/data');

const RESERVED_KEYS = new Set(['name', 'type', 'modifiers', 'subClass', 'values']);

class Field extends Clonable {
  constructor(name, info) {
    super();
    this.name = fieldNaming(name);
    this.info = info;
  }

  link() {
    if (!Types.Builtin.has(this.info.type)) {
      throw new Error("Assertion failed: Types.Builtin.has(this.info.type)");
    }

    let typeObject = Types[this.info.type];

    _.forOwn(this.info, (value, key) => {
      if (RESERVED_KEYS.has(key)) {
        this[key] = value;
        return;
      }

      if (!typeObject.qualifiers.includes(key)) {
        throw new Error(`Unsupported field qualifier "${key}" for type "${this.info.type}" of field "${this.name}."`);
      }

      this[key] = Array.isArray(value) ? value[0] : value;
    });

    this.displayName = generateDisplayName(this.name);
    deepCloneField(this.info, this, 'modifiers');
    this.linked = true;
  }

  hasSameType(targetField) {
    return _.isEqual(this.toJSON(), targetField);
  }

  clone() {
    super.clone();
    let field = new Field(this.name, this.info);
    Object.assign(field, this.toJSON());
    field.linked = true;
    return field;
  }

  toJSON() {
    return _.omit(_.toPlainObject(this), ['name', 'linked', 'info']);
  }

}

module.exports = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0ZpZWxkLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImRlZXBDbG9uZUZpZWxkIiwiQ2xvbmFibGUiLCJmaWVsZE5hbWluZyIsIlR5cGVzIiwiUkVTRVJWRURfS0VZUyIsIlNldCIsIkZpZWxkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5mbyIsImxpbmsiLCJCdWlsdGluIiwiaGFzIiwidHlwZSIsInR5cGVPYmplY3QiLCJmb3JPd24iLCJ2YWx1ZSIsImtleSIsInF1YWxpZmllcnMiLCJpbmNsdWRlcyIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwiZGlzcGxheU5hbWUiLCJsaW5rZWQiLCJoYXNTYW1lVHlwZSIsInRhcmdldEZpZWxkIiwiaXNFcXVhbCIsInRvSlNPTiIsImNsb25lIiwiZmllbGQiLCJPYmplY3QiLCJhc3NpZ24iLCJvbWl0IiwidG9QbGFpbk9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTTtBQUFFQSxFQUFBQTtBQUFGLElBQVFDLE9BQU8sQ0FBQyxVQUFELENBQXJCOztBQUNBLE1BQU07QUFBRUMsRUFBQUEsbUJBQUY7QUFBdUJDLEVBQUFBLGNBQXZCO0FBQXVDQyxFQUFBQSxRQUF2QztBQUFpREMsRUFBQUE7QUFBakQsSUFBaUVKLE9BQU8sQ0FBQyxZQUFELENBQTlFOztBQUNBLE1BQU07QUFBRUssRUFBQUE7QUFBRixJQUFZTCxPQUFPLENBQUMsWUFBRCxDQUF6Qjs7QUFDQSxNQUFNTSxhQUFhLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsV0FBakIsRUFBOEIsVUFBOUIsRUFBMEMsUUFBMUMsQ0FBUixDQUF0Qjs7QUFNQSxNQUFNQyxLQUFOLFNBQW9CTCxRQUFwQixDQUE2QjtBQUt6Qk0sRUFBQUEsV0FBVyxDQUFDQyxJQUFELEVBQU9DLElBQVAsRUFBYTtBQUNwQjtBQUVBLFNBQUtELElBQUwsR0FBWU4sV0FBVyxDQUFDTSxJQUFELENBQXZCO0FBTUEsU0FBS0MsSUFBTCxHQUFZQSxJQUFaO0FBQ0g7O0FBS0RDLEVBQUFBLElBQUksR0FBRztBQUFBLFNBQ0tQLEtBQUssQ0FBQ1EsT0FBTixDQUFjQyxHQUFkLENBQWtCLEtBQUtILElBQUwsQ0FBVUksSUFBNUIsQ0FETDtBQUFBO0FBQUE7O0FBRUgsUUFBSUMsVUFBVSxHQUFHWCxLQUFLLENBQUMsS0FBS00sSUFBTCxDQUFVSSxJQUFYLENBQXRCOztBQUVBaEIsSUFBQUEsQ0FBQyxDQUFDa0IsTUFBRixDQUFTLEtBQUtOLElBQWQsRUFBb0IsQ0FBQ08sS0FBRCxFQUFRQyxHQUFSLEtBQWdCO0FBQ2hDLFVBQUliLGFBQWEsQ0FBQ1EsR0FBZCxDQUFrQkssR0FBbEIsQ0FBSixFQUE0QjtBQUN4QixhQUFLQSxHQUFMLElBQVlELEtBQVo7QUFDQTtBQUNIOztBQUVELFVBQUksQ0FBQ0YsVUFBVSxDQUFDSSxVQUFYLENBQXNCQyxRQUF0QixDQUErQkYsR0FBL0IsQ0FBTCxFQUEwQztBQUN0QyxjQUFNLElBQUlHLEtBQUosQ0FBVyxnQ0FBK0JILEdBQUksZUFBYyxLQUFLUixJQUFMLENBQVVJLElBQUssZUFBYyxLQUFLTCxJQUFLLElBQW5HLENBQU47QUFDSDs7QUFFRCxXQUFLUyxHQUFMLElBQVlJLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixLQUFkLElBQXVCQSxLQUFLLENBQUMsQ0FBRCxDQUE1QixHQUFrQ0EsS0FBOUM7QUFDSCxLQVhEOztBQWlCQSxTQUFLTyxXQUFMLEdBQW1CeEIsbUJBQW1CLENBQUMsS0FBS1MsSUFBTixDQUF0QztBQUVBUixJQUFBQSxjQUFjLENBQUMsS0FBS1MsSUFBTixFQUFZLElBQVosRUFBa0IsV0FBbEIsQ0FBZDtBQUVBLFNBQUtlLE1BQUwsR0FBYyxJQUFkO0FBQ0g7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsV0FBRCxFQUFjO0FBQ3JCLFdBQU83QixDQUFDLENBQUM4QixPQUFGLENBQVUsS0FBS0MsTUFBTCxFQUFWLEVBQXlCRixXQUF6QixDQUFQO0FBQ0g7O0FBTURHLEVBQUFBLEtBQUssR0FBRztBQUNKLFVBQU1BLEtBQU47QUFFQSxRQUFJQyxLQUFLLEdBQUcsSUFBSXhCLEtBQUosQ0FBVSxLQUFLRSxJQUFmLEVBQXFCLEtBQUtDLElBQTFCLENBQVo7QUFDQXNCLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixLQUFkLEVBQXFCLEtBQUtGLE1BQUwsRUFBckI7QUFDQUUsSUFBQUEsS0FBSyxDQUFDTixNQUFOLEdBQWUsSUFBZjtBQUVBLFdBQU9NLEtBQVA7QUFDSDs7QUFNREYsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBTy9CLENBQUMsQ0FBQ29DLElBQUYsQ0FBT3BDLENBQUMsQ0FBQ3FDLGFBQUYsQ0FBZ0IsSUFBaEIsQ0FBUCxFQUE4QixDQUFFLE1BQUYsRUFBVSxRQUFWLEVBQW9CLE1BQXBCLENBQTlCLENBQVA7QUFDSDs7QUF4RXdCOztBQTJFN0JDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlCLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgZ2VuZXJhdGVEaXNwbGF5TmFtZSwgZGVlcENsb25lRmllbGQsIENsb25hYmxlLCBmaWVsZE5hbWluZyB9ID0gcmVxdWlyZSgnLi9Pb2xVdGlscycpO1xuY29uc3QgeyBUeXBlcyB9ID0gcmVxdWlyZSgnQGdlbngvZGF0YScpO1xuY29uc3QgUkVTRVJWRURfS0VZUyA9IG5ldyBTZXQoWyduYW1lJywgJ3R5cGUnLCAnbW9kaWZpZXJzJywgJ3N1YkNsYXNzJywgJ3ZhbHVlcyddKTtcblxuLyoqXG4gKiBPb2xvbmcgZW50aXR5IGZpZWxkIGNsYXNzLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIEZpZWxkIGV4dGVuZHMgQ2xvbmFibGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluZm9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gZmllbGROYW1pbmcobmFtZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9yaWdpbmFsIHR5cGUgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaW5raW5nIHRoZSBcbiAgICAgKi9cbiAgICBsaW5rKCkge1xuICAgICAgICBhc3NlcnQ6IFR5cGVzLkJ1aWx0aW4uaGFzKHRoaXMuaW5mby50eXBlKTtcbiAgICAgICAgbGV0IHR5cGVPYmplY3QgPSBUeXBlc1t0aGlzLmluZm8udHlwZV07XG5cbiAgICAgICAgXy5mb3JPd24odGhpcy5pbmZvLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKFJFU0VSVkVEX0tFWVMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgICAgICBpZiAoIXR5cGVPYmplY3QucXVhbGlmaWVycy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBmaWVsZCBxdWFsaWZpZXIgXCIke2tleX1cIiBmb3IgdHlwZSBcIiR7dGhpcy5pbmZvLnR5cGV9XCIgb2YgZmllbGQgXCIke3RoaXMubmFtZX0uXCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpc1trZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRlZmF1bHQgbmFtZSBvZiB0aGUgZmllbGRcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9IGdlbmVyYXRlRGlzcGxheU5hbWUodGhpcy5uYW1lKTsgICAgICAgIFxuXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMuaW5mbywgdGhpcywgJ21vZGlmaWVycycpO1xuXG4gICAgICAgIHRoaXMubGlua2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoYXNTYW1lVHlwZSh0YXJnZXRGaWVsZCkge1xuICAgICAgICByZXR1cm4gXy5pc0VxdWFsKHRoaXMudG9KU09OKCksIHRhcmdldEZpZWxkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgZmllbGQgICAgIFxuICAgICAqIEByZXR1cm5zIHtGaWVsZH1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgc3VwZXIuY2xvbmUoKTtcblxuICAgICAgICBsZXQgZmllbGQgPSBuZXcgRmllbGQodGhpcy5uYW1lLCB0aGlzLmluZm8pO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkLCB0aGlzLnRvSlNPTigpKTtcbiAgICAgICAgZmllbGQubGlua2VkID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgdGhlIGZpZWxkIGludG8gYSBwbGFpbiBKU09OIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gXy5vbWl0KF8udG9QbGFpbk9iamVjdCh0aGlzKSwgWyAnbmFtZScsICdsaW5rZWQnLCAnaW5mbycgXSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpZWxkOyJdfQ==