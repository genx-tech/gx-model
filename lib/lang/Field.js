"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  fieldNaming
} = require('./GemlUtils');

const {
  Types
} = require('@genx/data');

const RESERVED_KEYS = new Set(['name', 'type', 'modifiers', 'subClass', 'values']);

class Field extends Clonable {
  constructor(name, info) {
    super();
    this.name = fieldNaming(name);
    this.info = info;
  }

  link() {
    let typeObject = Types[this.info.type];

    _.forOwn(this.info, (value, key) => {
      if (RESERVED_KEYS.has(key)) {
        this[key] = value;
        return;
      }

      if (!typeObject.qualifiers.includes(key)) {
        throw new Error(`Unsupported field qualifier "${key}" for type "${this.info.type}" of field "${this.name}."`);
      }

      this[key] = Array.isArray(value) ? value[0] : value;
    });

    if (this.info.modifiers && _.find(this.info.modifiers, mod => mod.oolType === 'Activator')) {
      this.hasActivator = true;
    }

    this.displayName = generateDisplayName(this.name);
    deepCloneField(this.info, this, 'modifiers');
    this.linked = true;
  }

  hasSameType(targetField) {
    return _.isEqual(this.toJSON(), targetField);
  }

  clone() {
    super.clone();
    let field = new Field(this.name, this.info);
    Object.assign(field, this.toJSON());
    field.linked = true;
    return field;
  }

  toJSON() {
    return _.omit(_.toPlainObject(this), ['name', 'linked', 'info']);
  }

}

module.exports = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0ZpZWxkLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImRlZXBDbG9uZUZpZWxkIiwiQ2xvbmFibGUiLCJmaWVsZE5hbWluZyIsIlR5cGVzIiwiUkVTRVJWRURfS0VZUyIsIlNldCIsIkZpZWxkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5mbyIsImxpbmsiLCJ0eXBlT2JqZWN0IiwidHlwZSIsImZvck93biIsInZhbHVlIiwia2V5IiwiaGFzIiwicXVhbGlmaWVycyIsImluY2x1ZGVzIiwiRXJyb3IiLCJBcnJheSIsImlzQXJyYXkiLCJtb2RpZmllcnMiLCJmaW5kIiwibW9kIiwib29sVHlwZSIsImhhc0FjdGl2YXRvciIsImRpc3BsYXlOYW1lIiwibGlua2VkIiwiaGFzU2FtZVR5cGUiLCJ0YXJnZXRGaWVsZCIsImlzRXF1YWwiLCJ0b0pTT04iLCJjbG9uZSIsImZpZWxkIiwiT2JqZWN0IiwiYXNzaWduIiwib21pdCIsInRvUGxhaW5PYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU07QUFBRUEsRUFBQUE7QUFBRixJQUFRQyxPQUFPLENBQUMsVUFBRCxDQUFyQjs7QUFDQSxNQUFNO0FBQUVDLEVBQUFBLG1CQUFGO0FBQXVCQyxFQUFBQSxjQUF2QjtBQUF1Q0MsRUFBQUEsUUFBdkM7QUFBaURDLEVBQUFBO0FBQWpELElBQWlFSixPQUFPLENBQUMsYUFBRCxDQUE5RTs7QUFDQSxNQUFNO0FBQUVLLEVBQUFBO0FBQUYsSUFBWUwsT0FBTyxDQUFDLFlBQUQsQ0FBekI7O0FBQ0EsTUFBTU0sYUFBYSxHQUFHLElBQUlDLEdBQUosQ0FBUSxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLFdBQWpCLEVBQThCLFVBQTlCLEVBQTBDLFFBQTFDLENBQVIsQ0FBdEI7O0FBTUEsTUFBTUMsS0FBTixTQUFvQkwsUUFBcEIsQ0FBNkI7QUFLekJNLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWE7QUFDcEI7QUFFQSxTQUFLRCxJQUFMLEdBQVlOLFdBQVcsQ0FBQ00sSUFBRCxDQUF2QjtBQU1BLFNBQUtDLElBQUwsR0FBWUEsSUFBWjtBQUNIOztBQUtEQyxFQUFBQSxJQUFJLEdBQUc7QUFFSCxRQUFJQyxVQUFVLEdBQUdSLEtBQUssQ0FBQyxLQUFLTSxJQUFMLENBQVVHLElBQVgsQ0FBdEI7O0FBRUFmLElBQUFBLENBQUMsQ0FBQ2dCLE1BQUYsQ0FBUyxLQUFLSixJQUFkLEVBQW9CLENBQUNLLEtBQUQsRUFBUUMsR0FBUixLQUFnQjtBQUNoQyxVQUFJWCxhQUFhLENBQUNZLEdBQWQsQ0FBa0JELEdBQWxCLENBQUosRUFBNEI7QUFDeEIsYUFBS0EsR0FBTCxJQUFZRCxLQUFaO0FBQ0E7QUFDSDs7QUFFRCxVQUFJLENBQUNILFVBQVUsQ0FBQ00sVUFBWCxDQUFzQkMsUUFBdEIsQ0FBK0JILEdBQS9CLENBQUwsRUFBMEM7QUFDdEMsY0FBTSxJQUFJSSxLQUFKLENBQVcsZ0NBQStCSixHQUFJLGVBQWMsS0FBS04sSUFBTCxDQUFVRyxJQUFLLGVBQWMsS0FBS0osSUFBSyxJQUFuRyxDQUFOO0FBQ0g7O0FBRUQsV0FBS08sR0FBTCxJQUFZSyxLQUFLLENBQUNDLE9BQU4sQ0FBY1AsS0FBZCxJQUF1QkEsS0FBSyxDQUFDLENBQUQsQ0FBNUIsR0FBa0NBLEtBQTlDO0FBQ0gsS0FYRDs7QUFhQSxRQUFJLEtBQUtMLElBQUwsQ0FBVWEsU0FBVixJQUF1QnpCLENBQUMsQ0FBQzBCLElBQUYsQ0FBTyxLQUFLZCxJQUFMLENBQVVhLFNBQWpCLEVBQTRCRSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsT0FBSixLQUFnQixXQUFuRCxDQUEzQixFQUE0RjtBQUN4RixXQUFLQyxZQUFMLEdBQW9CLElBQXBCO0FBQ0g7O0FBTUQsU0FBS0MsV0FBTCxHQUFtQjVCLG1CQUFtQixDQUFDLEtBQUtTLElBQU4sQ0FBdEM7QUFFQVIsSUFBQUEsY0FBYyxDQUFDLEtBQUtTLElBQU4sRUFBWSxJQUFaLEVBQWtCLFdBQWxCLENBQWQ7QUFFQSxTQUFLbUIsTUFBTCxHQUFjLElBQWQ7QUFDSDs7QUFFREMsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQWM7QUFDckIsV0FBT2pDLENBQUMsQ0FBQ2tDLE9BQUYsQ0FBVSxLQUFLQyxNQUFMLEVBQVYsRUFBeUJGLFdBQXpCLENBQVA7QUFDSDs7QUFNREcsRUFBQUEsS0FBSyxHQUFHO0FBQ0osVUFBTUEsS0FBTjtBQUVBLFFBQUlDLEtBQUssR0FBRyxJQUFJNUIsS0FBSixDQUFVLEtBQUtFLElBQWYsRUFBcUIsS0FBS0MsSUFBMUIsQ0FBWjtBQUNBMEIsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNGLEtBQWQsRUFBcUIsS0FBS0YsTUFBTCxFQUFyQjtBQUNBRSxJQUFBQSxLQUFLLENBQUNOLE1BQU4sR0FBZSxJQUFmO0FBRUEsV0FBT00sS0FBUDtBQUNIOztBQU1ERixFQUFBQSxNQUFNLEdBQUc7QUFDTCxXQUFPbkMsQ0FBQyxDQUFDd0MsSUFBRixDQUFPeEMsQ0FBQyxDQUFDeUMsYUFBRixDQUFnQixJQUFoQixDQUFQLEVBQThCLENBQUUsTUFBRixFQUFVLFFBQVYsRUFBb0IsTUFBcEIsQ0FBOUIsQ0FBUDtBQUNIOztBQTVFd0I7O0FBK0U3QkMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEMsS0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgeyBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBnZW5lcmF0ZURpc3BsYXlOYW1lLCBkZWVwQ2xvbmVGaWVsZCwgQ2xvbmFibGUsIGZpZWxkTmFtaW5nIH0gPSByZXF1aXJlKCcuL0dlbWxVdGlscycpO1xuY29uc3QgeyBUeXBlcyB9ID0gcmVxdWlyZSgnQGdlbngvZGF0YScpO1xuY29uc3QgUkVTRVJWRURfS0VZUyA9IG5ldyBTZXQoWyduYW1lJywgJ3R5cGUnLCAnbW9kaWZpZXJzJywgJ3N1YkNsYXNzJywgJ3ZhbHVlcyddKTtcblxuLyoqXG4gKiBPb2xvbmcgZW50aXR5IGZpZWxkIGNsYXNzLlxuICogQGNsYXNzXG4gKi9cbmNsYXNzIEZpZWxkIGV4dGVuZHMgQ2xvbmFibGUge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGluZm9cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBpbmZvKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5uYW1lID0gZmllbGROYW1pbmcobmFtZSk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE9yaWdpbmFsIHR5cGUgaW5mb3JtYXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge29iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuaW5mbyA9IGluZm87ICAgICAgICBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBMaW5raW5nIHRoZSBcbiAgICAgKi9cbiAgICBsaW5rKCkge1xuICAgICAgICBhc3NlcnQ6IFR5cGVzLkJ1aWx0aW4uaGFzKHRoaXMuaW5mby50eXBlKTtcbiAgICAgICAgbGV0IHR5cGVPYmplY3QgPSBUeXBlc1t0aGlzLmluZm8udHlwZV07XG5cbiAgICAgICAgXy5mb3JPd24odGhpcy5pbmZvLCAodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKFJFU0VSVkVEX0tFWVMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9ICAgICAgIFxuXG4gICAgICAgICAgICBpZiAoIXR5cGVPYmplY3QucXVhbGlmaWVycy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBmaWVsZCBxdWFsaWZpZXIgXCIke2tleX1cIiBmb3IgdHlwZSBcIiR7dGhpcy5pbmZvLnR5cGV9XCIgb2YgZmllbGQgXCIke3RoaXMubmFtZX0uXCJgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpc1trZXldID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5pbmZvLm1vZGlmaWVycyAmJiBfLmZpbmQodGhpcy5pbmZvLm1vZGlmaWVycywgbW9kID0+IG1vZC5vb2xUeXBlID09PSAnQWN0aXZhdG9yJykpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzQWN0aXZhdG9yID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCBuYW1lIG9mIHRoZSBmaWVsZFxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc3BsYXlOYW1lID0gZ2VuZXJhdGVEaXNwbGF5TmFtZSh0aGlzLm5hbWUpOyAgICAgICAgXG5cbiAgICAgICAgZGVlcENsb25lRmllbGQodGhpcy5pbmZvLCB0aGlzLCAnbW9kaWZpZXJzJyk7XG5cbiAgICAgICAgdGhpcy5saW5rZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGhhc1NhbWVUeXBlKHRhcmdldEZpZWxkKSB7XG4gICAgICAgIHJldHVybiBfLmlzRXF1YWwodGhpcy50b0pTT04oKSwgdGFyZ2V0RmllbGQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsb25lIHRoZSBmaWVsZCAgICAgXG4gICAgICogQHJldHVybnMge0ZpZWxkfVxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBzdXBlci5jbG9uZSgpO1xuXG4gICAgICAgIGxldCBmaWVsZCA9IG5ldyBGaWVsZCh0aGlzLm5hbWUsIHRoaXMuaW5mbyk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZmllbGQsIHRoaXMudG9KU09OKCkpO1xuICAgICAgICBmaWVsZC5saW5rZWQgPSB0cnVlO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZSB0aGUgZmllbGQgaW50byBhIHBsYWluIEpTT04gb2JqZWN0XG4gICAgICogQHJldHVybnMge29iamVjdH1cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiBfLm9taXQoXy50b1BsYWluT2JqZWN0KHRoaXMpLCBbICduYW1lJywgJ2xpbmtlZCcsICdpbmZvJyBdKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmllbGQ7Il19