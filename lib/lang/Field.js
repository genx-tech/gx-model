"use strict";

require("source-map-support/register");

const {
  _
} = require('rk-utils');

const {
  generateDisplayName,
  deepCloneField,
  Clonable,
  fieldNaming
} = require('./GemlUtils');

const {
  Types
} = require('@genx/data');

const RESERVED_KEYS = new Set(['name', 'type', 'modifiers', 'subClass', 'values']);

class Field extends Clonable {
  constructor(name, info) {
    super();
    this.name = fieldNaming(name);
    this.info = info;
  }

  link() {
    if (!Types.Builtin.has(this.info.type)) {
      throw new Error("Assertion failed: Types.Builtin.has(this.info.type)");
    }

    let typeObject = Types[this.info.type];

    _.forOwn(this.info, (value, key) => {
      if (RESERVED_KEYS.has(key)) {
        this[key] = value;
        return;
      }

      if (!typeObject.qualifiers.includes(key)) {
        throw new Error(`Unsupported field qualifier "${key}" for type "${this.info.type}" of field "${this.name}."`);
      }

      this[key] = Array.isArray(value) ? value[0] : value;
    });

    if (this.info.modifiers && _.find(this.info.modifiers, mod => mod.oolType === 'Activator')) {
      this.hasActivator = true;
    }

    this.displayName = generateDisplayName(this.name);
    deepCloneField(this.info, this, 'modifiers');
    this.linked = true;
  }

  hasSameType(targetField) {
    return _.isEqual(this.toJSON(), targetField);
  }

  clone() {
    super.clone();
    let field = new Field(this.name, this.info);
    Object.assign(field, this.toJSON());
    field.linked = true;
    return field;
  }

  toJSON() {
    return _.omit(_.toPlainObject(this), ['name', 'linked', 'info']);
  }

}

module.exports = Field;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYW5nL0ZpZWxkLmpzIl0sIm5hbWVzIjpbIl8iLCJyZXF1aXJlIiwiZ2VuZXJhdGVEaXNwbGF5TmFtZSIsImRlZXBDbG9uZUZpZWxkIiwiQ2xvbmFibGUiLCJmaWVsZE5hbWluZyIsIlR5cGVzIiwiUkVTRVJWRURfS0VZUyIsIlNldCIsIkZpZWxkIiwiY29uc3RydWN0b3IiLCJuYW1lIiwiaW5mbyIsImxpbmsiLCJCdWlsdGluIiwiaGFzIiwidHlwZSIsInR5cGVPYmplY3QiLCJmb3JPd24iLCJ2YWx1ZSIsImtleSIsInF1YWxpZmllcnMiLCJpbmNsdWRlcyIsIkVycm9yIiwiQXJyYXkiLCJpc0FycmF5IiwibW9kaWZpZXJzIiwiZmluZCIsIm1vZCIsIm9vbFR5cGUiLCJoYXNBY3RpdmF0b3IiLCJkaXNwbGF5TmFtZSIsImxpbmtlZCIsImhhc1NhbWVUeXBlIiwidGFyZ2V0RmllbGQiLCJpc0VxdWFsIiwidG9KU09OIiwiY2xvbmUiLCJmaWVsZCIsIk9iamVjdCIsImFzc2lnbiIsIm9taXQiLCJ0b1BsYWluT2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNO0FBQUVBLEVBQUFBO0FBQUYsSUFBUUMsT0FBTyxDQUFDLFVBQUQsQ0FBckI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQSxtQkFBRjtBQUF1QkMsRUFBQUEsY0FBdkI7QUFBdUNDLEVBQUFBLFFBQXZDO0FBQWlEQyxFQUFBQTtBQUFqRCxJQUFpRUosT0FBTyxDQUFDLGFBQUQsQ0FBOUU7O0FBQ0EsTUFBTTtBQUFFSyxFQUFBQTtBQUFGLElBQVlMLE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLE1BQU1NLGFBQWEsR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBQyxNQUFELEVBQVMsTUFBVCxFQUFpQixXQUFqQixFQUE4QixVQUE5QixFQUEwQyxRQUExQyxDQUFSLENBQXRCOztBQU1BLE1BQU1DLEtBQU4sU0FBb0JMLFFBQXBCLENBQTZCO0FBS3pCTSxFQUFBQSxXQUFXLENBQUNDLElBQUQsRUFBT0MsSUFBUCxFQUFhO0FBQ3BCO0FBRUEsU0FBS0QsSUFBTCxHQUFZTixXQUFXLENBQUNNLElBQUQsQ0FBdkI7QUFNQSxTQUFLQyxJQUFMLEdBQVlBLElBQVo7QUFDSDs7QUFLREMsRUFBQUEsSUFBSSxHQUFHO0FBQUEsU0FDS1AsS0FBSyxDQUFDUSxPQUFOLENBQWNDLEdBQWQsQ0FBa0IsS0FBS0gsSUFBTCxDQUFVSSxJQUE1QixDQURMO0FBQUE7QUFBQTs7QUFFSCxRQUFJQyxVQUFVLEdBQUdYLEtBQUssQ0FBQyxLQUFLTSxJQUFMLENBQVVJLElBQVgsQ0FBdEI7O0FBRUFoQixJQUFBQSxDQUFDLENBQUNrQixNQUFGLENBQVMsS0FBS04sSUFBZCxFQUFvQixDQUFDTyxLQUFELEVBQVFDLEdBQVIsS0FBZ0I7QUFDaEMsVUFBSWIsYUFBYSxDQUFDUSxHQUFkLENBQWtCSyxHQUFsQixDQUFKLEVBQTRCO0FBQ3hCLGFBQUtBLEdBQUwsSUFBWUQsS0FBWjtBQUNBO0FBQ0g7O0FBRUQsVUFBSSxDQUFDRixVQUFVLENBQUNJLFVBQVgsQ0FBc0JDLFFBQXRCLENBQStCRixHQUEvQixDQUFMLEVBQTBDO0FBQ3RDLGNBQU0sSUFBSUcsS0FBSixDQUFXLGdDQUErQkgsR0FBSSxlQUFjLEtBQUtSLElBQUwsQ0FBVUksSUFBSyxlQUFjLEtBQUtMLElBQUssSUFBbkcsQ0FBTjtBQUNIOztBQUVELFdBQUtTLEdBQUwsSUFBWUksS0FBSyxDQUFDQyxPQUFOLENBQWNOLEtBQWQsSUFBdUJBLEtBQUssQ0FBQyxDQUFELENBQTVCLEdBQWtDQSxLQUE5QztBQUNILEtBWEQ7O0FBYUEsUUFBSSxLQUFLUCxJQUFMLENBQVVjLFNBQVYsSUFBdUIxQixDQUFDLENBQUMyQixJQUFGLENBQU8sS0FBS2YsSUFBTCxDQUFVYyxTQUFqQixFQUE0QkUsR0FBRyxJQUFJQSxHQUFHLENBQUNDLE9BQUosS0FBZ0IsV0FBbkQsQ0FBM0IsRUFBNEY7QUFDeEYsV0FBS0MsWUFBTCxHQUFvQixJQUFwQjtBQUNIOztBQU1ELFNBQUtDLFdBQUwsR0FBbUI3QixtQkFBbUIsQ0FBQyxLQUFLUyxJQUFOLENBQXRDO0FBRUFSLElBQUFBLGNBQWMsQ0FBQyxLQUFLUyxJQUFOLEVBQVksSUFBWixFQUFrQixXQUFsQixDQUFkO0FBRUEsU0FBS29CLE1BQUwsR0FBYyxJQUFkO0FBQ0g7O0FBRURDLEVBQUFBLFdBQVcsQ0FBQ0MsV0FBRCxFQUFjO0FBQ3JCLFdBQU9sQyxDQUFDLENBQUNtQyxPQUFGLENBQVUsS0FBS0MsTUFBTCxFQUFWLEVBQXlCRixXQUF6QixDQUFQO0FBQ0g7O0FBTURHLEVBQUFBLEtBQUssR0FBRztBQUNKLFVBQU1BLEtBQU47QUFFQSxRQUFJQyxLQUFLLEdBQUcsSUFBSTdCLEtBQUosQ0FBVSxLQUFLRSxJQUFmLEVBQXFCLEtBQUtDLElBQTFCLENBQVo7QUFDQTJCLElBQUFBLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjRixLQUFkLEVBQXFCLEtBQUtGLE1BQUwsRUFBckI7QUFDQUUsSUFBQUEsS0FBSyxDQUFDTixNQUFOLEdBQWUsSUFBZjtBQUVBLFdBQU9NLEtBQVA7QUFDSDs7QUFNREYsRUFBQUEsTUFBTSxHQUFHO0FBQ0wsV0FBT3BDLENBQUMsQ0FBQ3lDLElBQUYsQ0FBT3pDLENBQUMsQ0FBQzBDLGFBQUYsQ0FBZ0IsSUFBaEIsQ0FBUCxFQUE4QixDQUFFLE1BQUYsRUFBVSxRQUFWLEVBQW9CLE1BQXBCLENBQTlCLENBQVA7QUFDSDs7QUE1RXdCOztBQStFN0JDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQm5DLEtBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IHsgXyB9ID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgZ2VuZXJhdGVEaXNwbGF5TmFtZSwgZGVlcENsb25lRmllbGQsIENsb25hYmxlLCBmaWVsZE5hbWluZyB9ID0gcmVxdWlyZSgnLi9HZW1sVXRpbHMnKTtcbmNvbnN0IHsgVHlwZXMgfSA9IHJlcXVpcmUoJ0BnZW54L2RhdGEnKTtcbmNvbnN0IFJFU0VSVkVEX0tFWVMgPSBuZXcgU2V0KFsnbmFtZScsICd0eXBlJywgJ21vZGlmaWVycycsICdzdWJDbGFzcycsICd2YWx1ZXMnXSk7XG5cbi8qKlxuICogT29sb25nIGVudGl0eSBmaWVsZCBjbGFzcy5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBGaWVsZCBleHRlbmRzIENsb25hYmxlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbmZvXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobmFtZSwgaW5mbykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubmFtZSA9IGZpZWxkTmFtaW5nKG5hbWUpO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcmlnaW5hbCB0eXBlIGluZm9ybWF0aW9uLlxuICAgICAgICAgKiBAbWVtYmVyIHtvYmplY3R9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZm8gPSBpbmZvOyAgICAgICAgXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTGlua2luZyB0aGUgXG4gICAgICovXG4gICAgbGluaygpIHtcbiAgICAgICAgYXNzZXJ0OiBUeXBlcy5CdWlsdGluLmhhcyh0aGlzLmluZm8udHlwZSk7XG4gICAgICAgIGxldCB0eXBlT2JqZWN0ID0gVHlwZXNbdGhpcy5pbmZvLnR5cGVdO1xuXG4gICAgICAgIF8uZm9yT3duKHRoaXMuaW5mbywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICAgIGlmIChSRVNFUlZFRF9LRVlTLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSAgICAgICBcblxuICAgICAgICAgICAgaWYgKCF0eXBlT2JqZWN0LnF1YWxpZmllcnMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgZmllbGQgcXVhbGlmaWVyIFwiJHtrZXl9XCIgZm9yIHR5cGUgXCIke3RoaXMuaW5mby50eXBlfVwiIG9mIGZpZWxkIFwiJHt0aGlzLm5hbWV9LlwiYCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXNba2V5XSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWVbMF0gOiB2YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5mby5tb2RpZmllcnMgJiYgXy5maW5kKHRoaXMuaW5mby5tb2RpZmllcnMsIG1vZCA9PiBtb2Qub29sVHlwZSA9PT0gJ0FjdGl2YXRvcicpKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0FjdGl2YXRvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGRlZmF1bHQgbmFtZSBvZiB0aGUgZmllbGRcbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNwbGF5TmFtZSA9IGdlbmVyYXRlRGlzcGxheU5hbWUodGhpcy5uYW1lKTsgICAgICAgIFxuXG4gICAgICAgIGRlZXBDbG9uZUZpZWxkKHRoaXMuaW5mbywgdGhpcywgJ21vZGlmaWVycycpO1xuXG4gICAgICAgIHRoaXMubGlua2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBoYXNTYW1lVHlwZSh0YXJnZXRGaWVsZCkge1xuICAgICAgICByZXR1cm4gXy5pc0VxdWFsKHRoaXMudG9KU09OKCksIHRhcmdldEZpZWxkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbG9uZSB0aGUgZmllbGQgICAgIFxuICAgICAqIEByZXR1cm5zIHtGaWVsZH1cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgc3VwZXIuY2xvbmUoKTtcblxuICAgICAgICBsZXQgZmllbGQgPSBuZXcgRmllbGQodGhpcy5uYW1lLCB0aGlzLmluZm8pO1xuICAgICAgICBPYmplY3QuYXNzaWduKGZpZWxkLCB0aGlzLnRvSlNPTigpKTtcbiAgICAgICAgZmllbGQubGlua2VkID0gdHJ1ZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWVsZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2xhdGUgdGhlIGZpZWxkIGludG8gYSBwbGFpbiBKU09OIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtvYmplY3R9XG4gICAgICovXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gXy5vbWl0KF8udG9QbGFpbk9iamVjdCh0aGlzKSwgWyAnbmFtZScsICdsaW5rZWQnLCAnaW5mbycgXSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEZpZWxkOyJdfQ==