{"version":3,"file":"Schema.js","names":["_","require","generateDisplayName","deepCloneField","Clonable","schemaNaming","Schema","constructor","linker","name","info","gemlModule","entryModule","link","pre","linked","log","comment","displayName","entities","forEach","entityEntry","entity","loadEntity","Error","addEntity","isEmpty","views","viewName","view","loadView","addView","addType","type","typeLocation","existing","types","hasEntity","entityName","each","hasView","getDocumentHierachy","fromModule","datasetName","datasets","dataset","loadDataset","buildHierarchy","getReferencedEntity","refererModule","ensureGetEntity","newlyAdded","push","clone","schema","toJSON","mapValues","module","exports"],"sources":["../../src/lang/Schema.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, schemaNaming } = require('./GemlUtils');\n\n/**\n * Geml schema class.\n * @class Schema\n */\nclass Schema extends Clonable {\n    /**\n     * Types in this schema, map of <typeName, typeInfo>\n     * @member {object.<String, Object>}\n     */\n     types = {};\n\n    /**\n     * Entities in this schema, map of <entityName, entityObject>\n     * @member {object.<string, Entity>}\n     */\n    entities = {};\n\n    /**\n     * Datasets, dataset = entity + relations + projection\n     * @member {object}\n     */\n    datasets = {};\n\n    /**\n     * Views, view = dataset + filters \n     * @member {object}\n     */\n    views = {};    \n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name     \n     * @param {object} info\n     */\n    constructor(linker, name, info) {\n        super();\n\n        /**\n         * Linker to process this schema\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = schemaNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = this.linker.entryModule;\n\n        /**\n         * Raw metadata\n         * @member {object}\n         */\n        this.info = info;       \n    }\n\n    /**\n     * Start linking this schema\n     * @returns {Schema}\n     */\n    link() {\n        pre: !this.linked;\n\n        this.linker.log('verbose', 'Linking schema [' + this.name + '] ...');\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        //1st round, get direct output entities\n        this.info.entities || (this.info.entities = []);\n\n        this.info.entities.forEach(entityEntry => {            \n            let entity = this.linker.loadEntity(this.gemlModule, entityEntry.entity);\n            if (!entity.linked) {\n                throw new Error(`Entity [${entity.name}] not linked after loading.`);\n            }\n\n            this.addEntity(entity);\n        });\n\n        if (!_.isEmpty(this.info.views)) {\n            this.info.views.forEach(viewName => {\n                let view = this.linker.loadView(this.gemlModule, viewName);\n                if (!view.linked) {\n                    throw new Error(`View [${entity.name}] not linked after loading.`);\n                }\n\n                this.addView(view);\n            });\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    /**\n     * Add an type into the schema\n     * @param {*} type \n     * @param {*} typeLocation \n     * @returns \n     */\n    addType(type, typeLocation) {\n        const existing = this.types[type];\n        if (existing == null) {\n            this.types[type] = typeLocation;\n        } else {\n            if (existing !== typeLocation) {\n                //should never happen\n                throw new Error('Different used types appear in the same entity!');\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Check whether a entity with given name is in the schema\n     * @param {string} entityName\n     * @returns {boolean}\n     */\n    hasEntity(entityName) {\n        return (entityName in this.entities);\n    }\n\n    /**\n     * Add an entity into the schema\n     * @param {Entity} entity\n     * @returns {Schema}\n     */\n    addEntity(entity) {\n        if (this.hasEntity(entity.name)) {\n            throw new Error(`Entity name [${entity.name}] conflicts in schema [${this.name}].`);\n        }\n\n        this.entities[entity.name] = entity;\n\n        _.each(entity.types, (info, type) => this.addType(type, info));\n\n        return this;\n    }\n\n    /**\n     * Check whether a view with given name is in the schema\n     * @param {string} viewName\n     * @returns {boolean}\n     */\n    hasView(viewName) {\n        return (viewName in this.views);\n    }\n\n    /**\n     * Add a view into the schema\n     * @param {View} view \n     * @returns {Schema}\n     */\n    addView(view) {\n        pre: !this.hasView(view.name), `View name [${view.name}] conflicts in schema [${this.name}].`;\n\n        this.views[view.name] = view;\n\n        return this;\n    }\n\n    /**\n     * Get a document hierarchy\n     * @param {object} fromModule\n     * @param {string} datasetName\n     * @returns {object}\n     */\n    getDocumentHierachy(fromModule, datasetName) {\n        if (datasetName in this.datasets) {\n            return this.datasets[datasetName];\n        }\n\n        let dataset = this.linker.loadDataset(fromModule, datasetName);\n        return (this.datasets[datasetName] = dataset.buildHierarchy(this));\n    }\n\n    /**\n     * Get the referenced entity, add it into schema if not in schema\n     * @param {object} refererModule\n     * @param {string} entityName\n     * @returns {Entity}\n     */\n    getReferencedEntity(refererModule, entityName) {\n        let entity = this.linker.loadEntity(refererModule, entityName);\n\n        if (!this.hasEntity(entity.name)) {\n            throw new Error(`Entity \"${entity.name}\" not exists in schema \"${this.name}\".`);\n        }\n\n        return entity;\n    }\n\n    /**\n     * \n     * @param {*} refererModule \n     * @param {*} entityName \n     */\n    ensureGetEntity(refererModule, entityName, newlyAdded) {\n        if (this.hasEntity(entityName)) return this.entities[entityName];\n\n        let entity = this.linker.loadEntity(refererModule, entityName, false);\n\n        if (entity) {\n            this.addEntity(entity);   \n\n            if (newlyAdded) {\n                newlyAdded.push(entity.name);\n                this.linker.log('debug', `New entity \"${entity.name}\" added by association.`);\n            }\n        }\n\n        return entity;\n    }\n\n    /**\n     * Clone the schema\n     * @returns {Schema}\n     */\n    clone() {\n        super.clone();\n        \n        let schema = new Schema(this.linker, this.name, this.info);\n        \n        deepCloneField(this, schema, 'displayName');\n        deepCloneField(this, schema, 'comment');        \n        deepCloneField(this, schema, 'entities');   \n        deepCloneField(this, schema, 'types');        \n        deepCloneField(this, schema, 'datasets');\n        deepCloneField(this, schema, 'views');        \n\n        schema.linked = true;\n\n        return schema;\n    }\n\n    /**\n     * Translate the schema into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            displayName: this.displayName,\n            comment: this.comment,        \n            entities: _.mapValues(this.entities, entity => entity.toJSON()),   \n            types: this.types,         \n            datasets: _.mapValues(this.datasets, dataset => dataset.toJSON()), \n            views: _.mapValues(this.views, view => view.toJSON()) \n        };\n    }\n}\n\nmodule.exports = Schema;"],"mappings":"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"}