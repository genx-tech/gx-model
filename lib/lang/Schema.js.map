{"version":3,"sources":["../../src/lang/Schema.js"],"names":["_","require","generateDisplayName","deepCloneField","Clonable","schemaNaming","Schema","constructor","linker","name","gemlModule","info","link","pre","linked","log","comment","displayName","entities","forEach","entityEntry","entity","loadEntity","assert","addEntity","isEmpty","views","viewName","loadView","view","addView","hasEntity","entityName","hasView","getDocumentHierachy","fromModule","datasetName","datasets","dataset","loadDataset","buildHierarchy","getReferencedEntity","refererModule","Error","ensureGetEntity","newlyAdded","push","clone","schema","toJSON","mapValues","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, schemaNaming } = require('./GemlUtils');\n\n/**\n * Oolong schema class.\n * @class OolongSchema\n */\nclass Schema extends Clonable {\n    /**\n     * Entities in this schema, map of <entityName, entityObject>\n     * @member {object.<string, OolongEntity>}\n     */\n    entities = {};\n\n    /**\n     * Datasets, dataset = entity + relations + projection\n     * @member {object}\n     */\n    datasets = {};\n\n    /**\n     * Views, view = dataset + filters \n     * @member {object}\n     */\n    views = {};    \n\n    /**     \n     * @param {OolongLinker} linker\n     * @param {string} name\n     * @param {object} gemlModule\n     * @param {object} info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n        /**\n         * Linker to process this schema\n         * @member {OolongLinker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = schemaNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Start linking this schema\n     * @returns {Schema}\n     */\n    link() {\n        pre: !this.linked;\n\n        this.linker.log('debug', 'Linking schema [' + this.name + '] ...');\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        //1st round, get direct output entities\n        this.info.entities || (this.info.entities = []);\n\n        this.info.entities.forEach(entityEntry => {            \n            let entity = this.linker.loadEntity(this.gemlModule, entityEntry.entity);\n            assert: entity.linked;\n\n            this.addEntity(entity);\n        });\n\n        if (!_.isEmpty(this.info.views)) {\n            this.info.views.forEach(viewName => {\n                this.linker.loadView(this.gemlModule, viewName);\n                assert: view.linked;\n\n                this.addView(view);\n            });\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    /**\n     * Check whether a entity with given name is in the schema\n     * @param {string} entityName\n     * @returns {boolean}\n     */\n    hasEntity(entityName) {\n        return (entityName in this.entities);\n    }\n\n    /**\n     * Add an entity into the schema\n     * @param {OolongEntity} entity\n     * @returns {OolongSchema}\n     */\n    addEntity(entity) {\n        pre: !this.hasEntity(entity.name), `Entity name [${entity.name}] conflicts in schema [${this.name}].`;\n\n        this.entities[entity.name] = entity;\n\n        return this;\n    }\n\n    /**\n     * Check whether a view with given name is in the schema\n     * @param {string} viewName\n     * @returns {boolean}\n     */\n    hasView(viewName) {\n        return (viewName in this.views);\n    }\n\n    /**\n     * Add a view into the schema\n     * @param {OolongView} view \n     * @returns {OolongSchema}\n     */\n    addView(view) {\n        pre: !this.hasView(view.name), `View name [${view.name}] conflicts in schema [${this.name}].`;\n\n        this.views[view.name] = view;\n\n        return this;\n    }\n\n    /**\n     * Get a document hierarchy\n     * @param {object} fromModule\n     * @param {string} datasetName\n     * @returns {object}\n     */\n    getDocumentHierachy(fromModule, datasetName) {\n        if (datasetName in this.datasets) {\n            return this.datasets[datasetName];\n        }\n\n        let dataset = this.linker.loadDataset(fromModule, datasetName);\n        return (this.datasets[datasetName] = dataset.buildHierarchy(this));\n    }\n\n    /**\n     * Get the referenced entity, add it into schema if not in schema\n     * @param {object} refererModule\n     * @param {string} entityName\n     * @returns {OolongEntity}\n     */\n    getReferencedEntity(refererModule, entityName) {\n        let entity = this.linker.loadEntity(refererModule, entityName);\n\n        if (!this.hasEntity(entity.name)) {\n            throw new Error(`Entity \"${entity.name}\" not exists in schema \"${this.name}\".`);\n        }\n\n        return entity;\n    }\n\n    /**\n     * \n     * @param {*} refererModule \n     * @param {*} entityName \n     */\n    ensureGetEntity(refererModule, entityName, newlyAdded) {\n        if (this.hasEntity(entityName)) return this.entities[entityName];\n\n        let entity = this.linker.loadEntity(refererModule, entityName, false);\n\n        if (entity) {\n            this.addEntity(entity);   \n\n            if (newlyAdded) {\n                newlyAdded.push(entity.name);\n                this.linker.log('debug', `New entity \"${entity.name}\" added by association.`);\n            }\n        }\n\n        return entity;\n    }\n\n    /**\n     * Clone the schema\n     * @returns {Schema}\n     */\n    clone() {\n        super.clone();\n        \n        let schema = new Schema(this.linker, this.name, this.gemlModule, this.info);\n        \n        deepCloneField(this, schema, 'displayName');\n        deepCloneField(this, schema, 'comment');        \n        deepCloneField(this, schema, 'entities');        \n        deepCloneField(this, schema, 'datasets');\n        deepCloneField(this, schema, 'views');        \n\n        schema.linked = true;\n\n        return schema;\n    }\n\n    /**\n     * Translate the schema into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {\n            name: this.name,\n            displayName: this.displayName,\n            comment: this.comment,        \n            entities: _.mapValues(this.entities, entity => entity.toJSON()),            \n            datasets: _.mapValues(this.datasets, dataset => dataset.toJSON()), \n            views: _.mapValues(this.views, view => view.toJSON()) \n        };\n    }\n}\n\nmodule.exports = Schema;"],"file":"Schema.js"}