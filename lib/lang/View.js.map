{"version":3,"file":"View.js","names":["_","require","generateDisplayName","deepCloneField","Clonable","Dataset","View","constructor","linker","name","gemlModule","info","link","pre","linked","dataset","loadDoc","assert","entity","mainEntity","getReferencedEntity","isList","isEmpty","accept","params","concat","selectBy","groupBy","orderBy","skip","isPlainObject","Object","assign","limit","inferTypeInfo","inSchema","inferredParams","forEach","param","GemlUtils","isMemberAccess","type","entityName","fieldName","split","hasEntity","Error","entities","field","getEntityAttribute","push","omit","toPlainObject","typeInfo","baseInfo","trackBackType","getDocumentHierarchy","getDocumentHierachy","clone","view","toJSON","module","exports"],"sources":["../../src/lang/View.js"],"sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable } = require('./GemlUtils');\n\nconst Dataset = require('./Dataset');\n\n/**\n * Geml view class.\n * @class View\n */\nclass View extends Clonable {\n\n    isList = false;\n\n    /**          \n     * @param {Linker} linker\n     * @param {string} name - View name\n     * @param {object} gemlModule - Source ool module\n     * @param {object} info - View info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n        /**\n         * Linker to process this view\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this view\n         * @member {string}\n         */\n        this.name = name;\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Start linking this view\n     * @returns {View}\n     */\n    link() {\n        pre: !this.linked;\n\n        if (this.info.dataset) {\n            this.dataset = this.linker.loadDoc(this.gemlModule, this.info.dataset);\n        } else {\n            assert: this.info.entity, 'Invalid view syntax!';\n            \n            let mainEntity = this.linker.getReferencedEntity(this.gemlModule, this.info.entity);\n            \n            this.dataset = new Dataset(this.linker, mainEntity.name, this.gemlModule, { mainEntity: mainEntity.name });\n            this.dataset.link();\n        }\n\n        if (this.info.isList) {\n            this.isList = true;\n        }\n\n        if (!_.isEmpty(this.info.accept)) {\n            this.params = this.info.accept.concat();\n        }\n\n        if (!_.isEmpty(this.info.selectBy)) {\n            this.selectBy = this.info.selectBy.concat();\n        }\n\n        if (!_.isEmpty(this.info.groupBy)) {\n            this.groupBy = this.info.groupBy.concat();\n        }\n\n        if (!_.isEmpty(this.info.orderBy)) {\n            this.orderBy = this.info.orderBy.concat();\n        }\n\n        if (this.info.skip) {\n            this.skip = _.isPlainObject(this.info.skip) ? Object.assign({}, this.info.skip) : this.info.skip;\n        }\n\n        if (this.info.limit) {\n            this.limit = _.isPlainObject(this.info.limit) ? Object.assign({}, this.info.limit) : this.info.limit;\n        }\n\n        this.linked = true;\n\n        return this;\n    }\n\n    inferTypeInfo(inSchema) {\n        if (!_.isEmpty(this.params)) {\n            let inferredParams = [];\n\n            this.params.forEach(param => {\n                if (GemlUtils.isMemberAccess(param.type)) {\n                    let [ entityName, fieldName ] = param.type.split('.');\n\n                    if (!inSchema.hasEntity(entityName)) {\n                        throw new Error(`Parameter \"${param.name}\" references to an entity \"${entityName}\" which is not belong to the schema.`);\n                    }\n\n                    let entity = inSchema.entities[entityName];\n                    //console.dir(entity.toJSON(), {depth: 8, colors: true});\n\n                    let field = entity.getEntityAttribute(fieldName);\n                    inferredParams.push(Object.assign(_.omit(_.toPlainObject(field), ['isReference', 'optional', 'displayName']), {name: param.name}));\n                } else {\n                    const [ typeInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, param);\n                    inferredParams.push(typeInfo);\n                }\n            });\n\n            this.params = inferredParams;\n        }\n    }\n\n    getDocumentHierarchy(inSchema) {\n        return inSchema.getDocumentHierachy(this.gemlModule, this.dataset.name);\n    }\n\n    /**\n     * Clone the view     \n     * @returns {View}\n     */\n    clone() {\n        super.clone();\n        \n        let view = new View(this.linker, this.name, this.gemlModule, this.info);\n\n        deepCloneField(this, view, 'dataset');\n        deepCloneField(this, view, 'params');\n        deepCloneField(this, view, 'selectBy');\n        deepCloneField(this, view, 'groupBy');\n        deepCloneField(this, view, 'orderBy');\n        deepCloneField(this, view, 'skip');\n        deepCloneField(this, view, 'limit');\n\n        view.isList = this.isList;\n        view.linked = true;\n\n        return view;\n    }\n    \n    /**\n     * Translate the view into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,\n            dataset: this.dataset.toJSON(),\n            isList: this.isList,\n            params: this.params,\n            selectBy: this.selectBy,\n            groupBy: this.groupBy,\n            orderBy: this.orderBy,\n            skip: this.skip,\n            limit: this.limit\n        };\n    }\n}\n\nmodule.exports = View;"],"mappings":"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"}