{"version":3,"sources":["../../../src/lang/entityFeatures/logicalDeletion.js"],"names":["_","require","FEATURE_NAME","feature","entity","args","newField","fieldInfo","name","type","readOnly","fieldName","featureSetting","options","isPlainObject","keys","Object","length","Error","field","value","assign","timestampFieldName","deletedTimestamp","optional","writeOnce","auto","addFeature","timestampField","once","addField","hasField","module","exports"],"mappings":"AAAA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAQC,OAAO,CAAC,YAAD,CAArB;;AAEA,MAAMC,YAAY,GAAG,iBAArB;;AAYA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAI,GAAG,EAAhC,EAAoC;AAChC,MAAIC,QAAQ,GAAG,IAAf;AAAA,MAAqBC,SAAS,GAAG;AAC7BC,IAAAA,IAAI,EAAE,WADuB;AAE7BC,IAAAA,IAAI,EAAE,SAFuB;AAG7B,eAAW,KAHkB;AAI7BC,IAAAA,QAAQ,EAAE;AAJmB,GAAjC;AAAA,MAKGC,SALH;AAAA,MAKcC,cALd;AAOA,MAAI,CAAEC,OAAF,IAAcR,IAAlB;;AAEA,MAAIQ,OAAJ,EAAa;AACT,QAAIb,CAAC,CAACc,aAAF,CAAgBD,OAAhB,CAAJ,EAA8B;AAC1BP,MAAAA,QAAQ,GAAG,KAAX;AAEA,UAAIS,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,OAAZ,CAAX;;AACA,UAAIE,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACnB,cAAM,IAAIC,KAAJ,CAAW,gCAA+BhB,YAAa,IAAvD,CAAN;AACH;;AAED,UAAIS,SAAS,GAAGI,IAAI,CAAC,CAAD,CAApB;AAEAH,MAAAA,cAAc,GAAG;AACbO,QAAAA,KAAK,EAAER,SADM;AAEbS,QAAAA,KAAK,EAAEP,OAAO,CAACF,SAAD;AAFD,OAAjB;AAKH,KAfD,MAeO,IAAI,OAAOE,OAAP,KAAmB,QAAvB,EAAiC;AACpCG,MAAAA,MAAM,CAACK,MAAP,CAAcd,SAAd,EAAyB;AAAEC,QAAAA,IAAI,EAAEK;AAAR,OAAzB;AACH,KAFM,MAEA;AACH,YAAM,IAAIK,KAAJ,CAAW,gCAA+BhB,YAAa,IAAvD,CAAN;AACH;AACJ;;AAED,MAAII,QAAJ,EAAc;AACVK,IAAAA,SAAS,GAAGJ,SAAS,CAACC,IAAtB;AAEA,QAAIc,kBAAkB,GAAG,WAAzB;AACA,QAAIC,gBAAgB,GAAG;AACnBd,MAAAA,IAAI,EAAE,UADa;AAEnBC,MAAAA,QAAQ,EAAE,IAFS;AAGnBc,MAAAA,QAAQ,EAAE,IAHS;AAInBC,MAAAA,SAAS,EAAE,IAJQ;AAKnBC,MAAAA,IAAI,EAAE;AALa,KAAvB;AAQAtB,IAAAA,MAAM,CAACuB,UAAP,CAAkBzB,YAAlB,EAAgC;AAC5BiB,MAAAA,KAAK,EAAER,SADqB;AAE5BS,MAAAA,KAAK,EAAE,IAFqB;AAG5BQ,MAAAA,cAAc,EAAEN;AAHY,KAAhC;AAMAlB,IAAAA,MAAM,CAACyB,IAAP,CAAY,mBAAZ,EAAiC,MAAM;AACnCzB,MAAAA,MAAM,CAAC0B,QAAP,CAAgBnB,SAAhB,EAA2BJ,SAA3B;AACAH,MAAAA,MAAM,CAAC0B,QAAP,CAAgBR,kBAAhB,EAAoCC,gBAApC;AACH,KAHD;AAIH,GAtBD,MAsBO;AACHnB,IAAAA,MAAM,CAACuB,UAAP,CAAkBzB,YAAlB,EAAgCU,cAAhC;AAEAR,IAAAA,MAAM,CAACyB,IAAP,CAAY,mBAAZ,EAAiC,MAAM;AACnC,UAAI,CAACzB,MAAM,CAAC2B,QAAP,CAAgBnB,cAAc,CAACO,KAA/B,CAAL,EAA4C;AACxC,cAAM,IAAID,KAAJ,CAAW,UAASN,cAAc,CAACO,KAAM,sBAAqBjB,YAAa,6BAA4BE,MAAM,CAACI,IAAK,IAAnH,CAAN;AACH;AACJ,KAJD;AAKH;AACJ;;AAEDwB,MAAM,CAACC,OAAP,GAAiB9B,OAAjB","sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july')\n\nconst FEATURE_NAME = 'logicalDeletion';\n\n/**\n * A rule specifies the entity will not be deleted physically.\n * @module EntityFeature_LogicalDeletion\n */\n\n/**\n * Initialize the feature\n * @param {OolongEntity} entity - Entity to apply this feature\n * @param {object} options - Field options, can be a string as a new status field or an object reference to a certain status of an existing field\n */\nfunction feature(entity, args = []) {\n    let newField = true, fieldInfo = {\n        name: 'isDeleted',\n        type: 'boolean',\n        'default': false,\n        readOnly: true\n    }, fieldName, featureSetting;\n\n    let [ options ] = args;\n\n    if (options) {\n        if (_.isPlainObject(options)) {\n            newField = false;\n\n            let keys = Object.keys(options);\n            if (keys.length !== 1) {\n                throw new Error(`Invalid options for feature \"${FEATURE_NAME}\".`);\n            }\n\n            let fieldName = keys[0];\n\n            featureSetting = {\n                field: fieldName,\n                value: options[fieldName]\n            };\n\n        } else if (typeof options === 'string') {\n            Object.assign(fieldInfo, { name: options });\n        } else {\n            throw new Error(`Invalid options for feature \"${FEATURE_NAME}\".`);\n        }\n    }\n\n    if (newField) {\n        fieldName = fieldInfo.name;\n\n        let timestampFieldName = 'deletedAt';\n        let deletedTimestamp = {\n            type: 'datetime',\n            readOnly: true,\n            optional: true,\n            writeOnce: true,\n            auto: true\n        };\n\n        entity.addFeature(FEATURE_NAME, {\n            field: fieldName,\n            value: true,\n            timestampField: timestampFieldName\n        });\n\n        entity.once('afterAddingFields', () => {\n            entity.addField(fieldName, fieldInfo);\n            entity.addField(timestampFieldName, deletedTimestamp);\n        });\n    } else {\n        entity.addFeature(FEATURE_NAME, featureSetting);\n\n        entity.once('afterAddingFields', () => {\n            if (!entity.hasField(featureSetting.field)) {\n                throw new Error(`Field \"${featureSetting.field}\" used by feature \"${FEATURE_NAME}\" is not found in entity \"${entity.name}\".`);\n            }\n        });\n    }\n}\n\nmodule.exports = feature;"],"file":"logicalDeletion.js"}