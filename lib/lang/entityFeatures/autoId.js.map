{"version":3,"sources":["../../../src/lang/entityFeatures/autoId.js"],"names":["_","require","FEATURE_NAME","feature","entity","args","typeInfo","name","type","auto","writeOnce","options","featureExtra","startFrom","prefix","Error","length","opt","prefixLength","fixedLength","urlSafe","isEmpty","push","fieldName","addFeature","field","once","addField","setKey","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\n\nconst FEATURE_NAME = 'autoId';\n\n/**\n * A rule specifies the id of entity is automatically generated.\n * @module EntityFeature_AutoId\n */\n\n/**\n * Initialize the feature\n * @param {Entity} entity - Entity to apply this feature\n * @param {array} options - Auto id field options\n * @property {string} [options.name='id'] - Field name\n * @property {string} [options.type='integer'] - Field type\n */\nfunction feature(entity, args = []) {\n    let typeInfo = {\n        name: 'id',\n        type: 'integer',\n        auto: true,        \n        writeOnce: true\n    };\n\n    let [ options ] = args;\n\n    let featureExtra = {};\n\n    if (options) {\n        if (typeof options === 'string') {\n            options = { name: options };\n        }        \n\n        if (options.type) {\n            switch (options.type) {\n                case 'integer':\n                    if (options.startFrom) {\n                        featureExtra.startFrom = options.startFrom;\n                    }\n                break;\n\n                case 'uuid':\n                    typeInfo['type'] = 'text';\n                    typeInfo['fixedLength'] = 36;\n                    typeInfo['generator'] = 'uuid';\n                break;\n\n                case 'shortid':\n                    typeInfo['type'] = 'text';\n                    typeInfo['maxLength'] = 20;\n                    typeInfo['generator'] = 'shortid';\n                break;\n\n                case 'uniqid':\n                    typeInfo['type'] = 'text';                    \n\n                    if (options.prefix) {\n                        if (typeof options.prefix !== 'string') {\n                            throw new Error(`\"prefix\" option should be a string. Entity: ${entity.name}, feature: autoId`);\n                        }    \n\n                        typeInfo['fixedLength'] = 17 + options.prefix.length;\n                        typeInfo['generator'] = [ 'uniqid', options.prefix ];\n                    } else {\n                        typeInfo['fixedLength'] = 17;\n                        typeInfo['generator'] = 'uniqid';\n                    }                    \n                break;\n\n                case 'hyperid':\n                    typeInfo['type'] = 'text';                                           \n\n                    let args = [ 'hyperid' ];\n                    let opt = {};\n                    let prefixLength;\n\n                    if (options.prefix) {\n                        prefixLength = options.prefix.length;\n                        opt.prefix = options.prefix;\n                    } else {\n                        prefixLength = 0;\n                    }\n\n                    if (options.fixedLength) {\n                        opt.fixedLength = options.fixedLength;\n                        typeInfo['fixedLength'] = 33 + prefixLength;\n                    } else {\n                        typeInfo['maxLength'] = 40 + prefixLength;\n                    }\n\n                    if (options.urlSafe) {\n                        opt.urlSafe = options.urlSafe;\n                    }\n\n                    if (!_.isEmpty(opt)) {\n                        args.push(opt);\n                    }\n\n                    typeInfo['generator'] = args.length > 1 ? args : args[0];\n                break;\n\n                default:\n                    throw new Error(`Unsupported autoId type: ${options.type}. Entity: ${entity.name}`);\n            }\n        } else {\n            if (options.startFrom) {\n                featureExtra.startFrom = options.startFrom;\n            }\n        } \n        \n        if (options.name) {\n            typeInfo.name = options.name;\n        }\n    }\n\n    let fieldName = typeInfo.name;\n\n    entity.addFeature(FEATURE_NAME, {\n        field: fieldName,\n        ...featureExtra        \n    }).once('beforeAddingFields', () => {\n        entity.addField(fieldName, typeInfo)\n            .setKey(fieldName);\n    });\n}\n\nmodule.exports = feature;"],"file":"autoId.js"}