"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'updateTimestamp';

function initialize(entity, args = []) {
  let typeInfo = {
    name: 'updatedAt',
    type: 'datetime',
    readOnly: true,
    forceUpdate: true,
    optional: true
  };
  let [options] = args;

  if (options) {
    if (typeof options === 'string') {
      options = {
        name: options
      };
    }

    Object.assign(typeInfo, options);
  }

  let fieldName = typeInfo.name;
  entity.addFeature(FEATURE_NAME, {
    field: fieldName
  }).once('afterAddingFields', () => {
    entity.addField(fieldName, typeInfo);
  });
}

module.exports = initialize;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VwZGF0ZVRpbWVzdGFtcC5qcyJdLCJuYW1lcyI6WyJGRUFUVVJFX05BTUUiLCJpbml0aWFsaXplIiwiZW50aXR5IiwiYXJncyIsInR5cGVJbmZvIiwibmFtZSIsInR5cGUiLCJyZWFkT25seSIsImZvcmNlVXBkYXRlIiwib3B0aW9uYWwiLCJvcHRpb25zIiwiT2JqZWN0IiwiYXNzaWduIiwiZmllbGROYW1lIiwiYWRkRmVhdHVyZSIsImZpZWxkIiwib25jZSIsImFkZEZpZWxkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUcsaUJBQXJCOztBQVlBLFNBQVNDLFVBQVQsQ0FBb0JDLE1BQXBCLEVBQTRCQyxJQUFJLEdBQUcsRUFBbkMsRUFBdUM7QUFDbkMsTUFBSUMsUUFBUSxHQUFHO0FBQ1hDLElBQUFBLElBQUksRUFBRSxXQURLO0FBRVhDLElBQUFBLElBQUksRUFBRSxVQUZLO0FBR1hDLElBQUFBLFFBQVEsRUFBRSxJQUhDO0FBSVhDLElBQUFBLFdBQVcsRUFBRSxJQUpGO0FBS1hDLElBQUFBLFFBQVEsRUFBRTtBQUxDLEdBQWY7QUFRQSxNQUFJLENBQUVDLE9BQUYsSUFBY1AsSUFBbEI7O0FBRUEsTUFBSU8sT0FBSixFQUFhO0FBQ1QsUUFBSSxPQUFPQSxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQzdCQSxNQUFBQSxPQUFPLEdBQUc7QUFBRUwsUUFBQUEsSUFBSSxFQUFFSztBQUFSLE9BQVY7QUFDSDs7QUFFREMsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWNSLFFBQWQsRUFBd0JNLE9BQXhCO0FBQ0g7O0FBRUQsTUFBSUcsU0FBUyxHQUFHVCxRQUFRLENBQUNDLElBQXpCO0FBRUFILEVBQUFBLE1BQU0sQ0FBQ1ksVUFBUCxDQUFrQmQsWUFBbEIsRUFBZ0M7QUFDNUJlLElBQUFBLEtBQUssRUFBRUY7QUFEcUIsR0FBaEMsRUFFR0csSUFGSCxDQUVRLG1CQUZSLEVBRTZCLE1BQU07QUFDL0JkLElBQUFBLE1BQU0sQ0FBQ2UsUUFBUCxDQUFnQkosU0FBaEIsRUFBMkJULFFBQTNCO0FBQ0gsR0FKRDtBQUtIOztBQUVEYyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixVQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBGRUFUVVJFX05BTUUgPSAndXBkYXRlVGltZXN0YW1wJztcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBjaGFuZ2Ugb2Ygc3RhdGUgd2lsbCBiZSB0cmFja2VkIGF1dG9tYXRpY2FsbHkuXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVfVXBkYXRlVGltZXN0YW1wXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBGaWVsZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGluaXRpYWxpemUoZW50aXR5LCBhcmdzID0gW10pIHtcbiAgICBsZXQgdHlwZUluZm8gPSB7XG4gICAgICAgIG5hbWU6ICd1cGRhdGVkQXQnLFxuICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLFxuICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgZm9yY2VVcGRhdGU6IHRydWUsXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgfTtcblxuICAgIGxldCBbIG9wdGlvbnMgXSA9IGFyZ3M7XG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyBuYW1lOiBvcHRpb25zIH07XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuYXNzaWduKHR5cGVJbmZvLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBsZXQgZmllbGROYW1lID0gdHlwZUluZm8ubmFtZTtcblxuICAgIGVudGl0eS5hZGRGZWF0dXJlKEZFQVRVUkVfTkFNRSwge1xuICAgICAgICBmaWVsZDogZmllbGROYW1lXG4gICAgfSkub25jZSgnYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgIGVudGl0eS5hZGRGaWVsZChmaWVsZE5hbWUsIHR5cGVJbmZvKVxuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluaXRpYWxpemU7Il19