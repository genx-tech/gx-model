"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'userEditTracking';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    revisionField: 'revision',
    addFieldsOnly: false,
    ...args[0]
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate,
    revisionField,
    addFieldsOnly,
    migrationUser
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    const typeInfo = {
      name: trackCreate,
      type: uidField.type,
      readOnly: true,
      writeOnce: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['createdBy'] = trackCreate;
  }

  if (trackUpdate) {
    const typeInfo = {
      name: trackUpdate,
      type: uidField.type,
      readOnly: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
      entity.addField(revisionField, {
        type: 'integer',
        readOnly: true
      });
    });
    fields['updatedBy'] = trackUpdate;
    fields['revision'] = revisionField;
  }

  if (!addFieldsOnly) {
    entity.addFeature(FEATURE_NAME, {
      fields,
      uidSource,
      migrationUser
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJyZXZpc2lvbkZpZWxkIiwiYWRkRmllbGRzT25seSIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFJlZiIsIm1pZ3JhdGlvblVzZXIiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJ0eXBlSW5mbyIsIm5hbWUiLCJ0eXBlIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbiIsImFkZEZpZWxkIiwiYWRkRmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLGtCQUFyQjs7QUFZQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDM0IsUUFBTUMsT0FBTyxHQUFHO0FBQ1pDLElBQUFBLFVBQVUsRUFBRSxTQURBO0FBRVpDLElBQUFBLFNBQVMsRUFBRSxlQUZDO0FBR1pDLElBQUFBLFdBQVcsRUFBRSxXQUhEO0FBSVpDLElBQUFBLFdBQVcsRUFBRSxXQUpEO0FBS1pDLElBQUFBLGFBQWEsRUFBRSxVQUxIO0FBTVpDLElBQUFBLGFBQWEsRUFBRSxLQU5IO0FBT1osT0FBR1AsSUFBSSxDQUFDLENBQUQ7QUFQSyxHQUFoQjtBQVVBLFFBQU07QUFDRlEsSUFBQUEsU0FBUyxFQUFFQyxZQURUO0FBRUZOLElBQUFBLFNBRkU7QUFHRkMsSUFBQUEsV0FIRTtBQUlGQyxJQUFBQSxXQUpFO0FBS0ZDLElBQUFBLGFBTEU7QUFNRkMsSUFBQUEsYUFORTtBQU9GRyxJQUFBQTtBQVBFLE1BUUZULE9BUko7O0FBVUEsTUFBSSxDQUFDRyxXQUFELElBQWdCLENBQUNDLFdBQXJCLEVBQWtDO0FBQzlCTixJQUFBQSxNQUFNLENBQUNZLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixNQUFsQixFQUEwQixtSEFBMUI7QUFDQTtBQUNIOztBQUdELFFBQU0sQ0FBRUMsY0FBRixFQUFrQkMsV0FBbEIsSUFBa0NMLFlBQVksQ0FBQ00sS0FBYixDQUFtQixHQUFuQixDQUF4QztBQUVBLFFBQU1iLFVBQVUsR0FBR0gsTUFBTSxDQUFDaUIsbUJBQVAsQ0FBMkJILGNBQTNCLENBQW5CO0FBQ0EsUUFBTUksUUFBUSxHQUFHSCxXQUFXLElBQUksSUFBZixHQUFzQlosVUFBVSxDQUFDZ0Isa0JBQVgsQ0FBOEIsTUFBOUIsQ0FBdEIsR0FBOERoQixVQUFVLENBQUNnQixrQkFBWCxDQUE4QkosV0FBOUIsQ0FBL0U7QUFFQSxRQUFNSyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFJZixXQUFKLEVBQWlCO0FBQ2IsVUFBTWdCLFFBQVEsR0FBRztBQUNiQyxNQUFBQSxJQUFJLEVBQUVqQixXQURPO0FBRWJrQixNQUFBQSxJQUFJLEVBQUVMLFFBQVEsQ0FBQ0ssSUFGRjtBQUdiQyxNQUFBQSxRQUFRLEVBQUUsSUFIRztBQUliQyxNQUFBQSxTQUFTLEVBQUU7QUFKRSxLQUFqQjtBQU9BekIsSUFBQUEsTUFBTSxDQUFDMEIsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakMxQixNQUFBQSxNQUFNLENBQUMyQixRQUFQLENBQWdCTixRQUFRLENBQUNDLElBQXpCLEVBQStCRCxRQUEvQjtBQUNILEtBRkQ7QUFJQUQsSUFBQUEsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQmYsV0FBdEI7QUFDSDs7QUFFRCxNQUFJQyxXQUFKLEVBQWlCO0FBQ2IsVUFBTWUsUUFBUSxHQUFHO0FBQ2JDLE1BQUFBLElBQUksRUFBRWhCLFdBRE87QUFFYmlCLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDSyxJQUZGO0FBR2JDLE1BQUFBLFFBQVEsRUFBRTtBQUhHLEtBQWpCO0FBTUF4QixJQUFBQSxNQUFNLENBQUMwQixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQzFCLE1BQUFBLE1BQU0sQ0FBQzJCLFFBQVAsQ0FBZ0JOLFFBQVEsQ0FBQ0MsSUFBekIsRUFBK0JELFFBQS9CO0FBQ0FyQixNQUFBQSxNQUFNLENBQUMyQixRQUFQLENBQWdCcEIsYUFBaEIsRUFBK0I7QUFDM0JnQixRQUFBQSxJQUFJLEVBQUUsU0FEcUI7QUFFM0JDLFFBQUFBLFFBQVEsRUFBRTtBQUZpQixPQUEvQjtBQUlILEtBTkQ7QUFRQUosSUFBQUEsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQmQsV0FBdEI7QUFDQWMsSUFBQUEsTUFBTSxDQUFDLFVBQUQsQ0FBTixHQUFxQmIsYUFBckI7QUFDSDs7QUFFRCxNQUFJLENBQUNDLGFBQUwsRUFBb0I7QUFDaEJSLElBQUFBLE1BQU0sQ0FBQzRCLFVBQVAsQ0FBa0I5QixZQUFsQixFQUFnQztBQUM1QnNCLE1BQUFBLE1BRDRCO0FBRTVCaEIsTUFBQUEsU0FGNEI7QUFHNUJPLE1BQUFBO0FBSDRCLEtBQWhDO0FBS0g7QUFDSjs7QUFFRGtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQi9CLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICd1c2VyRWRpdFRyYWNraW5nJztcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBlbnRpdHkgdG8gYXV0b21hdGljYWxseSByZWNvcmQgdGhlIGNyZWF0aW9uIHRpbWVcbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZV9Vc2VyRWRpdFRyYWNraW5nXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHthcnJheX0gb3B0aW9ucyAtIEZpZWxkIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICB1c2VyRW50aXR5OiAndXNlci5pZCcsXG4gICAgICAgIHVpZFNvdXJjZTogJ3N0YXRlLnVzZXIuaWQnLFxuICAgICAgICB0cmFja0NyZWF0ZTogJ2NyZWF0ZWRCeScsXG4gICAgICAgIHRyYWNrVXBkYXRlOiAndXBkYXRlZEJ5JywgXG4gICAgICAgIHJldmlzaW9uRmllbGQ6ICdyZXZpc2lvbicsICAgICAgIFxuICAgICAgICBhZGRGaWVsZHNPbmx5OiBmYWxzZSxcbiAgICAgICAgLi4uYXJnc1swXVxuICAgIH07XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHVzZXJGaWVsZDogdXNlckZpZWxkUmVmLFxuICAgICAgICB1aWRTb3VyY2UsXG4gICAgICAgIHRyYWNrQ3JlYXRlLFxuICAgICAgICB0cmFja1VwZGF0ZSxcbiAgICAgICAgcmV2aXNpb25GaWVsZCxcbiAgICAgICAgYWRkRmllbGRzT25seSxcbiAgICAgICAgbWlncmF0aW9uVXNlclxuICAgIH0gPSBvcHRpb25zOyAgICBcblxuICAgIGlmICghdHJhY2tDcmVhdGUgJiYgIXRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGVudGl0eS5saW5rZXIubG9nKCd3YXJuJywgJ1NpbmNlIGJvdGggXCJ0cmFja0NyZWF0ZVwiIGFuZCBcInRyYWNrVXBkYXRlXCIgYXJlIGRpc2FibGVkLCB0aGUgXCJ1c2VyRWRpdFRyYWNraW5nXCIgZmVhdHVyZSB3aWxsIG5vdCB0YWtlIGFueSBlZmZlY3QuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL3RvZG86IGNyb3NzIHNjaGVhbSBzdXBwb3J0XG4gICAgY29uc3QgWyB1c2VyRW50aXR5TmFtZSwgdXNlcklkRmllbGQgXSA9IHVzZXJGaWVsZFJlZi5zcGxpdCgnLicpO1xuXG4gICAgY29uc3QgdXNlckVudGl0eSA9IGVudGl0eS5nZXRSZWZlcmVuY2VkRW50aXR5KHVzZXJFbnRpdHlOYW1lKTtcbiAgICBjb25zdCB1aWRGaWVsZCA9IHVzZXJJZEZpZWxkID09IG51bGwgPyB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSgnJGtleScpIDogdXNlckVudGl0eS5nZXRFbnRpdHlBdHRyaWJ1dGUodXNlcklkRmllbGQpO1xuXG4gICAgY29uc3QgZmllbGRzID0ge307XG5cbiAgICBpZiAodHJhY2tDcmVhdGUpIHtcbiAgICAgICAgY29uc3QgdHlwZUluZm8gPSB7XG4gICAgICAgICAgICBuYW1lOiB0cmFja0NyZWF0ZSxcbiAgICAgICAgICAgIHR5cGU6IHVpZEZpZWxkLnR5cGUsXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRlT25jZTogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGVudGl0eS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQodHlwZUluZm8ubmFtZSwgdHlwZUluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHNbJ2NyZWF0ZWRCeSddID0gdHJhY2tDcmVhdGU7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGNvbnN0IHR5cGVJbmZvID0ge1xuICAgICAgICAgICAgbmFtZTogdHJhY2tVcGRhdGUsXG4gICAgICAgICAgICB0eXBlOiB1aWRGaWVsZC50eXBlLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICBlbnRpdHkub24oJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgZW50aXR5LmFkZEZpZWxkKHR5cGVJbmZvLm5hbWUsIHR5cGVJbmZvKTtcbiAgICAgICAgICAgIGVudGl0eS5hZGRGaWVsZChyZXZpc2lvbkZpZWxkLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2ludGVnZXInLFxuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZmllbGRzWyd1cGRhdGVkQnknXSA9IHRyYWNrVXBkYXRlO1xuICAgICAgICBmaWVsZHNbJ3JldmlzaW9uJ10gPSByZXZpc2lvbkZpZWxkO1xuICAgIH1cblxuICAgIGlmICghYWRkRmllbGRzT25seSkge1xuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgICAgIG1pZ3JhdGlvblVzZXJcbiAgICAgICAgfSk7ICAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==