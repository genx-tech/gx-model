"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'createTimestamp';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    ...args
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    const typeInfo = {
      name: trackCreate,
      type: uidField.type,
      readOnly: true,
      writeOnce: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['createdBy'] = trackCreate;
  }

  if (trackUpdate) {
    const typeInfo = {
      name: trackUpdate,
      type: uidField.type,
      readOnly: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['updatedBy'] = trackUpdate;
  }

  entity.addFeature(FEATURE_NAME, {
    fields,
    uidSource
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJ1c2VyRmllbGQiLCJ1c2VyRmllbGRSZWYiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJ0eXBlSW5mbyIsIm5hbWUiLCJ0eXBlIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbiIsImFkZEZpZWxkIiwiYWRkRmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLGlCQUFyQjs7QUFZQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDM0IsUUFBTUMsT0FBTyxHQUFHO0FBQ1pDLElBQUFBLFVBQVUsRUFBRSxTQURBO0FBRVpDLElBQUFBLFNBQVMsRUFBRSxlQUZDO0FBR1pDLElBQUFBLFdBQVcsRUFBRSxXQUhEO0FBSVpDLElBQUFBLFdBQVcsRUFBRSxXQUpEO0FBS1osT0FBR0w7QUFMUyxHQUFoQjtBQVFBLFFBQU07QUFDRk0sSUFBQUEsU0FBUyxFQUFFQyxZQURUO0FBRUZKLElBQUFBLFNBRkU7QUFHRkMsSUFBQUEsV0FIRTtBQUlGQyxJQUFBQTtBQUpFLE1BS0ZKLE9BTEo7O0FBT0EsTUFBSSxDQUFDRyxXQUFELElBQWdCLENBQUNDLFdBQXJCLEVBQWtDO0FBQzlCTixJQUFBQSxNQUFNLENBQUNTLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixNQUFsQixFQUEwQixtSEFBMUI7QUFDQTtBQUNIOztBQUdELFFBQU0sQ0FBRUMsY0FBRixFQUFrQkMsV0FBbEIsSUFBa0NKLFlBQVksQ0FBQ0ssS0FBYixDQUFtQixHQUFuQixDQUF4QztBQUVBLFFBQU1WLFVBQVUsR0FBR0gsTUFBTSxDQUFDYyxtQkFBUCxDQUEyQkgsY0FBM0IsQ0FBbkI7QUFDQSxRQUFNSSxRQUFRLEdBQUdILFdBQVcsSUFBSSxJQUFmLEdBQXNCVCxVQUFVLENBQUNhLGtCQUFYLENBQThCLE1BQTlCLENBQXRCLEdBQThEYixVQUFVLENBQUNhLGtCQUFYLENBQThCSixXQUE5QixDQUEvRTtBQUVBLFFBQU1LLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQUlaLFdBQUosRUFBaUI7QUFDYixVQUFNYSxRQUFRLEdBQUc7QUFDYkMsTUFBQUEsSUFBSSxFQUFFZCxXQURPO0FBRWJlLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDSyxJQUZGO0FBR2JDLE1BQUFBLFFBQVEsRUFBRSxJQUhHO0FBSWJDLE1BQUFBLFNBQVMsRUFBRTtBQUpFLEtBQWpCO0FBT0F0QixJQUFBQSxNQUFNLENBQUN1QixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQ3ZCLE1BQUFBLE1BQU0sQ0FBQ3dCLFFBQVAsQ0FBZ0JOLFFBQVEsQ0FBQ0MsSUFBekIsRUFBK0JELFFBQS9CO0FBQ0gsS0FGRDtBQUlBRCxJQUFBQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCWixXQUF0QjtBQUNIOztBQUVELE1BQUlDLFdBQUosRUFBaUI7QUFDYixVQUFNWSxRQUFRLEdBQUc7QUFDYkMsTUFBQUEsSUFBSSxFQUFFYixXQURPO0FBRWJjLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDSyxJQUZGO0FBR2JDLE1BQUFBLFFBQVEsRUFBRTtBQUhHLEtBQWpCO0FBTUFyQixJQUFBQSxNQUFNLENBQUN1QixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQ3ZCLE1BQUFBLE1BQU0sQ0FBQ3dCLFFBQVAsQ0FBZ0JOLFFBQVEsQ0FBQ0MsSUFBekIsRUFBK0JELFFBQS9CO0FBQ0gsS0FGRDtBQUlBRCxJQUFBQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCWCxXQUF0QjtBQUNIOztBQUVETixFQUFBQSxNQUFNLENBQUN5QixVQUFQLENBQWtCM0IsWUFBbEIsRUFBZ0M7QUFDNUJtQixJQUFBQSxNQUQ0QjtBQUU1QmIsSUFBQUE7QUFGNEIsR0FBaEM7QUFJSDs7QUFFRHNCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjVCLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICdjcmVhdGVUaW1lc3RhbXAnO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGVudGl0eSB0byBhdXRvbWF0aWNhbGx5IHJlY29yZCB0aGUgY3JlYXRpb24gdGltZVxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX1VzZXJFZGl0VHJhY2tpbmdcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge2FycmF5fSBvcHRpb25zIC0gRmllbGQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBmZWF0dXJlKGVudGl0eSwgYXJncykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHVzZXJFbnRpdHk6ICd1c2VyLmlkJyxcbiAgICAgICAgdWlkU291cmNlOiAnc3RhdGUudXNlci5pZCcsXG4gICAgICAgIHRyYWNrQ3JlYXRlOiAnY3JlYXRlZEJ5JyxcbiAgICAgICAgdHJhY2tVcGRhdGU6ICd1cGRhdGVkQnknLFxuICAgICAgICAuLi5hcmdzXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgdXNlckZpZWxkOiB1c2VyRmllbGRSZWYsXG4gICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgdHJhY2tDcmVhdGUsXG4gICAgICAgIHRyYWNrVXBkYXRlXG4gICAgfSA9IG9wdGlvbnM7ICAgIFxuXG4gICAgaWYgKCF0cmFja0NyZWF0ZSAmJiAhdHJhY2tVcGRhdGUpIHtcbiAgICAgICAgZW50aXR5Lmxpbmtlci5sb2coJ3dhcm4nLCAnU2luY2UgYm90aCBcInRyYWNrQ3JlYXRlXCIgYW5kIFwidHJhY2tVcGRhdGVcIiBhcmUgZGlzYWJsZWQsIHRoZSBcInVzZXJFZGl0VHJhY2tpbmdcIiBmZWF0dXJlIHdpbGwgbm90IHRha2UgYW55IGVmZmVjdC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vdG9kbzogY3Jvc3Mgc2NoZWFtIHN1cHBvcnRcbiAgICBjb25zdCBbIHVzZXJFbnRpdHlOYW1lLCB1c2VySWRGaWVsZCBdID0gdXNlckZpZWxkUmVmLnNwbGl0KCcuJyk7XG5cbiAgICBjb25zdCB1c2VyRW50aXR5ID0gZW50aXR5LmdldFJlZmVyZW5jZWRFbnRpdHkodXNlckVudGl0eU5hbWUpO1xuICAgIGNvbnN0IHVpZEZpZWxkID0gdXNlcklkRmllbGQgPT0gbnVsbCA/IHVzZXJFbnRpdHkuZ2V0RW50aXR5QXR0cmlidXRlKCcka2V5JykgOiB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSh1c2VySWRGaWVsZCk7XG5cbiAgICBjb25zdCBmaWVsZHMgPSB7fTtcblxuICAgIGlmICh0cmFja0NyZWF0ZSkge1xuICAgICAgICBjb25zdCB0eXBlSW5mbyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRyYWNrQ3JlYXRlLFxuICAgICAgICAgICAgdHlwZTogdWlkRmllbGQudHlwZSxcbiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgd3JpdGVPbmNlOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgZW50aXR5Lm9uKCdhZnRlckFkZGluZ0ZpZWxkcycsICgpID0+IHtcbiAgICAgICAgICAgIGVudGl0eS5hZGRGaWVsZCh0eXBlSW5mby5uYW1lLCB0eXBlSW5mbyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpZWxkc1snY3JlYXRlZEJ5J10gPSB0cmFja0NyZWF0ZTtcbiAgICB9XG5cbiAgICBpZiAodHJhY2tVcGRhdGUpIHtcbiAgICAgICAgY29uc3QgdHlwZUluZm8gPSB7XG4gICAgICAgICAgICBuYW1lOiB0cmFja1VwZGF0ZSxcbiAgICAgICAgICAgIHR5cGU6IHVpZEZpZWxkLnR5cGUsXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGVudGl0eS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQodHlwZUluZm8ubmFtZSwgdHlwZUluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHNbJ3VwZGF0ZWRCeSddID0gdHJhY2tVcGRhdGU7XG4gICAgfVxuXG4gICAgZW50aXR5LmFkZEZlYXR1cmUoRkVBVFVSRV9OQU1FLCB7XG4gICAgICAgIGZpZWxkcyxcbiAgICAgICAgdWlkU291cmNlXG4gICAgfSk7ICAgIFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZlYXR1cmU7Il19