"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'userEditTracking';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    addFieldsOnly: false,
    ...args[0]
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate,
    addFieldsOnly
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    const typeInfo = {
      name: trackCreate,
      type: uidField.type,
      readOnly: true,
      writeOnce: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['createdBy'] = trackCreate;
  }

  if (trackUpdate) {
    const typeInfo = {
      name: trackUpdate,
      type: uidField.type,
      readOnly: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['updatedBy'] = trackUpdate;
  }

  if (!addFieldsOnly) {
    entity.addFeature(FEATURE_NAME, {
      fields,
      uidSource
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJhZGRGaWVsZHNPbmx5IiwidXNlckZpZWxkIiwidXNlckZpZWxkUmVmIiwibGlua2VyIiwibG9nIiwidXNlckVudGl0eU5hbWUiLCJ1c2VySWRGaWVsZCIsInNwbGl0IiwiZ2V0UmVmZXJlbmNlZEVudGl0eSIsInVpZEZpZWxkIiwiZ2V0RW50aXR5QXR0cmlidXRlIiwiZmllbGRzIiwidHlwZUluZm8iLCJuYW1lIiwidHlwZSIsInJlYWRPbmx5Iiwid3JpdGVPbmNlIiwib24iLCJhZGRGaWVsZCIsImFkZEZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBRyxrQkFBckI7O0FBWUEsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQXpCLEVBQStCO0FBQzNCLFFBQU1DLE9BQU8sR0FBRztBQUNaQyxJQUFBQSxVQUFVLEVBQUUsU0FEQTtBQUVaQyxJQUFBQSxTQUFTLEVBQUUsZUFGQztBQUdaQyxJQUFBQSxXQUFXLEVBQUUsV0FIRDtBQUlaQyxJQUFBQSxXQUFXLEVBQUUsV0FKRDtBQUtaQyxJQUFBQSxhQUFhLEVBQUUsS0FMSDtBQU1aLE9BQUdOLElBQUksQ0FBQyxDQUFEO0FBTkssR0FBaEI7QUFTQSxRQUFNO0FBQ0ZPLElBQUFBLFNBQVMsRUFBRUMsWUFEVDtBQUVGTCxJQUFBQSxTQUZFO0FBR0ZDLElBQUFBLFdBSEU7QUFJRkMsSUFBQUEsV0FKRTtBQUtGQyxJQUFBQTtBQUxFLE1BTUZMLE9BTko7O0FBUUEsTUFBSSxDQUFDRyxXQUFELElBQWdCLENBQUNDLFdBQXJCLEVBQWtDO0FBQzlCTixJQUFBQSxNQUFNLENBQUNVLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixNQUFsQixFQUEwQixtSEFBMUI7QUFDQTtBQUNIOztBQUdELFFBQU0sQ0FBRUMsY0FBRixFQUFrQkMsV0FBbEIsSUFBa0NKLFlBQVksQ0FBQ0ssS0FBYixDQUFtQixHQUFuQixDQUF4QztBQUVBLFFBQU1YLFVBQVUsR0FBR0gsTUFBTSxDQUFDZSxtQkFBUCxDQUEyQkgsY0FBM0IsQ0FBbkI7QUFDQSxRQUFNSSxRQUFRLEdBQUdILFdBQVcsSUFBSSxJQUFmLEdBQXNCVixVQUFVLENBQUNjLGtCQUFYLENBQThCLE1BQTlCLENBQXRCLEdBQThEZCxVQUFVLENBQUNjLGtCQUFYLENBQThCSixXQUE5QixDQUEvRTtBQUVBLFFBQU1LLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQUliLFdBQUosRUFBaUI7QUFDYixVQUFNYyxRQUFRLEdBQUc7QUFDYkMsTUFBQUEsSUFBSSxFQUFFZixXQURPO0FBRWJnQixNQUFBQSxJQUFJLEVBQUVMLFFBQVEsQ0FBQ0ssSUFGRjtBQUdiQyxNQUFBQSxRQUFRLEVBQUUsSUFIRztBQUliQyxNQUFBQSxTQUFTLEVBQUU7QUFKRSxLQUFqQjtBQU9BdkIsSUFBQUEsTUFBTSxDQUFDd0IsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakN4QixNQUFBQSxNQUFNLENBQUN5QixRQUFQLENBQWdCTixRQUFRLENBQUNDLElBQXpCLEVBQStCRCxRQUEvQjtBQUNILEtBRkQ7QUFJQUQsSUFBQUEsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQmIsV0FBdEI7QUFDSDs7QUFFRCxNQUFJQyxXQUFKLEVBQWlCO0FBQ2IsVUFBTWEsUUFBUSxHQUFHO0FBQ2JDLE1BQUFBLElBQUksRUFBRWQsV0FETztBQUViZSxNQUFBQSxJQUFJLEVBQUVMLFFBQVEsQ0FBQ0ssSUFGRjtBQUdiQyxNQUFBQSxRQUFRLEVBQUU7QUFIRyxLQUFqQjtBQU1BdEIsSUFBQUEsTUFBTSxDQUFDd0IsRUFBUCxDQUFVLG1CQUFWLEVBQStCLE1BQU07QUFDakN4QixNQUFBQSxNQUFNLENBQUN5QixRQUFQLENBQWdCTixRQUFRLENBQUNDLElBQXpCLEVBQStCRCxRQUEvQjtBQUNILEtBRkQ7QUFJQUQsSUFBQUEsTUFBTSxDQUFDLFdBQUQsQ0FBTixHQUFzQlosV0FBdEI7QUFDSDs7QUFFRCxNQUFJLENBQUNDLGFBQUwsRUFBb0I7QUFDaEJQLElBQUFBLE1BQU0sQ0FBQzBCLFVBQVAsQ0FBa0I1QixZQUFsQixFQUFnQztBQUM1Qm9CLE1BQUFBLE1BRDRCO0FBRTVCZCxNQUFBQTtBQUY0QixLQUFoQztBQUlIO0FBQ0o7O0FBRUR1QixNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBGRUFUVVJFX05BTUUgPSAndXNlckVkaXRUcmFja2luZyc7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgZW50aXR5IHRvIGF1dG9tYXRpY2FsbHkgcmVjb3JkIHRoZSBjcmVhdGlvbiB0aW1lXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVfVXNlckVkaXRUcmFja2luZ1xuICovXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZmVhdHVyZVxuICogQHBhcmFtIHtPb2xvbmdFbnRpdHl9IGVudGl0eSAtIEVudGl0eSB0byBhcHBseSB0aGlzIGZlYXR1cmVcbiAqIEBwYXJhbSB7YXJyYXl9IG9wdGlvbnMgLSBGaWVsZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZW50aXR5LCBhcmdzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdXNlckVudGl0eTogJ3VzZXIuaWQnLFxuICAgICAgICB1aWRTb3VyY2U6ICdzdGF0ZS51c2VyLmlkJyxcbiAgICAgICAgdHJhY2tDcmVhdGU6ICdjcmVhdGVkQnknLFxuICAgICAgICB0cmFja1VwZGF0ZTogJ3VwZGF0ZWRCeScsXG4gICAgICAgIGFkZEZpZWxkc09ubHk6IGZhbHNlLFxuICAgICAgICAuLi5hcmdzWzBdXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgdXNlckZpZWxkOiB1c2VyRmllbGRSZWYsXG4gICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgdHJhY2tDcmVhdGUsXG4gICAgICAgIHRyYWNrVXBkYXRlLFxuICAgICAgICBhZGRGaWVsZHNPbmx5XG4gICAgfSA9IG9wdGlvbnM7ICAgIFxuXG4gICAgaWYgKCF0cmFja0NyZWF0ZSAmJiAhdHJhY2tVcGRhdGUpIHtcbiAgICAgICAgZW50aXR5Lmxpbmtlci5sb2coJ3dhcm4nLCAnU2luY2UgYm90aCBcInRyYWNrQ3JlYXRlXCIgYW5kIFwidHJhY2tVcGRhdGVcIiBhcmUgZGlzYWJsZWQsIHRoZSBcInVzZXJFZGl0VHJhY2tpbmdcIiBmZWF0dXJlIHdpbGwgbm90IHRha2UgYW55IGVmZmVjdC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vdG9kbzogY3Jvc3Mgc2NoZWFtIHN1cHBvcnRcbiAgICBjb25zdCBbIHVzZXJFbnRpdHlOYW1lLCB1c2VySWRGaWVsZCBdID0gdXNlckZpZWxkUmVmLnNwbGl0KCcuJyk7XG5cbiAgICBjb25zdCB1c2VyRW50aXR5ID0gZW50aXR5LmdldFJlZmVyZW5jZWRFbnRpdHkodXNlckVudGl0eU5hbWUpO1xuICAgIGNvbnN0IHVpZEZpZWxkID0gdXNlcklkRmllbGQgPT0gbnVsbCA/IHVzZXJFbnRpdHkuZ2V0RW50aXR5QXR0cmlidXRlKCcka2V5JykgOiB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSh1c2VySWRGaWVsZCk7XG5cbiAgICBjb25zdCBmaWVsZHMgPSB7fTtcblxuICAgIGlmICh0cmFja0NyZWF0ZSkge1xuICAgICAgICBjb25zdCB0eXBlSW5mbyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRyYWNrQ3JlYXRlLFxuICAgICAgICAgICAgdHlwZTogdWlkRmllbGQudHlwZSxcbiAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgd3JpdGVPbmNlOiB0cnVlXG4gICAgICAgIH07XG5cbiAgICAgICAgZW50aXR5Lm9uKCdhZnRlckFkZGluZ0ZpZWxkcycsICgpID0+IHtcbiAgICAgICAgICAgIGVudGl0eS5hZGRGaWVsZCh0eXBlSW5mby5uYW1lLCB0eXBlSW5mbyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpZWxkc1snY3JlYXRlZEJ5J10gPSB0cmFja0NyZWF0ZTtcbiAgICB9XG5cbiAgICBpZiAodHJhY2tVcGRhdGUpIHtcbiAgICAgICAgY29uc3QgdHlwZUluZm8gPSB7XG4gICAgICAgICAgICBuYW1lOiB0cmFja1VwZGF0ZSxcbiAgICAgICAgICAgIHR5cGU6IHVpZEZpZWxkLnR5cGUsXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGVudGl0eS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQodHlwZUluZm8ubmFtZSwgdHlwZUluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHNbJ3VwZGF0ZWRCeSddID0gdHJhY2tVcGRhdGU7XG4gICAgfVxuXG4gICAgaWYgKCFhZGRGaWVsZHNPbmx5KSB7XG4gICAgICAgIGVudGl0eS5hZGRGZWF0dXJlKEZFQVRVUkVfTkFNRSwge1xuICAgICAgICAgICAgZmllbGRzLFxuICAgICAgICAgICAgdWlkU291cmNlXG4gICAgICAgIH0pOyAgICBcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmVhdHVyZTsiXX0=