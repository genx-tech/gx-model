"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'userEditTracking';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    revisionField: 'revision',
    addFieldsOnly: false,
    ...args[0]
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate,
    revisionField,
    addFieldsOnly,
    migrationUser
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    fields['createdBy'] = trackCreate;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackCreate,
      fieldProps: {
        readOnly: true,
        writeOnce: true
      }
    });
  }

  if (trackUpdate) {
    entity.once('afterAddingFields', () => {
      entity.addField(revisionField, {
        type: 'integer',
        default: 0
      });
    });
    fields['updatedBy'] = trackUpdate;
    fields['revision'] = revisionField;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackUpdate,
      fieldProps: {
        readOnly: true,
        optional: true
      }
    });
  }

  if (!addFieldsOnly) {
    entity.addFeature(FEATURE_NAME, {
      fields,
      uidSource,
      migrationUser
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJyZXZpc2lvbkZpZWxkIiwiYWRkRmllbGRzT25seSIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFJlZiIsIm1pZ3JhdGlvblVzZXIiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJpbmZvIiwiYXNzb2NpYXRpb25zIiwicHVzaCIsInR5cGUiLCJkZXN0RW50aXR5Iiwic3JjRmllbGQiLCJmaWVsZFByb3BzIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbmNlIiwiYWRkRmllbGQiLCJkZWZhdWx0Iiwib3B0aW9uYWwiLCJhZGRGZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxZQUFZLEdBQUcsa0JBQXJCOztBQVlBLFNBQVNDLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxJQUF6QixFQUErQjtBQUMzQixRQUFNQyxPQUFPLEdBQUc7QUFDWkMsSUFBQUEsVUFBVSxFQUFFLFNBREE7QUFFWkMsSUFBQUEsU0FBUyxFQUFFLGVBRkM7QUFHWkMsSUFBQUEsV0FBVyxFQUFFLFdBSEQ7QUFJWkMsSUFBQUEsV0FBVyxFQUFFLFdBSkQ7QUFLWkMsSUFBQUEsYUFBYSxFQUFFLFVBTEg7QUFNWkMsSUFBQUEsYUFBYSxFQUFFLEtBTkg7QUFPWixPQUFHUCxJQUFJLENBQUMsQ0FBRDtBQVBLLEdBQWhCO0FBVUEsUUFBTTtBQUNGUSxJQUFBQSxTQUFTLEVB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PSAndXNlckVkaXRUcmFja2luZyc7XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgZW50aXR5IHRvIGF1dG9tYXRpY2FsbHkgcmVjb3JkIHRoZSBjcmVhdGlvbiB0aW1lXG4gKiBAbW9kdWxlIEVudGl0eUZlYXR1cmVfVXNlckVkaXRUcmFja2luZ1xuICovXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgZmVhdHVyZVxuICogQHBhcmFtIHtPb2xvbmdFbnRpdHl9IGVudGl0eSAtIEVudGl0eSB0byBhcHBseSB0aGlzIGZlYXR1cmVcbiAqIEBwYXJhbSB7YXJyYXl9IG9wdGlvbnMgLSBGaWVsZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGZlYXR1cmUoZW50aXR5LCBhcmdzKSB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgdXNlckVudGl0eTogJ3VzZXIuaWQnLFxuICAgICAgICB1aWRTb3VyY2U6ICdzdGF0ZS51c2VyLmlkJyxcbiAgICAgICAgdHJhY2tDcmVhdGU6ICdjcmVhdGVkQnknLFxuICAgICAgICB0cmFja1VwZGF0ZTogJ3VwZGF0ZWRCeScsIFxuICAgICAgICByZXZpc2lvbkZpZWxkOiAncmV2aXNpb24nLCAgICAgICBcbiAgICAgICAgYWRkRmllbGRzT25seTogZmFsc2UsXG4gICAgICAgIC4uLmFyZ3NbMF1cbiAgICB9O1xuXG4gICAgY29uc3Qge1xuICAgICAgICB1c2VyRmllbGQ6IHVzZXJGaWVsZFJlZixcbiAgICAgICAgdWlkU291cmNlLFxuICAgICAgICB0cmFja0NyZWF0ZSxcbiAgICAgICAgdHJhY2tVcGRhdGUsXG4gICAgICAgIHJldmlzaW9uRmllbGQsXG4gICAgICAgIGFkZEZpZWxkc09ubHksXG4gICAgICAgIG1pZ3JhdGlvblVzZXJcbiAgICB9ID0gb3B0aW9uczsgICAgXG5cbiAgICBpZiAoIXRyYWNrQ3JlYXRlICYmICF0cmFja1VwZGF0ZSkge1xuICAgICAgICBlbnRpdHkubGlua2VyLmxvZygnd2FybicsICdTaW5jZSBib3RoIFwidHJhY2tDcmVhdGVcIiBhbmQgXCJ0cmFja1VwZGF0ZVwiIGFyZSBkaXNhYmxlZCwgdGhlIFwidXNlckVkaXRUcmFja2luZ1wiIGZlYXR1cmUgd2lsbCBub3QgdGFrZSBhbnkgZWZmZWN0LicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy90b2RvOiBjcm9zcyBzY2hlYW0gc3VwcG9ydFxuICAgIGNvbnN0IFsgdXNlckVudGl0eU5hbWUsIHVzZXJJZEZpZWxkIF0gPSB1c2VyRmllbGRSZWYuc3BsaXQoJy4nKTtcblxuICAgIGNvbnN0IHVzZXJFbnRpdHkgPSBlbnRpdHkuZ2V0UmVmZXJlbmNlZEVudGl0eSh1c2VyRW50aXR5TmFtZSk7XG4gICAgY29uc3QgdWlkRmllbGQgPSB1c2VySWRGaWVsZCA9PSBudWxsID8gdXNlckVudGl0eS5nZXRFbnRpdHlBdHRyaWJ1dGUoJyRrZXknKSA6IHVzZXJFbnRpdHkuZ2V0RW50aXR5QXR0cmlidXRlKHVzZXJJZEZpZWxkKTtcblxuICAgIGNvbnN0IGZpZWxkcyA9IHt9O1xuXG4gICAgaWYgKHRyYWNrQ3JlYXRlKSB7XG4gICAgICAgIGZpZWxkc1snY3JlYXRlZEJ5J10gPSB0cmFja0NyZWF0ZTtcblxuICAgICAgICBlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMgfHwgKGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucyA9IFtdKTtcbiAgICAgICAgZW50aXR5LmluZm8uYXNzb2NpYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3JlZmVyc1RvJyxcbiAgICAgICAgICAgIGRlc3RFbnRpdHk6IHVzZXJFbnRpdHlOYW1lLFxuICAgICAgICAgICAgc3JjRmllbGQ6IHRyYWNrQ3JlYXRlLFxuICAgICAgICAgICAgZmllbGRQcm9wczoge1xuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdyaXRlT25jZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodHJhY2tVcGRhdGUpIHtcbiAgICAgICAgZW50aXR5Lm9uY2UoJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgZW50aXR5LmFkZEZpZWxkKHJldmlzaW9uRmllbGQsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnaW50ZWdlcicsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogMFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpZWxkc1sndXBkYXRlZEJ5J10gPSB0cmFja1VwZGF0ZTtcbiAgICAgICAgZmllbGRzWydyZXZpc2lvbiddID0gcmV2aXNpb25GaWVsZDtcblxuICAgICAgICBlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMgfHwgKGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucyA9IFtdKTtcbiAgICAgICAgZW50aXR5LmluZm8uYXNzb2NpYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3JlZmVyc1RvJyxcbiAgICAgICAgICAgIGRlc3RFbnRpdHk6IHVzZXJFbnRpdHlOYW1lLFxuICAgICAgICAgICAgc3JjRmllbGQ6IHRyYWNrVXBkYXRlLFxuICAgICAgICAgICAgZmllbGRQcm9wczoge1xuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghYWRkRmllbGRzT25seSkge1xuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgICAgIG1pZ3JhdGlvblVzZXJcbiAgICAgICAgfSk7ICAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==