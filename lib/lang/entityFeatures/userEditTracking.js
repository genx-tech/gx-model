"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'createTimestamp';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    ...args
  };
  const {
    userEntity: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    const typeInfo = {
      name: trackCreate,
      type: uidField.type,
      readOnly: true,
      writeOnce: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['createdBy'] = trackCreate;
  }

  if (trackUpdate) {
    const typeInfo = {
      name: trackUpdate,
      type: uidField.type,
      readOnly: true
    };
    entity.on('afterAddingFields', () => {
      entity.addField(typeInfo.name, typeInfo);
    });
    fields['updatedBy'] = trackUpdate;
  }

  entity.addFeature(FEATURE_NAME, {
    fields,
    uidSource
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJ1c2VyRmllbGRSZWYiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJ0eXBlSW5mbyIsIm5hbWUiLCJ0eXBlIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbiIsImFkZEZpZWxkIiwiYWRkRmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLGlCQUFyQjs7QUFZQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDM0IsUUFBTUMsT0FBTyxHQUFHO0FBQ1pDLElBQUFBLFVBQVUsRUFBRSxTQURBO0FBRVpDLElBQUFBLFNBQVMsRUFBRSxlQUZDO0FBR1pDLElBQUFBLFdBQVcsRUFBRSxXQUhEO0FBSVpDLElBQUFBLFdBQVcsRUFBRSxXQUpEO0FBS1osT0FBR0w7QUFMUyxHQUFoQjtBQVFBLFFBQU07QUFDRkUsSUFBQUEsVUFBVSxFQUFFSSxZQURWO0FBRUZILElBQUFBLFNBRkU7QUFHRkMsSUFBQUEsV0FIRTtBQUlGQyxJQUFBQTtBQUpFLE1BS0ZKLE9BTEo7O0FBT0EsTUFBSSxDQUFDRyxXQUFELElBQWdCLENBQUNDLFdBQXJCLEVBQWtDO0FBQzlCTixJQUFBQSxNQUFNLENBQUNRLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixNQUFsQixFQUEwQixtSEFBMUI7QUFDQTtBQUNIOztBQUdELFFBQU0sQ0FBRUMsY0FBRixFQUFrQkMsV0FBbEIsSUFBa0NKLFlBQVksQ0FBQ0ssS0FBYixDQUFtQixHQUFuQixDQUF4QztBQUVBLFFBQU1ULFVBQVUsR0FBR0gsTUFBTSxDQUFDYSxtQkFBUCxDQUEyQkgsY0FBM0IsQ0FBbkI7QUFDQSxRQUFNSSxRQUFRLEdBQUdILFdBQVcsSUFBSSxJQUFmLEdBQXNCUixVQUFVLENBQUNZLGtCQUFYLENBQThCLE1BQTlCLENBQXRCLEdBQThEWixVQUFVLENBQUNZLGtCQUFYLENBQThCSixXQUE5QixDQUEvRTtBQUVBLFFBQU1LLE1BQU0sR0FBRyxFQUFmOztBQUVBLE1BQUlYLFdBQUosRUFBaUI7QUFDYixVQUFNWSxRQUFRLEdBQUc7QUFDYkMsTUFBQUEsSUFBSSxFQUFFYixXQURPO0FBRWJjLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDSyxJQUZGO0FBR2JDLE1BQUFBLFFBQVEsRUFBRSxJQUhHO0FBSWJDLE1BQUFBLFNBQVMsRUFBRTtBQUpFLEtBQWpCO0FBT0FyQixJQUFBQSxNQUFNLENBQUNzQixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQ3RCLE1BQUFBLE1BQU0sQ0FBQ3VCLFFBQVAsQ0FBZ0JOLFFBQVEsQ0FBQ0MsSUFBekIsRUFBK0JELFFBQS9CO0FBQ0gsS0FGRDtBQUlBRCxJQUFBQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCWCxXQUF0QjtBQUNIOztBQUVELE1BQUlDLFdBQUosRUFBaUI7QUFDYixVQUFNVyxRQUFRLEdBQUc7QUFDYkMsTUFBQUEsSUFBSSxFQUFFWixXQURPO0FBRWJhLE1BQUFBLElBQUksRUFBRUwsUUFBUSxDQUFDSyxJQUZGO0FBR2JDLE1BQUFBLFFBQVEsRUFBRTtBQUhHLEtBQWpCO0FBTUFwQixJQUFBQSxNQUFNLENBQUNzQixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQ3RCLE1BQUFBLE1BQU0sQ0FBQ3VCLFFBQVAsQ0FBZ0JOLFFBQVEsQ0FBQ0MsSUFBekIsRUFBK0JELFFBQS9CO0FBQ0gsS0FGRDtBQUlBRCxJQUFBQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCVixXQUF0QjtBQUNIOztBQUVETixFQUFBQSxNQUFNLENBQUN3QixVQUFQLENBQWtCMUIsWUFBbEIsRUFBZ0M7QUFDNUJrQixJQUFBQSxNQUQ0QjtBQUU1QlosSUFBQUE7QUFGNEIsR0FBaEM7QUFJSDs7QUFFRHFCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IEZFQVRVUkVfTkFNRSA9ICdjcmVhdGVUaW1lc3RhbXAnO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGVudGl0eSB0byBhdXRvbWF0aWNhbGx5IHJlY29yZCB0aGUgY3JlYXRpb24gdGltZVxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX1VzZXJFZGl0VHJhY2tpbmdcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge2FycmF5fSBvcHRpb25zIC0gRmllbGQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBmZWF0dXJlKGVudGl0eSwgYXJncykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHVzZXJFbnRpdHk6ICd1c2VyLmlkJyxcbiAgICAgICAgdWlkU291cmNlOiAnc3RhdGUudXNlci5pZCcsXG4gICAgICAgIHRyYWNrQ3JlYXRlOiAnY3JlYXRlZEJ5JyxcbiAgICAgICAgdHJhY2tVcGRhdGU6ICd1cGRhdGVkQnknLFxuICAgICAgICAuLi5hcmdzXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgdXNlckVudGl0eTogdXNlckZpZWxkUmVmLFxuICAgICAgICB1aWRTb3VyY2UsXG4gICAgICAgIHRyYWNrQ3JlYXRlLFxuICAgICAgICB0cmFja1VwZGF0ZVxuICAgIH0gPSBvcHRpb25zOyAgICBcblxuICAgIGlmICghdHJhY2tDcmVhdGUgJiYgIXRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGVudGl0eS5saW5rZXIubG9nKCd3YXJuJywgJ1NpbmNlIGJvdGggXCJ0cmFja0NyZWF0ZVwiIGFuZCBcInRyYWNrVXBkYXRlXCIgYXJlIGRpc2FibGVkLCB0aGUgXCJ1c2VyRWRpdFRyYWNraW5nXCIgZmVhdHVyZSB3aWxsIG5vdCB0YWtlIGFueSBlZmZlY3QuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL3RvZG86IGNyb3NzIHNjaGVhbSBzdXBwb3J0XG4gICAgY29uc3QgWyB1c2VyRW50aXR5TmFtZSwgdXNlcklkRmllbGQgXSA9IHVzZXJGaWVsZFJlZi5zcGxpdCgnLicpO1xuXG4gICAgY29uc3QgdXNlckVudGl0eSA9IGVudGl0eS5nZXRSZWZlcmVuY2VkRW50aXR5KHVzZXJFbnRpdHlOYW1lKTtcbiAgICBjb25zdCB1aWRGaWVsZCA9IHVzZXJJZEZpZWxkID09IG51bGwgPyB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSgnJGtleScpIDogdXNlckVudGl0eS5nZXRFbnRpdHlBdHRyaWJ1dGUodXNlcklkRmllbGQpO1xuXG4gICAgY29uc3QgZmllbGRzID0ge307XG5cbiAgICBpZiAodHJhY2tDcmVhdGUpIHtcbiAgICAgICAgY29uc3QgdHlwZUluZm8gPSB7XG4gICAgICAgICAgICBuYW1lOiB0cmFja0NyZWF0ZSxcbiAgICAgICAgICAgIHR5cGU6IHVpZEZpZWxkLnR5cGUsXG4gICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgIHdyaXRlT25jZTogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGVudGl0eS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQodHlwZUluZm8ubmFtZSwgdHlwZUluZm8pO1xuICAgICAgICB9KTtcblxuICAgICAgICBmaWVsZHNbJ2NyZWF0ZWRCeSddID0gdHJhY2tDcmVhdGU7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGNvbnN0IHR5cGVJbmZvID0ge1xuICAgICAgICAgICAgbmFtZTogdHJhY2tVcGRhdGUsXG4gICAgICAgICAgICB0eXBlOiB1aWRGaWVsZC50eXBlLFxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICBlbnRpdHkub24oJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICAgICAgZW50aXR5LmFkZEZpZWxkKHR5cGVJbmZvLm5hbWUsIHR5cGVJbmZvKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZmllbGRzWyd1cGRhdGVkQnknXSA9IHRyYWNrVXBkYXRlO1xuICAgIH1cblxuICAgIGVudGl0eS5hZGRGZWF0dXJlKEZFQVRVUkVfTkFNRSwge1xuICAgICAgICBmaWVsZHMsXG4gICAgICAgIHVpZFNvdXJjZVxuICAgIH0pOyAgICBcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==