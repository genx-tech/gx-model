"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'userEditTracking';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    revisionField: 'revision',
    addFieldsOnly: false,
    ...args[0]
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate,
    revisionField,
    addFieldsOnly,
    migrationUser
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    fields['createdBy'] = trackCreate;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackCreate,
      fieldProps: {
        readOnly: true,
        writeOnce: true
      }
    });
  }

  if (trackUpdate) {
    entity.on('afterAddingFields', () => {
      entity.addField(revisionField, {
        type: 'integer',
        readOnly: true
      });
    });
    fields['updatedBy'] = trackUpdate;
    fields['revision'] = revisionField;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackUpdate,
      fieldProps: {
        readOnly: true
      }
    });
  }

  if (!addFieldsOnly) {
    entity.addFeature(FEATURE_NAME, {
      fields,
      uidSource,
      migrationUser
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJyZXZpc2lvbkZpZWxkIiwiYWRkRmllbGRzT25seSIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFJlZiIsIm1pZ3JhdGlvblVzZXIiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJpbmZvIiwiYXNzb2NpYXRpb25zIiwicHVzaCIsInR5cGUiLCJkZXN0RW50aXR5Iiwic3JjRmllbGQiLCJmaWVsZFByb3BzIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbiIsImFkZEZpZWxkIiwiYWRkRmVhdHVyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBRUEsTUFBTUEsWUFBWSxHQUFHLGtCQUFyQjs7QUFZQSxTQUFTQyxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBekIsRUFBK0I7QUFDM0IsUUFBTUMsT0FBTyxHQUFHO0FBQ1pDLElBQUFBLFVBQVUsRUFBRSxTQURBO0FBRVpDLElBQUFBLFNBQVMsRUFBRSxlQUZDO0FBR1pDLElBQUFBLFdBQVcsRUFBRSxXQUhEO0FBSVpDLElBQUFBLFdBQVcsRUFBRSxXQUpEO0FBS1pDLElBQUFBLGFBQWEsRUFBRSxVQUxIO0FBTVpDLElBQUFBLGFBQWEsRUFBRSxLQU5IO0FBT1osT0FBR1AsSUFBSSxDQUFDLENBQUQ7QUFQSyxHQUFoQjtBQVVBLFFBQU07QUFDRlEsSUFBQUEsU0FBUyxFQUFFQyxZQURUO0FBRUZOLElBQUFBLFNBRkU7QUFHRkMsSUFBQUEsV0FIRTtBQUlGQyxJQUFBQSxXQUpFO0FBS0ZDLElBQUFBLGFBTEU7QUFNRkMsSUFBQUEsYUFORTtBQU9GRyxJQUFBQTtBQVBFLE1BUUZULE9BUko7O0FBVUEsTUFBSSxDQUFDRyxXQUFELElBQWdCLENBQUNDLFdBQXJCLEVBQWtDO0FBQzlCTixJQUFBQSxNQUFNLENBQUNZLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixNQUFsQixFQUEwQixtSEFBMUI7QUFDQTtBQUNIOztBQUdELFFBQU0sQ0FBRUMsY0FBRixFQUFrQkMsV0FBbEIsSUFBa0NMLFlBQVksQ0FBQ00sS0FBYixDQUFtQixHQUFuQixDQUF4QztBQUVBLFFBQU1iLFVBQVUsR0FBR0gsTUFBTSxDQUFDaUIsbUJBQVAsQ0FBMkJILGNBQTNCLENBQW5CO0FBQ0EsUUFBTUksUUFBUSxHQUFHSCxXQUFXLElBQUksSUFBZixHQUFzQlosVUFBVSxDQUFDZ0Isa0JBQVgsQ0FBOEIsTUFBOUIsQ0FBdEIsR0FBOERoQixVQUFVLENBQUNnQixrQkFBWCxDQUE4QkosV0FBOUIsQ0FBL0U7QUFFQSxRQUFNSyxNQUFNLEdBQUcsRUFBZjs7QUFFQSxNQUFJZixXQUFKLEVBQWlCO0FBQ2JlLElBQUFBLE1BQU0sQ0FBQyxXQUFELENBQU4sR0FBc0JmLFdBQXRCO0FBRUFMLElBQUFBLE1BQU0sQ0FBQ3FCLElBQVAsQ0FBWUMsWUFBWixLQUE2QnRCLE1BQU0sQ0FBQ3FCLElBQVAsQ0FBWUMsWUFBWixHQUEyQixFQUF4RDtBQUNBdEIsSUFBQUEsTUFBTSxDQUFDcUIsSUFBUCxDQUFZQyxZQUFaLENBQXlCQyxJQUF6QixDQUE4QjtBQUMxQkMsTUFBQUEsSUFBSSxFQUFFLFVBRG9CO0FBRTFCQyxNQUFBQSxVQUFVLEVBQUVYLGNBRmM7QUFHMUJZLE1BQUFBLFFBQVEsRUFBRXJCLFdBSGdCO0FBSTFCc0IsTUFBQUEsVUFBVSxFQUFFO0FBQ1JDLFFBQUFBLFFBQVEsRUFBRSxJQURGO0FBRVJDLFFBQUFBLFNBQVMsRUFBRTtBQUZIO0FBSmMsS0FBOUI7QUFTSDs7QUFFRCxNQUFJdkIsV0FBSixFQUFpQjtBQUNiTixJQUFBQSxNQUFNLENBQUM4QixFQUFQLENBQVUsbUJBQVYsRUFBK0IsTUFBTTtBQUNqQzlCLE1BQUFBLE1BQU0sQ0FBQytCLFFBQVAsQ0FBZ0J4QixhQUFoQixFQUErQjtBQUMzQmlCLFFBQUFBLElBQUksRUFBRSxTQURxQjtBQUUzQkksUUFBQUEsUUFBUSxFQUFFO0FBRmlCLE9BQS9CO0FBSUgsS0FMRDtBQU9BUixJQUFBQSxNQUFNLENBQUMsV0FBRCxDQUFOLEdBQXNCZCxXQUF0QjtBQUNBYyxJQUFBQSxNQUFNLENBQUMsVUFBRCxDQUFOLEdBQXFCYixhQUFyQjtBQUVBUCxJQUFBQSxNQUFNLENBQUNxQixJQUFQLENBQVlDLFlBQVosS0FBNkJ0QixNQUFNLENBQUNxQixJQUFQLENBQVlDLFlBQVosR0FBMkIsRUFBeEQ7QUFDQXRCLElBQUFBLE1BQU0sQ0FBQ3FCLElBQVAsQ0FBWUMsWUFBWixDQUF5QkMsSUFBekIsQ0FBOEI7QUFDMUJDLE1BQUFBLElBQUksRUFBRSxVQURvQjtBQUUxQkMsTUFBQUEsVUFBVSxFQUFFWCxjQUZjO0FBRzFCWSxNQUFBQSxRQUFRLEVBQUVwQixXQUhnQjtBQUkxQnFCLE1BQUFBLFVBQVUsRUFBRTtBQUNSQyxRQUFBQSxRQUFRLEVBQUU7QUFERjtBQUpjLEtBQTlCO0FBUUg7O0FBRUQsTUFBSSxDQUFDcEIsYUFBTCxFQUFvQjtBQUNoQlIsSUFBQUEsTUFBTSxDQUFDZ0MsVUFBUCxDQUFrQmxDLFlBQWxCLEVBQWdDO0FBQzVCc0IsTUFBQUEsTUFENEI7QUFFNUJoQixNQUFBQSxTQUY0QjtBQUc1Qk8sTUFBQUE7QUFINEIsS0FBaEM7QUFLSDtBQUNKOztBQUVEc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkMsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuY29uc3QgRkVBVFVSRV9OQU1FID0gJ3VzZXJFZGl0VHJhY2tpbmcnO1xuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGVudGl0eSB0byBhdXRvbWF0aWNhbGx5IHJlY29yZCB0aGUgY3JlYXRpb24gdGltZVxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX1VzZXJFZGl0VHJhY2tpbmdcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge2FycmF5fSBvcHRpb25zIC0gRmllbGQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBmZWF0dXJlKGVudGl0eSwgYXJncykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIHVzZXJFbnRpdHk6ICd1c2VyLmlkJyxcbiAgICAgICAgdWlkU291cmNlOiAnc3RhdGUudXNlci5pZCcsXG4gICAgICAgIHRyYWNrQ3JlYXRlOiAnY3JlYXRlZEJ5JyxcbiAgICAgICAgdHJhY2tVcGRhdGU6ICd1cGRhdGVkQnknLCBcbiAgICAgICAgcmV2aXNpb25GaWVsZDogJ3JldmlzaW9uJywgICAgICAgXG4gICAgICAgIGFkZEZpZWxkc09ubHk6IGZhbHNlLFxuICAgICAgICAuLi5hcmdzWzBdXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgICAgdXNlckZpZWxkOiB1c2VyRmllbGRSZWYsXG4gICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgdHJhY2tDcmVhdGUsXG4gICAgICAgIHRyYWNrVXBkYXRlLFxuICAgICAgICByZXZpc2lvbkZpZWxkLFxuICAgICAgICBhZGRGaWVsZHNPbmx5LFxuICAgICAgICBtaWdyYXRpb25Vc2VyXG4gICAgfSA9IG9wdGlvbnM7ICAgIFxuXG4gICAgaWYgKCF0cmFja0NyZWF0ZSAmJiAhdHJhY2tVcGRhdGUpIHtcbiAgICAgICAgZW50aXR5Lmxpbmtlci5sb2coJ3dhcm4nLCAnU2luY2UgYm90aCBcInRyYWNrQ3JlYXRlXCIgYW5kIFwidHJhY2tVcGRhdGVcIiBhcmUgZGlzYWJsZWQsIHRoZSBcInVzZXJFZGl0VHJhY2tpbmdcIiBmZWF0dXJlIHdpbGwgbm90IHRha2UgYW55IGVmZmVjdC4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vdG9kbzogY3Jvc3Mgc2NoZWFtIHN1cHBvcnRcbiAgICBjb25zdCBbIHVzZXJFbnRpdHlOYW1lLCB1c2VySWRGaWVsZCBdID0gdXNlckZpZWxkUmVmLnNwbGl0KCcuJyk7XG5cbiAgICBjb25zdCB1c2VyRW50aXR5ID0gZW50aXR5LmdldFJlZmVyZW5jZWRFbnRpdHkodXNlckVudGl0eU5hbWUpO1xuICAgIGNvbnN0IHVpZEZpZWxkID0gdXNlcklkRmllbGQgPT0gbnVsbCA/IHVzZXJFbnRpdHkuZ2V0RW50aXR5QXR0cmlidXRlKCcka2V5JykgOiB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSh1c2VySWRGaWVsZCk7XG5cbiAgICBjb25zdCBmaWVsZHMgPSB7fTtcblxuICAgIGlmICh0cmFja0NyZWF0ZSkge1xuICAgICAgICBmaWVsZHNbJ2NyZWF0ZWRCeSddID0gdHJhY2tDcmVhdGU7XG5cbiAgICAgICAgZW50aXR5LmluZm8uYXNzb2NpYXRpb25zIHx8IChlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMgPSBbXSk7XG4gICAgICAgIGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdyZWZlcnNUbycsXG4gICAgICAgICAgICBkZXN0RW50aXR5OiB1c2VyRW50aXR5TmFtZSxcbiAgICAgICAgICAgIHNyY0ZpZWxkOiB0cmFja0NyZWF0ZSxcbiAgICAgICAgICAgIGZpZWxkUHJvcHM6IHtcbiAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB3cml0ZU9uY2U6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGVudGl0eS5vbignYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQocmV2aXNpb25GaWVsZCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpZWxkc1sndXBkYXRlZEJ5J10gPSB0cmFja1VwZGF0ZTtcbiAgICAgICAgZmllbGRzWydyZXZpc2lvbiddID0gcmV2aXNpb25GaWVsZDtcblxuICAgICAgICBlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMgfHwgKGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucyA9IFtdKTtcbiAgICAgICAgZW50aXR5LmluZm8uYXNzb2NpYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3JlZmVyc1RvJyxcbiAgICAgICAgICAgIGRlc3RFbnRpdHk6IHVzZXJFbnRpdHlOYW1lLFxuICAgICAgICAgICAgc3JjRmllbGQ6IHRyYWNrVXBkYXRlLFxuICAgICAgICAgICAgZmllbGRQcm9wczoge1xuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghYWRkRmllbGRzT25seSkge1xuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgICAgIG1pZ3JhdGlvblVzZXJcbiAgICAgICAgfSk7ICAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==