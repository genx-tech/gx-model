"use strict";

require("source-map-support/register");

const FEATURE_NAME = 'userEditTracking';

function feature(entity, args) {
  const options = {
    userEntity: 'user.id',
    uidSource: 'state.user.id',
    trackCreate: 'createdBy',
    trackUpdate: 'updatedBy',
    revisionField: 'revision',
    addFieldsOnly: false,
    ...args[0]
  };
  const {
    userField: userFieldRef,
    uidSource,
    trackCreate,
    trackUpdate,
    revisionField,
    addFieldsOnly,
    migrationUser
  } = options;

  if (!trackCreate && !trackUpdate) {
    entity.linker.log('warn', 'Since both "trackCreate" and "trackUpdate" are disabled, the "userEditTracking" feature will not take any effect.');
    return;
  }

  const [userEntityName, userIdField] = userFieldRef.split('.');
  const userEntity = entity.getReferencedEntity(userEntityName);
  const uidField = userIdField == null ? userEntity.getEntityAttribute('$key') : userEntity.getEntityAttribute(userIdField);
  const fields = {};

  if (trackCreate) {
    fields['createdBy'] = trackCreate;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackCreate,
      fieldProps: {
        readOnly: true,
        writeOnce: true
      }
    });
  }

  if (trackUpdate) {
    entity.once('afterAddingFields', () => {
      entity.addField(revisionField, {
        type: 'integer',
        readOnly: true
      });
    });
    fields['updatedBy'] = trackUpdate;
    fields['revision'] = revisionField;
    entity.info.associations || (entity.info.associations = []);
    entity.info.associations.push({
      type: 'refersTo',
      destEntity: userEntityName,
      srcField: trackUpdate,
      fieldProps: {
        readOnly: true,
        optional: true
      }
    });
  }

  if (!addFieldsOnly) {
    entity.addFeature(FEATURE_NAME, {
      fields,
      uidSource,
      migrationUser
    });
  }
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3VzZXJFZGl0VHJhY2tpbmcuanMiXSwibmFtZXMiOlsiRkVBVFVSRV9OQU1FIiwiZmVhdHVyZSIsImVudGl0eSIsImFyZ3MiLCJvcHRpb25zIiwidXNlckVudGl0eSIsInVpZFNvdXJjZSIsInRyYWNrQ3JlYXRlIiwidHJhY2tVcGRhdGUiLCJyZXZpc2lvbkZpZWxkIiwiYWRkRmllbGRzT25seSIsInVzZXJGaWVsZCIsInVzZXJGaWVsZFJlZiIsIm1pZ3JhdGlvblVzZXIiLCJsaW5rZXIiLCJsb2ciLCJ1c2VyRW50aXR5TmFtZSIsInVzZXJJZEZpZWxkIiwic3BsaXQiLCJnZXRSZWZlcmVuY2VkRW50aXR5IiwidWlkRmllbGQiLCJnZXRFbnRpdHlBdHRyaWJ1dGUiLCJmaWVsZHMiLCJpbmZvIiwiYXNzb2NpYXRpb25zIiwicHVzaCIsInR5cGUiLCJkZXN0RW50aXR5Iiwic3JjRmllbGQiLCJmaWVsZFByb3BzIiwicmVhZE9ubHkiLCJ3cml0ZU9uY2UiLCJvbmNlIiwiYWRkRmllbGQiLCJvcHRpb25hbCIsImFkZEZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLFlBQVksR0FBRyxrQkFBckI7O0FBWUEsU0FBU0MsT0FBVCxDQUFpQkMsTUFBakIsRUFBeUJDLElBQXpCLEVBQStCO0FBQzNCLFFBQU1DLE9BQU8sR0FBRztBQUNaQyxJQUFBQSxVQUFVLEVBQUUsU0FEQTtBQUVaQyxJQUFBQSxTQUFTLEVBQUUsZUFGQztBQUdaQyxJQUFBQSxXQUFXLEVBQUUsV0FIRDtBQUlaQyxJQUFBQSxXQUFXLEVBQUUsV0FKRDtBQUtaQyxJQUFBQSxhQUFhLEVBQUUsVUFMSDtBQU1aQyxJQUFBQSxhQUFhLEVBQUUsS0FOSDtBQU9aLE9BQUdQLElBQUksQ0FBQyxDQUFEO0FBUEssR0FBaEI7QUFVQSxRQUFNO0FBQ0ZRLElBQUFBLFNBQVMsRUFBRUMsWUFEVDtB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dFRyYWNraW5nJztcblxuLyoqXG4gKiBBIHJ1bGUgc3BlY2lmaWVzIHRoZSBlbnRpdHkgdG8gYXV0b21hdGljYWxseSByZWNvcmQgdGhlIGNyZWF0aW9uIHRpbWVcbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZV9Vc2VyRWRpdFRyYWNraW5nXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHthcnJheX0gb3B0aW9ucyAtIEZpZWxkIG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MpIHtcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICB1c2VyRW50aXR5OiAndXNlci5pZCcsXG4gICAgICAgIHVpZFNvdXJjZTogJ3N0YXRlLnVzZXIuaWQnLFxuICAgICAgICB0cmFja0NyZWF0ZTogJ2NyZWF0ZWRCeScsXG4gICAgICAgIHRyYWNrVXBkYXRlOiAndXBkYXRlZEJ5JywgXG4gICAgICAgIHJldmlzaW9uRmllbGQ6ICdyZXZpc2lvbicsICAgICAgIFxuICAgICAgICBhZGRGaWVsZHNPbmx5OiBmYWxzZSxcbiAgICAgICAgLi4uYXJnc1swXVxuICAgIH07XG5cbiAgICBjb25zdCB7XG4gICAgICAgIHVzZXJGaWVsZDogdXNlckZpZWxkUmVmLFxuICAgICAgICB1aWRTb3VyY2UsXG4gICAgICAgIHRyYWNrQ3JlYXRlLFxuICAgICAgICB0cmFja1VwZGF0ZSxcbiAgICAgICAgcmV2aXNpb25GaWVsZCxcbiAgICAgICAgYWRkRmllbGRzT25seSxcbiAgICAgICAgbWlncmF0aW9uVXNlclxuICAgIH0gPSBvcHRpb25zOyAgICBcblxuICAgIGlmICghdHJhY2tDcmVhdGUgJiYgIXRyYWNrVXBkYXRlKSB7XG4gICAgICAgIGVudGl0eS5saW5rZXIubG9nKCd3YXJuJywgJ1NpbmNlIGJvdGggXCJ0cmFja0NyZWF0ZVwiIGFuZCBcInRyYWNrVXBkYXRlXCIgYXJlIGRpc2FibGVkLCB0aGUgXCJ1c2VyRWRpdFRyYWNraW5nXCIgZmVhdHVyZSB3aWxsIG5vdCB0YWtlIGFueSBlZmZlY3QuJyk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvL3RvZG86IGNyb3NzIHNjaGVhbSBzdXBwb3J0XG4gICAgY29uc3QgWyB1c2VyRW50aXR5TmFtZSwgdXNlcklkRmllbGQgXSA9IHVzZXJGaWVsZFJlZi5zcGxpdCgnLicpO1xuXG4gICAgY29uc3QgdXNlckVudGl0eSA9IGVudGl0eS5nZXRSZWZlcmVuY2VkRW50aXR5KHVzZXJFbnRpdHlOYW1lKTtcbiAgICBjb25zdCB1aWRGaWVsZCA9IHVzZXJJZEZpZWxkID09IG51bGwgPyB1c2VyRW50aXR5LmdldEVudGl0eUF0dHJpYnV0ZSgnJGtleScpIDogdXNlckVudGl0eS5nZXRFbnRpdHlBdHRyaWJ1dGUodXNlcklkRmllbGQpO1xuXG4gICAgY29uc3QgZmllbGRzID0ge307XG5cbiAgICBpZiAodHJhY2tDcmVhdGUpIHtcbiAgICAgICAgZmllbGRzWydjcmVhdGVkQnknXSA9IHRyYWNrQ3JlYXRlO1xuXG4gICAgICAgIGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucyB8fCAoZW50aXR5LmluZm8uYXNzb2NpYXRpb25zID0gW10pO1xuICAgICAgICBlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiAncmVmZXJzVG8nLFxuICAgICAgICAgICAgZGVzdEVudGl0eTogdXNlckVudGl0eU5hbWUsXG4gICAgICAgICAgICBzcmNGaWVsZDogdHJhY2tDcmVhdGUsXG4gICAgICAgICAgICBmaWVsZFByb3BzOiB7XG4gICAgICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgICAgICAgICAgd3JpdGVPbmNlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0cmFja1VwZGF0ZSkge1xuICAgICAgICBlbnRpdHkub25jZSgnYWZ0ZXJBZGRpbmdGaWVsZHMnLCAoKSA9PiB7XG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQocmV2aXNpb25GaWVsZCwge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdpbnRlZ2VyJyxcbiAgICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZpZWxkc1sndXBkYXRlZEJ5J10gPSB0cmFja1VwZGF0ZTtcbiAgICAgICAgZmllbGRzWydyZXZpc2lvbiddID0gcmV2aXNpb25GaWVsZDtcblxuICAgICAgICBlbnRpdHkuaW5mby5hc3NvY2lhdGlvbnMgfHwgKGVudGl0eS5pbmZvLmFzc29jaWF0aW9ucyA9IFtdKTtcbiAgICAgICAgZW50aXR5LmluZm8uYXNzb2NpYXRpb25zLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3JlZmVyc1RvJyxcbiAgICAgICAgICAgIGRlc3RFbnRpdHk6IHVzZXJFbnRpdHlOYW1lLFxuICAgICAgICAgICAgc3JjRmllbGQ6IHRyYWNrVXBkYXRlLFxuICAgICAgICAgICAgZmllbGRQcm9wczoge1xuICAgICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghYWRkRmllbGRzT25seSkge1xuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkcyxcbiAgICAgICAgICAgIHVpZFNvdXJjZSxcbiAgICAgICAgICAgIG1pZ3JhdGlvblVzZXJcbiAgICAgICAgfSk7ICAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmZWF0dXJlOyJdfQ==