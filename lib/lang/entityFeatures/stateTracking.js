"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  pascalCase
} = Util;
const FEATURE_NAME = 'stateTracking';
const FIELD_NAME_SUFFIX = 'Timestamp';

function timestampFieldNaming(field, state) {
  return field + pascalCase(state) + FIELD_NAME_SUFFIX;
}

function feature(entity, args = []) {
  let [options] = args;

  if (!options) {
    throw new Error('Missing field options!');
  }

  if (typeof options === 'string') {
    options = {
      field: options
    };
  }

  if (!options.field) {
    throw new Error('Missing field name in options!');
  }

  let stateSetTimestamp = {
    type: 'datetime',
    readOnly: true,
    optional: true,
    auto: true
  };

  if (!options.reversible) {
    stateSetTimestamp.writeOnce = true;
  }

  entity.once('afterAddingFields', () => {
    if (!entity.hasField(options.field)) {
      throw new Error('Field "' + options.field + '" does not exist!');
    }

    let fieldInfo = entity.fields[options.field];

    if (fieldInfo.type !== 'enum') {
      throw new Error('Only enum field can be used with stateTracking feature!');
    }

    let stateMapping = {};
    fieldInfo.values.forEach(state => {
      let fieldName = timestampFieldNaming(options.field, state);
      entity.addField(fieldName, stateSetTimestamp);
      stateMapping[state] = fieldName;
    });
    entity.addFeature(FEATURE_NAME, {
      field: options.field,
      stateMapping
    }, true);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3N0YXRlVHJhY2tpbmcuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJwYXNjYWxDYXNlIiwiRkVBVFVSRV9OQU1FIiwiRklFTERfTkFNRV9TVUZGSVgiLCJ0aW1lc3RhbXBGaWVsZE5hbWluZyIsImZpZWxkIiwic3RhdGUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsIm9wdGlvbnMiLCJFcnJvciIsInN0YXRlU2V0VGltZXN0YW1wIiwidHlwZSIsInJlYWRPbmx5Iiwib3B0aW9uYWwiLCJhdXRvIiwicmV2ZXJzaWJsZSIsIndyaXRlT25jZSIsIm9uY2UiLCJoYXNGaWVsZCIsImZpZWxkSW5mbyIsImZpZWxkcyIsInN0YXRlTWFwcGluZyIsInZhbHVlcyIsImZvckVhY2giLCJmaWVsZE5hbWUiLCJhZGRGaWVsZCIsImFkZEZlYXR1cmUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUVBLE1BQU1BLElBQUksR0FBR0MsT0FBTyxDQUFDLFVBQUQsQ0FBcEI7O0FBQ0EsTUFBTTtBQUFFQyxFQUFBQTtBQUFGLElBQWlCRixJQUF2QjtBQUVBLE1BQU1HLFlBQVksR0FBRyxlQUFyQjtBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFdBQTFCOztBQUVBLFNBQVNDLG9CQUFULENBQThCQyxLQUE5QixFQUFxQ0MsS0FBckMsRUFBNEM7QUFDeEMsU0FBT0QsS0FBSyxHQUFHSixVQUFVLENBQUNLLEtBQUQsQ0FBbEIsR0FBNEJILGlCQUFuQztBQUNIOztBQWNELFNBQVNJLE9BQVQsQ0FBaUJDLE1BQWpCLEVBQXlCQyxJQUFJLEdBQUcsRUFBaEMsRUFBb0M7QUFDaEMsTUFBSSxDQUFFQyxPQUFGLElBQWNELElBQWxCOztBQUVBLE1BQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1YsVUFBTSxJQUFJQyxLQUFKLENBQVUsd0JBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUksT0FBT0QsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUM3QkEsSUFBQUEsT0FBTyxHQUFHO0FBQUVMLE1BQUFBLEtBQUssRUFBRUs7QUFBVCxLQUFWO0FBQ0g7O0FBRUQsTUFBSSxDQUFDQSxPQUFPLENBQUNMLEtBQWIsRUFBb0I7QUFDaEIsVUFBTSxJQUFJTSxLQUFKLENBQVUsZ0NBQVYsQ0FBTjtBQUNIOztBQUVELE1BQUlDLGlCQUFpQixHQUFHO0FBQ3BCQyxJQUFBQSxJQUFJLEVBQUUsVUFEYztBQUVwQkMsSUFBQUEsUUFBUSxFQUFFLElBRlU7QUFHcEJDLElBQUFBLFFBQVEsRUFBRSxJQUhVO0FBSXBCQyxJQUFBQSxJQUFJLEVBQUU7QUFKYyxHQUF4Qjs7QUFPQSxNQUFJLENBQUNOLE9BQU8sQ0FBQ08sVUFBYixFQUF5QjtBQUNyQkwsSUFBQUEsaUJBQWlCLENBQUNNLFNBQWxCLEdBQThCLElBQTlCO0FBQ0g7O0FBRURWLEVBQUFBLE1BQU0sQ0FBQ1csSUFBUCxDQUFZLG1CQUFaLEVBQWlDLE1BQU07QUFDbkMsUUFBSSxDQUFDWCxNQUFNLENBQUNZLFFBQVAsQ0FBZ0JWLE9BQU8sQ0FBQ0wsS0FBeEIsQ0FBTCxFQUFxQztBQUNqQyxZQUFNLElBQUlNLEtBQUosQ0FBVSxZQUFZRCxPQUFPLENBQUNMLEtBQXBCLEdBQTRCLG1CQUF0QyxDQUFOO0FBQ0g7O0FBRUQsUUFBSWdCLFNBQVMsR0FBR2IsTUFBTSxDQUFDYyxNQUFQLENBQWNaLE9BQU8sQ0FBQ0wsS0FBdEIsQ0FBaEI7O0FBRUEsUUFBSWdCLFNBQVMsQ0FBQ1IsSUFBVixLQUFtQixNQUF2QixFQUErQjtBQUMzQixZQUFNLElBQUlGLEtBQUosQ0FBVSx5REFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBSVksWUFBWSxHQUFHLEVBQW5CO0FBRUFGLElBQUFBLFNBQVMsQ0FBQ0csTUFBVixDQUFpQkMsT0FBakIsQ0FBeUJuQixLQUFLLElBQUk7QUFDOUIsVUFBSW9CLFNBQVMsR0FBR3RCLG9CQUFvQixDQUFDTSxPQUFPLENBQUNMLEtBQVQsRUFBZ0JDLEtBQWhCLENBQXBDO0FBRUFFLE1BQUFBLE1BQU0sQ0FBQ21CLFFBQVAsQ0FBZ0JELFNBQWhCLEVBQTJCZCxpQkFBM0I7QUFDQVcsTUFBQUEsWUFBWSxDQUFDakIsS0FBRCxDQUFaLEdBQXNCb0IsU0FBdEI7QUFDSCxLQUxEO0FBT0FsQixJQUFBQSxNQUFNLENBQUNvQixVQUFQLENBQWtCMUIsWUFBbEIsRUFBZ0M7QUFDNUJHLE1BQUFBLEtBQUssRUFBRUssT0FBTyxDQUFDTCxLQURhO0FBRTVCa0IsTUFBQUE7QUFGNEIsS0FBaEMsRUFHRyxJQUhIO0FBSUgsR0F4QkQ7QUF5Qkg7O0FBRURNLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnZCLE9BQWpCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmNvbnN0IFV0aWwgPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBwYXNjYWxDYXNlIH0gPSBVdGlsO1xuXG5jb25zdCBGRUFUVVJFX05BTUUgPSAnc3RhdGVUcmFja2luZyc7XG5cbmNvbnN0IEZJRUxEX05BTUVfU1VGRklYID0gJ1RpbWVzdGFtcCc7XG5cbmZ1bmN0aW9uIHRpbWVzdGFtcEZpZWxkTmFtaW5nKGZpZWxkLCBzdGF0ZSkge1xuICAgIHJldHVybiBmaWVsZCArIHBhc2NhbENhc2Uoc3RhdGUpICsgRklFTERfTkFNRV9TVUZGSVg7XG59XG5cbi8qKlxuICogQSBydWxlIHNwZWNpZmllcyB0aGUgY2hhbmdlIG9mIHN0YXRlIHdpbGwgYmUgdHJhY2tlZCBhdXRvbWF0aWNhbGx5LlxuICogQG1vZHVsZSBFbnRpdHlGZWF0dXJlX1N0YXRlVHJhY2tpbmdcbiAqL1xuXG4vKipcbiAqIEluaXRpYWxpemUgdGhlIGZlYXR1cmVcbiAqIEBwYXJhbSB7T29sb25nRW50aXR5fSBlbnRpdHkgLSBFbnRpdHkgdG8gYXBwbHkgdGhpcyBmZWF0dXJlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIFRyYWNraW5nIGZpZWxkIG9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLmZpZWxkIC0gU3RhdGUgZmllbGQgdG8gdHJhY2tcbiAqIEBwcm9wZXJ0eSB7Ym9vbH0gW29wdGlvbnMucmV2ZXJzaWJsZT1mYWxzZV0gLSBTcGVjaWZ5IHdoZXRoZXIgdGhlIGZpZWxkIGNhbiBiZSBzZXQgdG8gYSBwcmV2aW91cyBzdGF0ZSBhZ2FpblxuICovXG5mdW5jdGlvbiBmZWF0dXJlKGVudGl0eSwgYXJncyA9IFtdKSB7XG4gICAgbGV0IFsgb3B0aW9ucyBdID0gYXJncztcbiAgICBcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGZpZWxkIG9wdGlvbnMhJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJykge1xuICAgICAgICBvcHRpb25zID0geyBmaWVsZDogb3B0aW9ucyB9O1xuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5maWVsZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZmllbGQgbmFtZSBpbiBvcHRpb25zIScpO1xuICAgIH1cblxuICAgIGxldCBzdGF0ZVNldFRpbWVzdGFtcCA9IHtcbiAgICAgICAgdHlwZTogJ2RhdGV0aW1lJyxcbiAgICAgICAgcmVhZE9ubHk6IHRydWUsXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgICBhdXRvOiB0cnVlXG4gICAgfTtcblxuICAgIGlmICghb3B0aW9ucy5yZXZlcnNpYmxlKSB7XG4gICAgICAgIHN0YXRlU2V0VGltZXN0YW1wLndyaXRlT25jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZW50aXR5Lm9uY2UoJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICBpZiAoIWVudGl0eS5oYXNGaWVsZChvcHRpb25zLmZpZWxkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWVsZCBcIicgKyBvcHRpb25zLmZpZWxkICsgJ1wiIGRvZXMgbm90IGV4aXN0IScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZpZWxkSW5mbyA9IGVudGl0eS5maWVsZHNbb3B0aW9ucy5maWVsZF07XG5cbiAgICAgICAgaWYgKGZpZWxkSW5mby50eXBlICE9PSAnZW51bScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBlbnVtIGZpZWxkIGNhbiBiZSB1c2VkIHdpdGggc3RhdGVUcmFja2luZyBmZWF0dXJlIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlTWFwcGluZyA9IHt9O1xuXG4gICAgICAgIGZpZWxkSW5mby52YWx1ZXMuZm9yRWFjaChzdGF0ZSA9PiB7XG4gICAgICAgICAgICBsZXQgZmllbGROYW1lID0gdGltZXN0YW1wRmllbGROYW1pbmcob3B0aW9ucy5maWVsZCwgc3RhdGUpO1xuXG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQoZmllbGROYW1lLCBzdGF0ZVNldFRpbWVzdGFtcCk7XG4gICAgICAgICAgICBzdGF0ZU1hcHBpbmdbc3RhdGVdID0gZmllbGROYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLmZpZWxkLFxuICAgICAgICAgICAgc3RhdGVNYXBwaW5nXG4gICAgICAgIH0sIHRydWUpO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZlYXR1cmU7Il19