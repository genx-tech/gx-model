"use strict";

require("source-map-support/register");

const Util = require('rk-utils');

const {
  pascalCase
} = Util;
const FEATURE_NAME = 'stateTracking';
const FIELD_NAME_SUFFIX = 'Timestamp';

function timestampFieldNaming(field, state) {
  return field + pascalCase(state) + FIELD_NAME_SUFFIX;
}

function feature(entity, args = []) {
  let [options] = args;

  if (!options) {
    throw new Error('Missing field options!');
  }

  if (typeof options === 'string') {
    options = {
      field: options
    };
  }

  if (!options.field) {
    throw new Error('Missing field name in options!');
  }

  let stateSetTimestamp = {
    type: 'datetime',
    optional: true,
    auto: true
  };

  if (!options.reversible) {
    stateSetTimestamp.writeOnce = true;
  }

  entity.once('afterAddingFields', () => {
    if (!entity.hasField(options.field)) {
      throw new Error('Field "' + options.field + '" does not exist!');
    }

    let fieldInfo = entity.fields[options.field];

    if (fieldInfo.type !== 'enum') {
      throw new Error('Only enum field can be used with stateTracking feature!');
    }

    let stateMapping = {};
    fieldInfo.values.forEach(state => {
      let fieldName = timestampFieldNaming(options.field, state);
      entity.addField(fieldName, stateSetTimestamp);
      stateMapping[state] = fieldName;
    });
    entity.addFeature(FEATURE_NAME, {
      field: options.field,
      stateMapping
    }, true);
  });
}

module.exports = feature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9sYW5nL2VudGl0eUZlYXR1cmVzL3N0YXRlVHJhY2tpbmcuanMiXSwibmFtZXMiOlsiVXRpbCIsInJlcXVpcmUiLCJwYXNjYWxDYXNlIiwiRkVBVFVSRV9OQU1FIiwiRklFTERfTkFNRV9TVUZGSVgiLCJ0aW1lc3RhbXBGaWVsZE5hbWluZyIsImZpZWxkIiwic3RhdGUiLCJmZWF0dXJlIiwiZW50aXR5IiwiYXJncyIsIm9wdGlvbnMiLCJFcnJvciIsInN0YXRlU2V0VGltZXN0YW1wIiwidHlwZSIsIm9wdGlvbmFsIiwiYXV0byIsInJldmVyc2libGUiLCJ3cml0ZU9uY2UiLCJvbmNlIiwiaGFzRmllbGQiLCJmaWVsZEluZm8iLCJmaWVsZHMiLCJzdGF0ZU1hcHBpbmciLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiZmllbGROYW1lIiwiYWRkRmllbGQiLCJhZGRGZWF0dXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFFQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQXBCOztBQUNBLE1BQU07QUFBRUMsRUFBQUE7QUFBRixJQUFpQkYsSUFBdkI7QUFFQSxNQUFNRyxZQUFZLEdBQUcsZUFBckI7QUFFQSxNQUFNQyxpQkFBaUIsR0FBRyxXQUExQjs7QUFFQSxTQUFTQyxvQkFBVCxDQUE4QkMsS0FBOUIsRUFBcUNDLEtBQXJDLEVBQTRDO0FBQ3hDLFNBQU9ELEtBQUssR0FBR0osVUFBVSxDQUFDSyxLQUFELENBQWxCLEdBQTRCSCxpQkFBbkM7QUFDSDs7QUFjRCxTQUFTSSxPQUFULENBQWlCQyxNQUFqQixFQUF5QkMsSUFBSSxHQUFHLEVBQWhDLEVBQW9DO0FBQ2hDLE1BQUksQ0FBRUMsT0FBRixJQUFjRCxJQUFsQjs7QUFFQSxNQUFJLENBQUNDLE9BQUwsRUFBYztBQUNWLFVBQU0sSUFBSUMsS0FBSixDQUFVLHdCQUFWLENBQU47QUFDSDs7QUFFRCxNQUFJLE9BQU9ELE9BQVAsS0FBbUIsUUFBdkIsRUFBaUM7QUFDN0JBLElBQUFBLE9BQU8sR0FBRztBQUFFTCxNQUFBQSxLQUFLLEVBQUVLO0FBQVQsS0FBVjtBQUNIOztBQUVELE1BQUksQ0FBQ0EsT0FBTyxDQUFDTCxLQUFiLEVBQW9CO0FBQ2hCLFVBQU0sSUFBSU0sS0FBSixDQUFVLGdDQUFWLENBQU47QUFDSDs7QUFFRCxNQUFJQyxpQkFBaUIsR0FBRztBQUNwQkMsSUFBQUEsSUFBSSxFQUFFLFVBRGM7QUFFcEJDLElBQUFBLFFBQVEsRUFBRSxJQUZVO0FBR3BCQyxJQUFBQSxJQUFJLEVBQUU7QUFIYyxHQUF4Qjs7QUFNQSxNQUFJLENBQUNMLE9BQU8sQ0FBQ00sVUFBYixFQUF5QjtBQUNyQkosSUFBQUEsaUJBQWlCLENBQUNLLFNBQWxCLEdBQThCLElBQTlCO0FBQ0g7O0FBRURULEVBQUFBLE1BQU0sQ0FBQ1UsSUFBUCxDQUFZLG1CQUFaLEVBQWlDLE1BQU07QUFDbkMsUUFBSSxDQUFDVixNQUFNLENBQUNXLFFBQVAsQ0FBZ0JULE9BQU8sQ0FBQ0wsS0FBeEIsQ0FBTCxFQUFxQztBQUNqQyxZQUFNLElBQUlNLEtBQUosQ0FBVSxZQUFZRCxPQUFPLENBQUNMLEtBQXBCLEdBQTRCLG1CQUF0QyxDQUFOO0FBQ0g7O0FBRUQsUUFBSWUsU0FBUyxHQUFHWixNQUFNLENBQUNhLE1BQVAsQ0FBY1gsT0FBTyxDQUFDTCxLQUF0QixDQUFoQjs7QUFFQSxRQUFJZSxTQUFTLENBQUNQLElBQVYsS0FBbUIsTUFBdkIsRUFBK0I7QUFDM0IsWUFBTSxJQUFJRixLQUFKLENBQVUseURBQVYsQ0FBTjtBQUNIOztBQUVELFFBQUlXLFlBQVksR0FBRyxFQUFuQjtBQUVBRixJQUFBQSxTQUFTLENBQUNHLE1BQVYsQ0FBaUJDLE9BQWpCLENBQXlCbEIsS0FBSyxJQUFJO0FBQzlCLFVBQUltQixTQUFTLEdBQUdyQixvQkFBb0IsQ0FBQ00sT0FBTyxDQUFDTCxLQUFULEVBQWdCQyxLQUFoQixDQUFwQztBQUVBRSxNQUFBQSxNQUFNLENBQUNrQixRQUFQLENBQWdCRCxTQUFoQixFQUEyQmIsaUJBQTNCO0FBQ0FVLE1BQUFBLFlBQVksQ0FBQ2hCLEtBQUQsQ0FBWixHQUFzQm1CLFNBQXRCO0FBQ0gsS0FMRDtBQU9BakIsSUFBQUEsTUFBTSxDQUFDbUIsVUFBUCxDQUFrQnpCLFlBQWxCLEVBQWdDO0FBQzVCRyxNQUFBQSxLQUFLLEVBQUVLLE9BQU8sQ0FBQ0wsS0FEYTtBQUU1QmlCLE1BQUFBO0FBRjRCLEtBQWhDLEVBR0csSUFISDtBQUlILEdBeEJEO0FBeUJIOztBQUVETSxNQUFNLENBQUNDLE9BQVAsR0FBaUJ0QixPQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBVdGlsID0gcmVxdWlyZSgncmstdXRpbHMnKTtcbmNvbnN0IHsgcGFzY2FsQ2FzZSB9ID0gVXRpbDtcblxuY29uc3QgRkVBVFVSRV9OQU1FID0gJ3N0YXRlVHJhY2tpbmcnO1xuXG5jb25zdCBGSUVMRF9OQU1FX1NVRkZJWCA9ICdUaW1lc3RhbXAnO1xuXG5mdW5jdGlvbiB0aW1lc3RhbXBGaWVsZE5hbWluZyhmaWVsZCwgc3RhdGUpIHtcbiAgICByZXR1cm4gZmllbGQgKyBwYXNjYWxDYXNlKHN0YXRlKSArIEZJRUxEX05BTUVfU1VGRklYO1xufVxuXG4vKipcbiAqIEEgcnVsZSBzcGVjaWZpZXMgdGhlIGNoYW5nZSBvZiBzdGF0ZSB3aWxsIGJlIHRyYWNrZWQgYXV0b21hdGljYWxseS5cbiAqIEBtb2R1bGUgRW50aXR5RmVhdHVyZV9TdGF0ZVRyYWNraW5nXG4gKi9cblxuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBmZWF0dXJlXG4gKiBAcGFyYW0ge09vbG9uZ0VudGl0eX0gZW50aXR5IC0gRW50aXR5IHRvIGFwcGx5IHRoaXMgZmVhdHVyZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBUcmFja2luZyBmaWVsZCBvcHRpb25zXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5maWVsZCAtIFN0YXRlIGZpZWxkIHRvIHRyYWNrXG4gKiBAcHJvcGVydHkge2Jvb2x9IFtvcHRpb25zLnJldmVyc2libGU9ZmFsc2VdIC0gU3BlY2lmeSB3aGV0aGVyIHRoZSBmaWVsZCBjYW4gYmUgc2V0IHRvIGEgcHJldmlvdXMgc3RhdGUgYWdhaW5cbiAqL1xuZnVuY3Rpb24gZmVhdHVyZShlbnRpdHksIGFyZ3MgPSBbXSkge1xuICAgIGxldCBbIG9wdGlvbnMgXSA9IGFyZ3M7XG4gICAgXG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBmaWVsZCBvcHRpb25zIScpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgb3B0aW9ucyA9IHsgZmllbGQ6IG9wdGlvbnMgfTtcbiAgICB9XG5cbiAgICBpZiAoIW9wdGlvbnMuZmllbGQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIGZpZWxkIG5hbWUgaW4gb3B0aW9ucyEnKTtcbiAgICB9XG5cbiAgICBsZXQgc3RhdGVTZXRUaW1lc3RhbXAgPSB7XG4gICAgICAgIHR5cGU6ICdkYXRldGltZScsXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgICAgICBhdXRvOiB0cnVlXG4gICAgfTtcblxuICAgIGlmICghb3B0aW9ucy5yZXZlcnNpYmxlKSB7XG4gICAgICAgIHN0YXRlU2V0VGltZXN0YW1wLndyaXRlT25jZSA9IHRydWU7XG4gICAgfVxuXG4gICAgZW50aXR5Lm9uY2UoJ2FmdGVyQWRkaW5nRmllbGRzJywgKCkgPT4ge1xuICAgICAgICBpZiAoIWVudGl0eS5oYXNGaWVsZChvcHRpb25zLmZpZWxkKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWVsZCBcIicgKyBvcHRpb25zLmZpZWxkICsgJ1wiIGRvZXMgbm90IGV4aXN0IScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZpZWxkSW5mbyA9IGVudGl0eS5maWVsZHNbb3B0aW9ucy5maWVsZF07XG5cbiAgICAgICAgaWYgKGZpZWxkSW5mby50eXBlICE9PSAnZW51bScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBlbnVtIGZpZWxkIGNhbiBiZSB1c2VkIHdpdGggc3RhdGVUcmFja2luZyBmZWF0dXJlIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHN0YXRlTWFwcGluZyA9IHt9O1xuXG4gICAgICAgIGZpZWxkSW5mby52YWx1ZXMuZm9yRWFjaChzdGF0ZSA9PiB7XG4gICAgICAgICAgICBsZXQgZmllbGROYW1lID0gdGltZXN0YW1wRmllbGROYW1pbmcob3B0aW9ucy5maWVsZCwgc3RhdGUpO1xuXG4gICAgICAgICAgICBlbnRpdHkuYWRkRmllbGQoZmllbGROYW1lLCBzdGF0ZVNldFRpbWVzdGFtcCk7XG4gICAgICAgICAgICBzdGF0ZU1hcHBpbmdbc3RhdGVdID0gZmllbGROYW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICBlbnRpdHkuYWRkRmVhdHVyZShGRUFUVVJFX05BTUUsIHtcbiAgICAgICAgICAgIGZpZWxkOiBvcHRpb25zLmZpZWxkLFxuICAgICAgICAgICAgc3RhdGVNYXBwaW5nXG4gICAgICAgIH0sIHRydWUpO1xuICAgIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZlYXR1cmU7Il19