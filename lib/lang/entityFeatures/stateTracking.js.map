{"version":3,"file":"stateTracking.js","names":["naming","require","FEATURE_NAME","FIELD_NAME_SUFFIX","timestampFieldNaming","field","state","pascalCase","feature","entity","args","options","Error","stateSetTimestamp","type","optional","auto","reversible","writeOnce","once","hasField","fieldInfo","fields","stateMapping","values","forEach","fieldName","addField","addFeature","module","exports"],"sources":["../../../src/lang/entityFeatures/stateTracking.js"],"sourcesContent":["\"use strict\";\n\nconst { naming } = require('@genx/july');\n\nconst FEATURE_NAME = 'stateTracking';\n\nconst FIELD_NAME_SUFFIX = 'Timestamp';\n\nfunction timestampFieldNaming(field, state) {\n    return field + naming.pascalCase(state) + FIELD_NAME_SUFFIX;\n}\n\n/**\n * A rule specifies the change of state will be tracked automatically.\n * @module EntityFeature_StateTracking\n */\n\n/**\n * Initialize the feature\n * @param {Entity} entity - Entity to apply this feature\n * @param {object} options - Tracking field options\n * @property {string} options.field - State field to track\n * @property {bool} [options.reversible=false] - Specify whether the field can be set to a previous state again\n */\nfunction feature(entity, args = []) {\n    let [ options ] = args;\n    \n    if (!options) {\n        throw new Error('Missing field options!');\n    }\n\n    if (typeof options === 'string') {\n        options = { field: options };\n    }\n\n    if (!options.field) {\n        throw new Error('Missing field name in options!');\n    }\n\n    let stateSetTimestamp = {\n        type: 'datetime',\n        optional: true,\n        auto: true\n    };\n\n    if (!options.reversible) {\n        stateSetTimestamp.writeOnce = true;\n    }\n\n    entity.once('afterAddingFields', () => {\n        if (!entity.hasField(options.field)) {\n            throw new Error('Field \"' + options.field + '\" does not exist!');\n        }\n\n        let fieldInfo = entity.fields[options.field];\n\n        if (fieldInfo.type !== 'enum') {\n            throw new Error('Only enum field can be used with stateTracking feature!');\n        }\n\n        let stateMapping = {};\n\n        fieldInfo.values.forEach(state => {\n            let fieldName = timestampFieldNaming(options.field, state);\n\n            entity.addField(fieldName, stateSetTimestamp);\n            stateMapping[state] = fieldName;\n        });\n\n        entity.addFeature(FEATURE_NAME, {\n            field: options.field,\n            stateMapping\n        }, true);\n    });\n}\n\nmodule.exports = feature;"],"mappings":"AAAA;;;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMC,YAAY,GAAG,eAArB;AAEA,MAAMC,iBAAiB,GAAG,WAA1B;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,KAArC,EAA4C;EACxC,OAAOD,KAAK,GAAGL,MAAM,CAACO,UAAP,CAAkBD,KAAlB,CAAR,GAAmCH,iBAA1C;AACH;;AAcD,SAASK,OAAT,CAAiBC,MAAjB,EAAyBC,IAAI,GAAG,EAAhC,EAAoC;EAChC,IAAI,CAAEC,OAAF,IAAcD,IAAlB;;EAEA,IAAI,CAACC,OAAL,EAAc;IACV,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;EACH;;EAED,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;IAC7BA,OAAO,GAAG;MAAEN,KAAK,EAAEM;IAAT,CAAV;EACH;;EAED,IAAI,CAACA,OAAO,CAACN,KAAb,EAAoB;IAChB,MAAM,IAAIO,KAAJ,CAAU,gCAAV,CAAN;EACH;;EAED,IAAIC,iBAAiB,GAAG;IACpBC,IAAI,EAAE,UADc;IAEpBC,QAAQ,EAAE,IAFU;IAGpBC,IAAI,EAAE;EAHc,CAAxB;;EAMA,IAAI,CAACL,OAAO,CAACM,UAAb,EAAyB;IACrBJ,iBAAiB,CAACK,SAAlB,GAA8B,IAA9B;EACH;;EAEDT,MAAM,CAACU,IAAP,CAAY,mBAAZ,EAAiC,MAAM;IACnC,IAAI,CAACV,MAAM,CAACW,QAAP,CAAgBT,OAAO,CAACN,KAAxB,CAAL,EAAqC;MACjC,MAAM,IAAIO,KAAJ,CAAU,YAAYD,OAAO,CAACN,KAApB,GAA4B,mBAAtC,CAAN;IACH;;IAED,IAAIgB,SAAS,GAAGZ,MAAM,CAACa,MAAP,CAAcX,OAAO,CAACN,KAAtB,CAAhB;;IAEA,IAAIgB,SAAS,CAACP,IAAV,KAAmB,MAAvB,EAA+B;MAC3B,MAAM,IAAIF,KAAJ,CAAU,yDAAV,CAAN;IACH;;IAED,IAAIW,YAAY,GAAG,EAAnB;IAEAF,SAAS,CAACG,MAAV,CAAiBC,OAAjB,CAAyBnB,KAAK,IAAI;MAC9B,IAAIoB,SAAS,GAAGtB,oBAAoB,CAACO,OAAO,CAACN,KAAT,EAAgBC,KAAhB,CAApC;MAEAG,MAAM,CAACkB,QAAP,CAAgBD,SAAhB,EAA2Bb,iBAA3B;MACAU,YAAY,CAACjB,KAAD,CAAZ,GAAsBoB,SAAtB;IACH,CALD;IAOAjB,MAAM,CAACmB,UAAP,CAAkB1B,YAAlB,EAAgC;MAC5BG,KAAK,EAAEM,OAAO,CAACN,KADa;MAE5BkB;IAF4B,CAAhC,EAGG,IAHH;EAIH,CAxBD;AAyBH;;AAEDM,MAAM,CAACC,OAAP,GAAiBtB,OAAjB"}