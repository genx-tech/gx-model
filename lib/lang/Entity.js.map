{"version":3,"file":"Entity.js","names":["EventEmitter","require","path","_","generateDisplayName","deepCloneField","Clonable","entityNaming","Field","Types","FunctionalQualifiers","Entity","overrideEntityMeta","sourceInfo","overrideInfo","features","fields","associations","indexes","inputs","constructor","linker","name","gemlModule","info","_events","once","eventName","listener","link","pre","linked","log","code","base","baseClasses","castArray","reverse","forEach","baseEntity","loadEntity","assert","_inherit","comment","displayName","emit","feature","featureName","fn","resolve","__dirname","err","Error","translateOolValue","args","each","fieldInfo","fieldName","addField","key","Array","isArray","length","isEmpty","interfaces","cloneDeep","forOwn","intf","accept","map","param","typeInfo","baseInfo","trackBackType","addUsedType","type","id","typeLocation","existing","types","hasIndexOn","concat","sort","findIndex","index","f","idx","addIndexes","addIndex","field","normalizedField","hasField","join","push","getEntityAttribute","fieldId","token","substr","every","addAssociation","props","JSON","stringify","addAssocField","destEntity","destField","extraProps","localField","destFieldInfo","omit","toJSON","Object","assign","rawInfo","clone","fullRawInfo","addFeature","allowMultiple","hasFeature","setKey","getReferencedEntity","entityName","getReferenceTo","includes","excludes","find","assoc","value","prop","isEqual","association","indexOf","getKeyField","kf","entity","mapValues","uniq","baseFeatures","uniqueIndexes","filter","unique","inheritedIndex","fields1","fields2","intersection","pos","splice","assocs","module","exports"],"sources":["../../src/lang/Entity.js"],"sourcesContent":["\"use strict\";\n\nconst EventEmitter = require('events');\nconst path = require('path');\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, entityNaming } = require('./GemlUtils');\n\nconst Field = require('./Field');\nconst { Types: { FunctionalQualifiers } } = require('@genx/data');\n\n/**\n * Entity event listener\n * @callback Entity.eventListener\n * returns {*}\n */\n\n/**\n * Geml entity\n * @class Entity\n */\nclass Entity extends Clonable {\n    static overrideEntityMeta(sourceInfo, overrideInfo) {\n        if (overrideInfo.features) {\n            sourceInfo.features = [\n                ...(sourceInfo.features ?? []),\n                ...overrideInfo.features\n            ];\n        }\n\n        if (overrideInfo.fields) {\n            sourceInfo.fields = {\n                ...sourceInfo.fields,\n                ...overrideInfo.fields\n            };\n        }        \n\n        if (overrideInfo.associations) {\n            sourceInfo.associations = [...(sourceInfo.associations ?? []), ...overrideInfo.associations ];\n        }\n\n        if (overrideInfo.indexes) {\n            sourceInfo.indexes = [...(sourceInfo.indexes ?? []), ...overrideInfo.indexes ];\n        }\n\n        if (overrideInfo.inputs) {\n            sourceInfo.inputs = {\n                ...sourceInfo.inputs,\n                ...overrideInfo.inputs\n            };\n        }  \n    }\n\n\n    /**\n     * Fields of the entity, map of <fieldName, fieldObject>\n     * @member {object.<string, Field>}\n     */\n    fields = {};\n\n    /**\n     * Referenced types\n     */\n    types = {};\n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name\n     * @param {*} gemlModule\n     * @param {object} info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n\n        this._events = new EventEmitter();\n\n        /**\n         * Linker to process this entity\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = entityNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Listen on an event\n     * @param {string} eventName\n     * @param {Entity.eventListener} listener\n     * @returns {EventEmitter}\n     */\n    once(eventName, listener) {\n        return this._events.once(eventName, listener);\n    }\n\n    /**\n     * Start linking this entity\n     * @returns {Entity}\n     */\n    link() {\n        pre: !this.linked;\n\n        //1.inherit from base entity if any\n        //2.initialize features\n        //3.add fields        \n        //4.api\n\n        //indexes will processed after processing foreign relationship\n\n        this.linker.log('debug', 'Linking entity [' + this.name + '] ...');\n\n        if (this.info.code) {\n            this.code = this.info.code || this.name;\n        }\n\n        if (this.info.base) {\n            //inherit fields, processed features, key and indexes\n            let baseClasses = _.castArray(this.info.base);\n            baseClasses.reverse().forEach(base => {\n                let baseEntity = this.linker.loadEntity(this.gemlModule, base);\n                assert: baseEntity.linked;\n\n                this._inherit(baseEntity);\n            });            \n\n            this.baseClasses = baseClasses;\n        }\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        /**\n         * @fires Entity#featuresMixingIn\n         */\n        this._events.emit('featuresMixingIn');\n\n        // load features\n        if (this.info.features) {\n            this.info.features.forEach(feature => {\n                let featureName;\n\n                if (typeof feature === 'string') {\n                    featureName = feature;\n                } else {\n                    featureName = feature.name;\n                }\n\n                let fn;\n                \n                try {\n                    fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        throw new Error(`Unknown feature \"${featureName}\" reference in entity \"${this.name}\"`);\n                    }\n                }\n                fn(this, this.linker.translateOolValue(this.gemlModule, feature.args));\n            });\n        }\n\n        /**\n         * @fires Entity#beforeAddingFields\n         */\n        this._events.emit('beforeAddingFields');\n\n        // process fields\n        if (this.info.fields) {\n            _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));\n        }\n\n        /**\n         * @fires Entity#afterAddingFields\n         */\n        this._events.emit('afterAddingFields');   \n\n        if (this.info.key) {\n            this.key = this.info.key;\n\n            if (Array.isArray(this.key) && this.key.length === 1) {\n                this.key = this.key[0];\n            }\n        }\n\n        if (this.info.inputs) {\n            this.inputs = this.info.inputs;\n        }\n\n        /**\n         * @fires Entity#beforeAddingInterfaces\n         */\n        this._events.emit('beforeAddingInterfaces');        \n        \n        if (!_.isEmpty(this.info.interfaces)) {\n            this.interfaces = _.cloneDeep(this.info.interfaces);\n\n            _.forOwn(this.interfaces, (intf) => {\n                if (!_.isEmpty(intf.accept)) {\n                    intf.accept = _.map(intf.accept, param => {                        \n                        const [ typeInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, param);\n                        if (baseInfo != null) {\n                            this.addUsedType(param.type, baseInfo.gemlModule.id);\n                        }                        \n                        return typeInfo;\n\n                    });\n                }\n            });\n        }\n\n        /**\n         * @fires Entity#afterAddingInterfaces\n         */\n        this._events.emit('afterAddingInterfaces');        \n\n        this.linked = true;\n\n        return this;\n    }\n\n    addUsedType(type, typeLocation) {\n        const existing = this.types[type];\n        if (existing == null) {\n            this.types[type] = typeLocation;\n        } else {\n            if (existing !== typeLocation) {\n                //should never happen\n                throw new Error('Different used types appear in the same entity!');\n            }\n        }\n    }\n\n    /**\n     * Check whether the entity has an index on the given fields\n     * @param {array} fields\n     * @returns {boolean}\n     */\n    hasIndexOn(fields) {\n        fields = fields.concat();\n        fields.sort();\n\n        return _.findIndex(this.indexes, index => {\n                return _.findIndex(index.fields, (f, idx) => (fields.length <= idx || fields[idx] !== f)) === -1;\n            }) != -1;\n    }\n\n    /**\n     * Add all indexes\n     */\n    addIndexes() {\n        if (this.info.indexes) {\n            _.each(this.info.indexes, index => {\n                this.addIndex(index);\n            });\n        }\n    }\n\n    /**\n     * Add an index\n     * @param {object} index\n     * @property {array} index.fields - Fields of the index\n     * @property {bool} index.unique - Flag of uniqueness of the index\n     * @returns {Entity}\n     */\n    addIndex(index) {\n        if (!this.indexes) {\n            this.indexes = [];\n        }\n\n        index = _.cloneDeep(index);\n\n        assert: index.fields;\n\n        if (!_.isArray(index.fields)) {\n            index.fields = [ index.fields ];\n        }\n\n        let fields = index.fields; \n\n        index.fields = _.map(fields, field => {\n\n            let normalizedField = field;//_.camelCase(field);\n\n            if (!this.hasField(normalizedField)) {\n\n                throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);\n            }\n\n            return normalizedField;\n        });\n\n        index.fields.sort();\n\n        if (this.hasIndexOn(index.fields)) {\n            throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);\n        }\n\n        this.indexes.push(index);\n\n        return this;\n    }\n\n    /**\n     * Get a field object by field name or entity meta accesor (e.g. $key, $feature).\n     * @param fieldId\n     * @returns {Field}\n     */\n    getEntityAttribute(fieldId) {\n        if (fieldId[0] === '$') {\n            let token = fieldId.substr(1);\n\n            switch (token) {\n                case \"key\":\n                    if (Array.isArray(this.key)) {\n                        throw new Error('Combination key not support for accesor \"$key\".');\n                    }\n                    return this.fields[this.key];\n\n                case 'feature':\n                    return this.features;\n\n                default:\n                    throw new Error(`Filed accessor \"${token}\" not supported!`);\n            }\n        } else {\n            if (!this.hasField(fieldId)) {\n                throw new Error(`Field \"${fieldId}\" not exists in entity \"${this.name}\".`)\n            }\n\n            return this.fields[fieldId];\n        }\n    }\n\n    /**\n     * Check whether the entity has a field with given name\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasField(name) {\n        if (Array.isArray(name)) {\n            return _.every(name, fn => this.hasField(fn));\n        }\n\n        return name in this.fields;\n    }\n\n    /**\n     * Add association, dbms-specific\n     * @param {*} name \n     * @param {*} props \n     * @example\n     * e.g. mysql\n     *  entity - Associated entity name\n     *  join - Join type, e.g. INNER, LEFT, RIGHT, OUTER\n     *  exclude - Exclude in output columns\n     *  alias - Alias \n     *  on - On conditions\n     *  dataset - Sub query\n     *  assocs - Child associations\n     *  optional - Optional\n     *  'default' - Default value\n     *  list - Is a list\n     */\n    addAssociation(name, props) {\n        if (!this.associations) {\n            this.associations = {};\n        }    \n\n        if (name in this.associations) {\n            throw new Error(`Association \"${name}\" already exists in entity \"${this.name}\". Props: ` + JSON.stringify(props));\n        }\n\n        this.associations[name] = props;\n    }\n\n    /**\n     * Add a association field.\n     * @param {string} name\n     * @param {Entity} destEntity\n     * @param {Field} destField\n     */\n    addAssocField(name, destEntity, destField, extraProps) {\n        let localField = this.fields[name];\n\n        if (localField) {            \n            throw new Error(`Field \"${name}\" already exists in entity \"${this.name}\".`);\n        }\n\n        let destFieldInfo = _.omit(destField.toJSON(), FunctionalQualifiers);\n        Object.assign(destFieldInfo, extraProps);       \n\n        this.addField(name, destFieldInfo);    \n        //this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));   \n    }\n\n    /**\n     * Add a field into the entity\n     * @param {string} name\n     * @param {object} rawInfo\n     * @returns {Entity}\n     */\n    addField(name, rawInfo) {        \n        if (this.hasField(name)) {\n            throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);\n        }\n\n        assert: rawInfo.type;\n\n        let field;\n\n        if (rawInfo instanceof Field) {\n            field = rawInfo.clone();\n            field.name = name; // todo: displayName\n        } else {            \n            let [ fullRawInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, rawInfo);      \n            if (baseInfo != null) {      \n                this.addUsedType(rawInfo.type, baseInfo.gemlModule.id);\n            }\n\n            field = new Field(name, fullRawInfo);\n            field.link();\n        }                \n        \n        this.fields[name] = field;\n\n        if (!this.key) {\n            //make the first field as the default key\n            this.key = name;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a feature into the entity, e.g. auto increment id\n     * @param {string} name\n     * @param {*} feature\n     * @param {bool} [allowMultiple=false] - Allow multiple occurrence\n     * @returns {Entity}\n     */\n    addFeature(name, feature, allowMultiple) {\n        if (!this.features) {\n            this.features = {};\n        }\n\n        if (allowMultiple) {\n            if (!this.features[name]) {\n                this.features[name] = [];\n            }\n\n            this.features[name].push(feature);\n        } else {\n            if (name in this.features) {\n                throw new Error(`Duplicate feature found: ${name}. An entity can only have one \"${name}\" feature only. Entity: ${this.name}`);\n            }\n\n            this.features[name] = feature;\n        }\n\n        return this;\n    }\n\n    hasFeature(name) {\n        return this.features && (name in this.features);\n    }\n\n    /**\n     * Set key name\n     * @param {string|array.<string>} name - Field name to be used as the key\n     * @returns {Entity}\n     */\n    setKey(name) {\n        this.key = name;\n        return this;\n    }\n\n    getReferencedEntity(entityName) {\n        return this.linker.loadEntity(this.gemlModule, entityName);    \n    }\n\n    /**\n     * Returns the association info if there is connection to the given destination entity.\n     */\n    getReferenceTo(entityName, includes, excludes) {\n        return this.info.associations && _.find(\n            this.info.associations, assoc => {\n                if (includes) {\n                    if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;\n                }\n\n                if (excludes) {\n                    if (excludes.association && assoc === excludes.association) return false;\n                    if (excludes.type && assoc.type === excludes.type) return false;\n                    if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;\n                    if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;\n                    if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;\n                }\n\n                return assoc.destEntity === entityName;\n            }\n        );\n    }\n\n    /**\n     * Get key field \n     * @returns {*}\n     */\n    getKeyField() {\n        return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];\n    }\n\n    /**\n     * Clone the entity\n     * @param {Map} [stack] - Reference stack to avoid recurrence copy\n     * @returns {Entity}\n     */\n    clone() {        \n        super.clone();\n\n        let entity = new Entity(this.linker, this.name, this.gemlModule, this.info);        \n\n        deepCloneField(this, entity, 'code');\n        deepCloneField(this, entity, 'displayName');\n        deepCloneField(this, entity, 'comment');\n        deepCloneField(this, entity, 'features');\n        deepCloneField(this, entity, 'fields');\n        deepCloneField(this, entity, 'types');    \n        deepCloneField(this, entity, 'associations');        \n        deepCloneField(this, entity, 'key');        \n        deepCloneField(this, entity, 'indexes');    \n        deepCloneField(this, entity, 'inputs');        \n        deepCloneField(this, entity, 'interfaces');\n\n        entity.linked = true;\n\n        return entity;\n    }\n \n    /**\n     * Translate the entity into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,     \n            code: this.code,            \n            displayName: this.displayName,\n            comment: this.comment,            \n            ...(this.baseClasses ? { baseClasses: this.baseClasses } : {}),\n            features: this.features,            \n            types: this.types,  \n            fields: _.mapValues(this.fields, field => field.toJSON()),\n            associations: this.associations,\n            key: this.key,\n            indexes: this.indexes\n        };\n    }\n\n    _inherit(baseEntity) {  \n        let overrideInfo = {};\n\n        if (baseEntity.baseClasses) {\n            let baseClasses = baseEntity.baseClasses;\n\n            if (this.baseClasses) {\n                this.baseClasses = _.uniq(baseClasses.concat(this.baseClasses));\n            } else {\n                this.baseClasses = baseClasses.concat();\n            }\n        }\n\n        if (!_.isEmpty(baseEntity.info.features)) {\n            let baseFeatures = _.cloneDeep(baseEntity.info.features);          \n            \n            if (this.info.features) {\n                overrideInfo.features = baseFeatures.concat(this.info.features);\n            } else {\n                overrideInfo.features = baseFeatures;\n            }\n        }        \n        \n        if (!_.isEmpty(baseEntity.info.fields)) {\n            let fields = _.cloneDeep(baseEntity.info.fields);\n            overrideInfo.fields = { ...fields, ...this.info.fields };\n        }\n        \n        if (baseEntity.info.key) {\n            overrideInfo.key = baseEntity.info.key;\n        }         \n        \n        if (baseEntity.info.indexes) {\n            let indexes = _.cloneDeep(baseEntity.info.indexes);\n            let uniqueIndexes = indexes.filter(index => index.unique);\n\n            if (this.info.indexes) {\n                this.info.indexes.forEach(index => {\n                    //if unique scope changed\n                    if (index.unique) {\n                        uniqueIndexes.forEach(inheritedIndex => {                            \n                            const fields1 = _.castArray(index.fields);\n                            const fields2 = _.castArray(inheritedIndex.fields);\n\n                            if (_.intersection(fields1, fields2).length === fields2.length) {\n                                //fully included\n                                const pos = indexes.indexOf(inheritedIndex);\n                                if (pos !== -1) {\n                                    indexes.splice(pos, 1);\n                                }                                \n                            }\n                        });\n                    }\n                })\n\n                indexes = indexes.concat(this.info.indexes);\n            }\n\n            overrideInfo.indexes = indexes;\n        }        \n\n        if (baseEntity.info.associations) {\n            let assocs = _.cloneDeep(baseEntity.info.associations);\n\n            assocs = assocs.map(assoc => {\n                if (assoc.destEntity === baseEntity.name) {\n                    return {\n                        ...assoc,\n                        destEntity: this.name\n                    };\n                }\n\n                return assoc;\n            });        \n\n            if (this.info.associations) {\n                assocs = assocs.concat(this.info.associations);\n            }       \n            \n            overrideInfo.associations = assocs;\n        }     \n\n        if (baseEntity.inputs) {\n            overrideInfo.inputs = { ...baseEntity.inputs, ...this.info.inputs };\n        }\n\n        if (!_.isEmpty(overrideInfo)) {                    \n            this.info = { ...this.info, ...overrideInfo };\n        }\n    }\n}\n\nmodule.exports = Entity;"],"mappings":"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"}