{"version":3,"sources":["../../src/lang/Entity.js"],"names":["EventEmitter","require","path","_","generateDisplayName","deepCloneField","Clonable","entityNaming","Field","Types","FunctionalQualifiers","Entity","constructor","linker","name","gemlModule","info","_events","once","eventName","listener","link","pre","linked","log","code","base","baseClasses","castArray","reverse","forEach","baseEntity","loadEntity","assert","_inherit","comment","displayName","emit","features","feature","featureName","fn","resolve","__dirname","err","Error","translateOolValue","args","fields","each","fieldInfo","fieldName","addField","key","Array","isArray","length","inputs","isEmpty","interfaces","cloneDeep","forOwn","intf","accept","map","param","typeInfo","baseInfo","trackBackType","addUsedType","type","id","typeLocation","existing","types","hasIndexOn","concat","sort","findIndex","indexes","index","f","idx","addIndexes","addIndex","field","normalizedField","hasField","join","push","getEntityAttribute","fieldId","token","substr","every","addAssociation","props","associations","JSON","stringify","addAssocField","destEntity","destField","extraProps","localField","destFieldInfo","omit","toJSON","Object","assign","rawInfo","clone","fullRawInfo","addFeature","allowMultiple","hasFeature","setKey","getReferencedEntity","entityName","getReferenceTo","includes","excludes","find","assoc","value","prop","isEqual","association","indexOf","getKeyField","kf","entity","mapValues","overrideInfo","uniq","baseFeatures","assocs","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst EventEmitter = require('events');\nconst path = require('path');\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, Clonable, entityNaming } = require('./GemlUtils');\n\nconst Field = require('./Field');\nconst { Types: { FunctionalQualifiers } } = require('@genx/data');\n\n/**\n * Entity event listener\n * @callback Entity.eventListener\n * returns {*}\n */\n\n/**\n * Geml entity\n * @class Entity\n */\nclass Entity extends Clonable {\n    /**\n     * Fields of the entity, map of <fieldName, fieldObject>\n     * @member {object.<string, Field>}\n     */\n    fields = {};\n\n    /**\n     * Referenced types\n     */\n    types = {};\n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name\n     * @param {*} gemlModule\n     * @param {object} info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n\n        this._events = new EventEmitter();\n\n        /**\n         * Linker to process this entity\n         * @member {Linker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = entityNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Listen on an event\n     * @param {string} eventName\n     * @param {Entity.eventListener} listener\n     * @returns {EventEmitter}\n     */\n    once(eventName, listener) {\n        return this._events.once(eventName, listener);\n    }\n\n    /**\n     * Start linking this entity\n     * @returns {Entity}\n     */\n    link() {\n        pre: !this.linked;\n\n        //1.inherit from base entity if any\n        //2.initialize features\n        //3.add fields        \n        //4.api\n\n        //indexes will processed after processing foreign relationship\n\n        this.linker.log('debug', 'Linking entity [' + this.name + '] ...');\n\n        if (this.info.code) {\n            this.code = this.info.code || this.name;\n        }\n\n        if (this.info.base) {\n            //inherit fields, processed features, key and indexes\n            let baseClasses = _.castArray(this.info.base);\n            baseClasses.reverse().forEach(base => {\n                let baseEntity = this.linker.loadEntity(this.gemlModule, base);\n                assert: baseEntity.linked;\n\n                this._inherit(baseEntity);\n            });            \n\n            this.baseClasses = baseClasses;\n        }\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        /**\n         * @fires Entity#featuresMixingIn\n         */\n        this._events.emit('featuresMixingIn');\n\n        // load features\n        if (this.info.features) {\n            this.info.features.forEach(feature => {\n                let featureName;\n\n                if (typeof feature === 'string') {\n                    featureName = feature;\n                } else {\n                    featureName = feature.name;\n                }\n\n                let fn;\n                \n                try {\n                    fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        throw new Error(`Unknown feature \"${featureName}\" reference in entity \"${this.name}\"`);\n                    }\n                }\n                fn(this, this.linker.translateOolValue(this.gemlModule, feature.args));\n            });\n        }\n\n        /**\n         * @fires Entity#beforeAddingFields\n         */\n        this._events.emit('beforeAddingFields');\n\n        // process fields\n        if (this.info.fields) {\n            _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));\n        }\n\n        /**\n         * @fires Entity#afterAddingFields\n         */\n        this._events.emit('afterAddingFields');   \n\n        if (this.info.key) {\n            this.key = this.info.key;\n\n            if (Array.isArray(this.key) && this.key.length === 1) {\n                this.key = this.key[0];\n            }\n        }\n\n        if (this.info.inputs) {\n            this.inputs = this.info.inputs;\n        }\n\n        /**\n         * @fires Entity#beforeAddingInterfaces\n         */\n        this._events.emit('beforeAddingInterfaces');        \n        \n        if (!_.isEmpty(this.info.interfaces)) {\n            this.interfaces = _.cloneDeep(this.info.interfaces);\n\n            _.forOwn(this.interfaces, (intf) => {\n                if (!_.isEmpty(intf.accept)) {\n                    intf.accept = _.map(intf.accept, param => {                        \n                        const [ typeInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, param);\n                        if (baseInfo != null) {\n                            this.addUsedType(param.type, baseInfo.gemlModule.id);\n                        }                        \n                        return typeInfo;\n\n                    });\n                }\n            });\n        }\n\n        /**\n         * @fires Entity#afterAddingInterfaces\n         */\n        this._events.emit('afterAddingInterfaces');        \n\n        this.linked = true;\n\n        return this;\n    }\n\n    addUsedType(type, typeLocation) {\n        const existing = this.types[type];\n        if (existing == null) {\n            this.types[type] = typeLocation;\n        } else {\n            if (existing !== typeLocation) {\n                //should never happen\n                throw new Error('Different used types appear in the same entity!');\n            }\n        }\n    }\n\n    /**\n     * Check whether the entity has an index on the given fields\n     * @param {array} fields\n     * @returns {boolean}\n     */\n    hasIndexOn(fields) {\n        fields = fields.concat();\n        fields.sort();\n\n        return _.findIndex(this.indexes, index => {\n                return _.findIndex(index.fields, (f, idx) => (fields.length <= idx || fields[idx] !== f)) === -1;\n            }) != -1;\n    }\n\n    /**\n     * Add all indexes\n     */\n    addIndexes() {\n        if (this.info.indexes) {\n            _.each(this.info.indexes, index => {\n                this.addIndex(index);\n            });\n        }\n    }\n\n    /**\n     * Add an index\n     * @param {object} index\n     * @property {array} index.fields - Fields of the index\n     * @property {bool} index.unique - Flag of uniqueness of the index\n     * @returns {Entity}\n     */\n    addIndex(index) {\n        if (!this.indexes) {\n            this.indexes = [];\n        }\n\n        index = _.cloneDeep(index);\n\n        assert: index.fields;\n\n        if (!_.isArray(index.fields)) {\n            index.fields = [ index.fields ];\n        }\n\n        let fields = index.fields; \n\n        index.fields = _.map(fields, field => {\n\n            let normalizedField = field;//_.camelCase(field);\n\n            if (!this.hasField(normalizedField)) {\n\n                throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);\n            }\n\n            return normalizedField;\n        });\n\n        index.fields.sort();\n\n        if (this.hasIndexOn(index.fields)) {\n            throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);\n        }\n\n        this.indexes.push(index);\n\n        return this;\n    }\n\n    /**\n     * Get a field object by field name or entity meta accesor (e.g. $key, $feature).\n     * @param fieldId\n     * @returns {Field}\n     */\n    getEntityAttribute(fieldId) {\n        if (fieldId[0] === '$') {\n            let token = fieldId.substr(1);\n\n            switch (token) {\n                case \"key\":\n                    if (Array.isArray(this.key)) {\n                        throw new Error('Combination key not support for accesor \"$key\".');\n                    }\n                    return this.fields[this.key];\n\n                case 'feature':\n                    return this.features;\n\n                default:\n                    throw new Error(`Filed accessor \"${token}\" not supported!`);\n            }\n        } else {\n            if (!this.hasField(fieldId)) {\n                throw new Error(`Field \"${fieldId}\" not exists in entity \"${this.name}\".`)\n            }\n\n            return this.fields[fieldId];\n        }\n    }\n\n    /**\n     * Check whether the entity has a field with given name\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasField(name) {\n        if (Array.isArray(name)) {\n            return _.every(name, fn => this.hasField(fn));\n        }\n\n        return name in this.fields;\n    }\n\n    /**\n     * Add association, dbms-specific\n     * @param {*} name \n     * @param {*} props \n     * @example\n     * e.g. mysql\n     *  entity - Associated entity name\n     *  join - Join type, e.g. INNER, LEFT, RIGHT, OUTER\n     *  exclude - Exclude in output columns\n     *  alias - Alias \n     *  on - On conditions\n     *  dataset - Sub query\n     *  assocs - Child associations\n     *  optional - Optional\n     *  'default' - Default value\n     *  list - Is a list\n     */\n    addAssociation(name, props) {\n        if (!this.associations) {\n            this.associations = {};\n        }    \n\n        if (name in this.associations) {\n            throw new Error(`Association \"${name}\" already exists in entity \"${this.name}\". Props: ` + JSON.stringify(props));\n        }\n\n        this.associations[name] = props;\n    }\n\n    /**\n     * Add a association field.\n     * @param {string} name\n     * @param {Entity} destEntity\n     * @param {Field} destField\n     */\n    addAssocField(name, destEntity, destField, extraProps) {\n        let localField = this.fields[name];\n\n        if (localField) {            \n            throw new Error(`Field \"${name}\" already exists in entity \"${this.name}\".`);\n        }\n\n        let destFieldInfo = _.omit(destField.toJSON(), FunctionalQualifiers);\n        Object.assign(destFieldInfo, extraProps);       \n\n        this.addField(name, destFieldInfo);    \n        //this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));   \n    }\n\n    /**\n     * Add a field into the entity\n     * @param {string} name\n     * @param {object} rawInfo\n     * @returns {Entity}\n     */\n    addField(name, rawInfo) {        \n        if (this.hasField(name)) {\n            throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);\n        }\n\n        assert: rawInfo.type;\n\n        let field;\n\n        if (rawInfo instanceof Field) {\n            field = rawInfo.clone();\n            field.name = name; // todo: displayName\n        } else {            \n            let [ fullRawInfo, baseInfo ] = this.linker.trackBackType(this.gemlModule, rawInfo);      \n            if (baseInfo != null) {      \n                this.addUsedType(rawInfo.type, baseInfo.gemlModule.id);\n            }\n\n            field = new Field(name, fullRawInfo);\n            field.link();\n        }                \n        \n        this.fields[name] = field;\n\n        if (!this.key) {\n            //make the first field as the default key\n            this.key = name;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a feature into the entity, e.g. auto increment id\n     * @param {string} name\n     * @param {*} feature\n     * @param {bool} [allowMultiple=false] - Allow multiple occurrence\n     * @returns {Entity}\n     */\n    addFeature(name, feature, allowMultiple) {\n        if (!this.features) {\n            this.features = {};\n        }\n\n        if (allowMultiple) {\n            if (!this.features[name]) {\n                this.features[name] = [];\n            }\n\n            this.features[name].push(feature);\n        } else {\n            if (name in this.features) {\n                throw new Error(`Duplicate feature found: ${name}. An entity can only have one \"${name}\" feature only.`);\n            }\n\n            this.features[name] = feature;\n        }\n\n        return this;\n    }\n\n    hasFeature(name) {\n        return this.features && (name in this.features);\n    }\n\n    /**\n     * Set key name\n     * @param {string|array.<string>} name - Field name to be used as the key\n     * @returns {Entity}\n     */\n    setKey(name) {\n        this.key = name;\n        return this;\n    }\n\n    getReferencedEntity(entityName) {\n        return this.linker.loadEntity(this.gemlModule, entityName);    \n    }\n\n    /**\n     * Returns the association info if there is connection to the given destination entity.\n     */\n    getReferenceTo(entityName, includes, excludes) {\n        return this.info.associations && _.find(\n            this.info.associations, assoc => {\n                if (includes) {\n                    if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;\n                }\n\n                if (excludes) {\n                    if (excludes.association && assoc === excludes.association) return false;\n                    if (excludes.type && assoc.type === excludes.type) return false;\n                    if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;\n                    if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;\n                    if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;\n                }\n\n                return assoc.destEntity === entityName;\n            }\n        );\n    }\n\n    /**\n     * Get key field \n     * @returns {*}\n     */\n    getKeyField() {\n        return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];\n    }\n\n    /**\n     * Clone the entity\n     * @param {Map} [stack] - Reference stack to avoid recurrence copy\n     * @returns {Entity}\n     */\n    clone() {        \n        super.clone();\n\n        let entity = new Entity(this.linker, this.name, this.gemlModule, this.info);        \n\n        deepCloneField(this, entity, 'code');\n        deepCloneField(this, entity, 'displayName');\n        deepCloneField(this, entity, 'comment');\n        deepCloneField(this, entity, 'features');\n        deepCloneField(this, entity, 'fields');\n        deepCloneField(this, entity, 'types');    \n        deepCloneField(this, entity, 'associations');        \n        deepCloneField(this, entity, 'key');        \n        deepCloneField(this, entity, 'indexes');    \n        deepCloneField(this, entity, 'inputs');        \n        deepCloneField(this, entity, 'interfaces');\n\n        entity.linked = true;\n\n        return entity;\n    }\n \n    /**\n     * Translate the entity into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,     \n            code: this.code,            \n            displayName: this.displayName,\n            comment: this.comment,            \n            ...(this.baseClasses ? { baseClasses: this.baseClasses } : {}),\n            features: this.features,            \n            types: this.types,  \n            fields: _.mapValues(this.fields, field => field.toJSON()),\n            associations: this.associations,\n            key: this.key,\n            indexes: this.indexes\n        };\n    }\n\n    _inherit(baseEntity) {  \n        let overrideInfo = {};\n\n        if (baseEntity.baseClasses) {\n            let baseClasses = baseEntity.baseClasses;\n\n            if (this.baseClasses) {\n                this.baseClasses = _.uniq(baseClasses.concat(this.baseClasses));\n            } else {\n                this.baseClasses = baseClasses.concat();\n            }\n        }\n\n        if (!_.isEmpty(baseEntity.info.features)) {\n            let baseFeatures = _.cloneDeep(baseEntity.info.features);          \n            \n            if (this.info.features) {\n                overrideInfo.features = baseFeatures.concat(this.info.features);\n            } else {\n                overrideInfo.features = baseFeatures;\n            }\n        }        \n        \n        if (!_.isEmpty(baseEntity.info.fields)) {\n            let fields = _.cloneDeep(baseEntity.info.fields);\n            overrideInfo.fields = { ...fields, ...this.info.fields };\n        }\n        \n        if (baseEntity.info.key) {\n            overrideInfo.key = baseEntity.info.key;\n        }         \n        \n        if (baseEntity.info.indexes) {\n            let indexes = _.cloneDeep(baseEntity.info.indexes);\n\n            if (this.info.indexes) {\n                indexes = indexes.concat(this.info.indexes);\n            }\n\n            overrideInfo.indexes = indexes;\n        }        \n\n        if (baseEntity.info.associations) {\n            let assocs = _.cloneDeep(baseEntity.info.associations);\n\n            assocs = assocs.map(assoc => {\n                if (assoc.destEntity === baseEntity.name) {\n                    return {\n                        ...assoc,\n                        destEntity: this.name\n                    };\n                }\n\n                return assoc;\n            });        \n\n            if (this.info.associations) {\n                assocs = assocs.concat(this.info.associations);\n            }       \n            \n            overrideInfo.associations = assocs;\n        }     \n\n        if (baseEntity.inputs) {\n            overrideInfo.inputs = { ...baseEntity.inputs, ...this.info.inputs };\n        }\n\n        if (!_.isEmpty(overrideInfo)) {                    \n            this.info = { ...this.info, ...overrideInfo };\n        }\n    }\n}\n\nmodule.exports = Entity;"],"file":"Entity.js"}