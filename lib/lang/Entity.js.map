{"version":3,"sources":["../../src/lang/Entity.js"],"names":["EventEmitter","require","path","_","generateDisplayName","deepCloneField","deepClone","Clonable","entityNaming","Field","Types","FunctionalQualifiers","Entity","constructor","linker","name","gemlModule","info","_events","once","eventName","listener","link","pre","linked","log","code","base","baseClasses","castArray","reverse","forEach","baseEntity","loadEntity","assert","_inherit","comment","displayName","emit","features","feature","featureName","fn","resolve","__dirname","err","Error","translateOolValue","args","fields","each","fieldInfo","fieldName","addField","key","Array","isArray","length","inputs","isEmpty","interfaces","cloneDeep","forOwn","intf","accept","map","param","trackBackType","hasIndexOn","concat","sort","findIndex","indexes","index","f","idx","addIndexes","addIndex","field","normalizedField","hasField","join","push","getEntityAttribute","fieldId","token","substr","every","addAssociation","props","associations","JSON","stringify","addAssocField","destEntity","destField","extraProps","localField","destFieldInfo","omit","toJSON","Object","assign","rawInfo","type","clone","fullRawInfo","addFeature","allowMultiple","hasFeature","setKey","getReferencedEntity","entityName","getReferenceTo","includes","excludes","find","assoc","value","prop","isEqual","association","indexOf","types","getKeyField","kf","entity","mapValues","overrideInfo","uniq","baseFeatures","assocs","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst EventEmitter = require('events');\nconst path = require('path');\n\nconst { _ } = require('@genx/july');\nconst { generateDisplayName, deepCloneField, deepClone, Clonable, entityNaming } = require('./GemlUtils');\n\nconst Field = require('./Field');\nconst { Types: { FunctionalQualifiers } } = require('@genx/data');\n\n/**\n * Entity event listener\n * @callback OolongEntity.eventListener\n * returns {*}\n */\n\n/**\n * Oolong entity\n * @class OolongEntity\n */\nclass Entity extends Clonable {\n    /**\n     * Fields of the entity, map of <fieldName, fieldObject>\n     * @member {object.<string, OolongField>}\n     */\n    fields = {};\n\n    /**     \n     * @param {Linker} linker\n     * @param {string} name\n     * @param {*} gemlModule\n     * @param {object} info\n     */\n    constructor(linker, name, gemlModule, info) {\n        super();\n\n\n        this._events = new EventEmitter();\n\n        /**\n         * Linker to process this entity\n         * @member {OolongLinker}\n         */\n        this.linker = linker;\n\n        /**\n         * Name of this entity\n         * @member {string}\n         */\n        this.name = entityNaming(name);\n\n        /**\n         * Owner geml module\n         * @member {object}\n         */\n        this.gemlModule = gemlModule;\n\n        /**\n         * Raw metadata\n         * @member {Object}\n         */\n        this.info = info;        \n    }\n\n    /**\n     * Listen on an event\n     * @param {string} eventName\n     * @param {OolongEntity.eventListener} listener\n     * @returns {EventEmitter}\n     */\n    once(eventName, listener) {\n        return this._events.once(eventName, listener);\n    }\n\n    /**\n     * Start linking this entity\n     * @returns {Entity}\n     */\n    link() {\n        pre: !this.linked;\n\n        //1.inherit from base entity if any\n        //2.initialize features\n        //3.add fields        \n        //4.api\n\n        //indexes will processed after processing foreign relationship\n\n        this.linker.log('debug', 'Linking entity [' + this.name + '] ...');\n\n        if (this.info.code) {\n            this.code = this.info.code || this.name;\n        }\n\n        if (this.info.base) {\n            //inherit fields, processed features, key and indexes\n            let baseClasses = _.castArray(this.info.base);\n            baseClasses.reverse().forEach(base => {\n                let baseEntity = this.linker.loadEntity(this.gemlModule, base);\n                assert: baseEntity.linked;\n\n                this._inherit(baseEntity);\n            });            \n\n            this.baseClasses = baseClasses;\n        }\n\n        if (this.info.comment) {\n            /**\n             * @member {string}\n             */\n            this.comment = this.info.comment;\n        }\n\n        /**\n         * @member {string}\n         */\n        this.displayName = generateDisplayName(this.name);\n\n        /**\n         * @fires OolongEntity#featuresMixingIn\n         */\n        this._events.emit('featuresMixingIn');\n\n        // load features\n        if (this.info.features) {\n            this.info.features.forEach(feature => {\n                let featureName;\n\n                if (typeof feature === 'string') {\n                    featureName = feature;\n                } else {\n                    featureName = feature.name;\n                }\n\n                let fn;\n                \n                try {\n                    fn = require(path.resolve(__dirname, `./entityFeatures/${featureName}.js`));\n                } catch (err) {\n                    if (err.code === 'MODULE_NOT_FOUND') {\n                        throw new Error(`Unknow feature \"${featureName}\" reference in entity \"${this.name}\"`);\n                    }\n                }\n                fn(this, this.linker.translateOolValue(this.gemlModule, feature.args));\n            });\n        }\n\n        /**\n         * @fires OolongEntity#beforeAddingFields\n         */\n        this._events.emit('beforeAddingFields');\n\n        // process fields\n        if (this.info.fields) {\n            _.each(this.info.fields, (fieldInfo, fieldName) => this.addField(fieldName, fieldInfo));\n        }\n\n        /**\n         * @fires OolongEntity#afterAddingFields\n         */\n        this._events.emit('afterAddingFields');   \n\n        if (this.info.key) {\n            this.key = this.info.key;\n\n            if (Array.isArray(this.key) && this.key.length === 1) {\n                this.key = this.key[0];\n            }\n        }\n\n        if (this.info.inputs) {\n            this.inputs = this.info.inputs;\n        }\n\n        /**\n         * @fires OolongEntity#beforeAddingInterfaces\n         */\n        this._events.emit('beforeAddingInterfaces');        \n        \n        if (!_.isEmpty(this.info.interfaces)) {\n            this.interfaces = _.cloneDeep(this.info.interfaces);\n\n            _.forOwn(this.interfaces, (intf) => {\n                if (!_.isEmpty(intf.accept)) {\n                    intf.accept = _.map(intf.accept, param => {\n                        return this.linker.trackBackType(this.gemlModule, param);\n                    });\n                }\n            });\n        }\n\n        /**\n         * @fires OolongEntity#afterAddingInterfaces\n         */\n        this._events.emit('afterAddingInterfaces');        \n\n        this.linked = true;\n\n        return this;\n    }\n\n    /**\n     * Check whether the entity has an index on the given fields\n     * @param {array} fields\n     * @returns {boolean}\n     */\n    hasIndexOn(fields) {\n        fields = fields.concat();\n        fields.sort();\n\n        return _.findIndex(this.indexes, index => {\n                return _.findIndex(index.fields, (f, idx) => (fields.length <= idx || fields[idx] !== f)) === -1;\n            }) != -1;\n    }\n\n    /**\n     * Add all indexes\n     */\n    addIndexes() {\n        if (this.info.indexes) {\n            _.each(this.info.indexes, index => {\n                this.addIndex(index);\n            });\n        }\n    }\n\n    /**\n     * Add an index\n     * @param {object} index\n     * @property {array} index.fields - Fields of the index\n     * @property {bool} index.unique - Flag of uniqueness of the index\n     * @returns {Entity}\n     */\n    addIndex(index) {\n        if (!this.indexes) {\n            this.indexes = [];\n        }\n\n        index = _.cloneDeep(index);\n\n        assert: index.fields;\n\n        if (!_.isArray(index.fields)) {\n            index.fields = [ index.fields ];\n        }\n\n        let fields = index.fields; \n\n        index.fields = _.map(fields, field => {\n\n            let normalizedField = field;//_.camelCase(field);\n\n            if (!this.hasField(normalizedField)) {\n\n                throw new Error(`Index references non-exist field: ${field}, entity: ${this.name}.`);\n            }\n\n            return normalizedField;\n        });\n\n        index.fields.sort();\n\n        if (this.hasIndexOn(index.fields)) {\n            throw new Error(`Index on [${index.fields.join(', ')}] already exist in entity [${this.name}].`);\n        }\n\n        this.indexes.push(index);\n\n        return this;\n    }\n\n    /**\n     * Get a field object by field name or entity meta accesor (e.g. $key, $feature).\n     * @param fieldId\n     * @returns {OolongField}\n     */\n    getEntityAttribute(fieldId) {\n        if (fieldId[0] === '$') {\n            let token = fieldId.substr(1);\n\n            switch (token) {\n                case \"key\":\n                    if (Array.isArray(this.key)) {\n                        throw new Error('Combination key not support for accesor \"$key\".');\n                    }\n                    return this.fields[this.key];\n\n                case 'feature':\n                    return this.features;\n\n                default:\n                    throw new Error(`Filed accessor \"${token}\" not supported!`);\n            }\n        } else {\n            if (!this.hasField(fieldId)) {\n                throw new Error(`Field \"${fieldId}\" not exists in entity \"${this.name}\".`)\n            }\n\n            return this.fields[fieldId];\n        }\n    }\n\n    /**\n     * Check whether the entity has a field with given name\n     * @param {string} name\n     * @returns {boolean}\n     */\n    hasField(name) {\n        if (Array.isArray(name)) {\n            return _.every(name, fn => this.hasField(fn));\n        }\n\n        return name in this.fields;\n    }\n\n    /**\n     * Add association, dbms-specific\n     * @param {*} name \n     * @param {*} props \n     * @example\n     * e.g. mysql\n     *  entity - Associated entity name\n     *  join - Join type, e.g. INNER, LEFT, RIGHT, OUTER\n     *  exclude - Exclude in output columns\n     *  alias - Alias \n     *  on - On conditions\n     *  dataset - Sub query\n     *  assocs - Child associations\n     *  optional - Optional\n     *  'default' - Default value\n     *  list - Is a list\n     */\n    addAssociation(name, props) {\n        if (!this.associations) {\n            this.associations = {};\n        }    \n\n        if (name in this.associations) {\n            throw new Error(`Association \"${name}\" already exists in entity \"${this.name}\". Props: ` + JSON.stringify(props));\n        }\n\n        this.associations[name] = props;\n    }\n\n    /**\n     * Add a association field.\n     * @param {string} name\n     * @param {OolongEntity} destEntity\n     * @param {OolongField} destField\n     */\n    addAssocField(name, destEntity, destField, extraProps) {\n        let localField = this.fields[name];\n\n        if (localField) {            \n            throw new Error(`Field \"${name}\" already exists in entity \"${this.name}\".`);\n        }\n\n        let destFieldInfo = _.omit(destField.toJSON(), FunctionalQualifiers);\n        Object.assign(destFieldInfo, extraProps);       \n\n        this.addField(name, destFieldInfo);    \n        //this.fields[name].displayName = fieldNaming(prefixNaming(destEntity.name, destField.name));   \n    }\n\n    /**\n     * Add a field into the entity\n     * @param {string} name\n     * @param {object} rawInfo\n     * @returns {Entity}\n     */\n    addField(name, rawInfo) {        \n        if (this.hasField(name)) {\n            throw new Error(`Field name [${name}] conflicts in entity [${this.name}].`);\n        }\n\n        assert: rawInfo.type;\n\n        let field;\n\n        if (rawInfo instanceof Field) {\n            field = rawInfo.clone();\n            field.name = name; // todo: displayName\n        } else {            \n            let fullRawInfo = this.linker.trackBackType(this.gemlModule, rawInfo);            \n\n            field = new Field(name, fullRawInfo);\n            field.link();\n        }                \n        \n        this.fields[name] = field;\n\n        if (!this.key) {\n            //make the first field as the default key\n            this.key = name;\n        }\n\n        return this;\n    }\n\n    /**\n     * Add a feature into the entity, e.g. auto increment id\n     * @param {string} name\n     * @param {*} feature\n     * @param {bool} [allowMultiple=false] - Allow multiple occurrence\n     * @returns {Entity}\n     */\n    addFeature(name, feature, allowMultiple) {\n        if (!this.features) {\n            this.features = {};\n        }\n\n        if (allowMultiple) {\n            if (!this.features[name]) {\n                this.features[name] = [];\n            }\n\n            this.features[name].push(feature);\n        } else {\n            if (name in this.features) {\n                throw new Error(`Duplicate feature found: ${name}. An entity can only have one \"${name}\" feature only.`);\n            }\n\n            this.features[name] = feature;\n        }\n\n        return this;\n    }\n\n    hasFeature(name) {\n        return this.features && (name in this.features);\n    }\n\n    /**\n     * Set key name\n     * @param {string|array.<string>} name - Field name to be used as the key\n     * @returns {Entity}\n     */\n    setKey(name) {\n        this.key = name;\n        return this;\n    }\n\n    getReferencedEntity(entityName) {\n        return this.linker.loadEntity(this.gemlModule, entityName);    \n    }\n\n    /**\n     * Returns the association info if there is connection to the given destination entity.\n     */\n    getReferenceTo(entityName, includes, excludes) {\n        return this.info.associations && _.find(\n            this.info.associations, assoc => {\n                if (includes) {\n                    if (_.find(includes, (value, prop) => typeof value === 'function' ? !value(assoc[prop]) : !_.isEqual(assoc[prop], value))) return false;\n                }\n\n                if (excludes) {\n                    if (excludes.association && assoc === excludes.association) return false;\n                    if (excludes.type && assoc.type === excludes.type) return false;\n                    if (excludes.associations && excludes.associations.indexOf(assoc) > -1) return false;\n                    if (excludes.types && excludes.types.indexOf(assoc.type) > -1) return false;\n                    if (excludes.props && _.find(excludes.props, prop => assoc[prop])) return false;\n                }\n\n                return assoc.destEntity === entityName;\n            }\n        );\n    }\n\n    /**\n     * Get key field \n     * @returns {*}\n     */\n    getKeyField() {\n        return Array.isArray(this.key) ? this.key.map(kf => this.fields[kf]) : this.fields[this.key];\n    }\n\n    /**\n     * Clone the entity\n     * @param {Map} [stack] - Reference stack to avoid recurrence copy\n     * @returns {Entity}\n     */\n    clone() {        \n        super.clone();\n\n        let entity = new Entity(this.linker, this.name, this.gemlModule, this.info);        \n\n        deepCloneField(this, entity, 'code');\n        deepCloneField(this, entity, 'displayName');\n        deepCloneField(this, entity, 'comment');\n        deepCloneField(this, entity, 'features');\n        deepCloneField(this, entity, 'fields');    \n        deepCloneField(this, entity, 'associations');        \n        deepCloneField(this, entity, 'key');        \n        deepCloneField(this, entity, 'indexes');    \n        deepCloneField(this, entity, 'inputs');        \n        deepCloneField(this, entity, 'interfaces');\n\n        entity.linked = true;\n\n        return entity;\n    }\n \n    /**\n     * Translate the entity into a plain JSON object\n     * @returns {object}\n     */\n    toJSON() {\n        return {            \n            name: this.name,     \n            code: this.code,            \n            displayName: this.displayName,\n            comment: this.comment,            \n            ...(this.baseClasses ? { baseClasses: this.baseClasses } : {}),\n            features: this.features,            \n            fields: _.mapValues(this.fields, field => field.toJSON()),\n            associations: this.associations,\n            key: this.key,\n            indexes: this.indexes\n        };\n    }\n\n    _inherit(baseEntity) {  \n        let overrideInfo = {};\n\n        if (baseEntity.baseClasses) {\n            let baseClasses = baseEntity.baseClasses;\n\n            if (this.baseClasses) {\n                this.baseClasses = _.uniq(baseClasses.concat(this.baseClasses));\n            } else {\n                this.baseClasses = baseClasses.concat();\n            }\n        }\n\n        if (!_.isEmpty(baseEntity.info.features)) {\n            let baseFeatures = _.cloneDeep(baseEntity.info.features);          \n            \n            if (this.info.features) {\n                overrideInfo.features = baseFeatures.concat(this.info.features);\n            } else {\n                overrideInfo.features = baseFeatures;\n            }\n        }        \n        \n        if (!_.isEmpty(baseEntity.info.fields)) {\n            let fields = _.cloneDeep(baseEntity.info.fields);\n            overrideInfo.fields = { ...fields, ...this.info.fields };\n        }\n        \n        if (baseEntity.info.key) {\n            overrideInfo.key = baseEntity.info.key;\n        }         \n        \n        if (baseEntity.info.indexes) {\n            let indexes = _.cloneDeep(baseEntity.info.indexes);\n\n            if (this.info.indexes) {\n                indexes = indexes.concat(this.info.indexes);\n            }\n\n            overrideInfo.indexes = indexes;\n        }        \n\n        if (baseEntity.info.associations) {\n            let assocs = _.cloneDeep(baseEntity.info.associations);\n\n            assocs = assocs.map(assoc => {\n                if (assoc.destEntity === baseEntity.name) {\n                    return {\n                        ...assoc,\n                        destEntity: this.name\n                    };\n                }\n\n                return assoc;\n            });        \n\n            if (this.info.associations) {\n                assocs = assocs.concat(this.info.associations);\n            }       \n            \n            overrideInfo.associations = assocs;\n        }     \n\n        if (baseEntity.inputs) {\n            overrideInfo.inputs = { ...baseEntity.inputs, ...this.info.inputs };\n        }\n\n        if (!_.isEmpty(overrideInfo)) {                    \n            this.info = { ...this.info, ...overrideInfo };\n        }\n    }\n}\n\nmodule.exports = Entity;"],"file":"Entity.js"}