{"version":3,"sources":["../../src/lang/GemlUtils.js"],"names":["_","require","pluralize","Clonable","clone","assert","linked","deepClone","value","cloneDeepWith","el","undefined","deepCloneField","src","dest","field","isDotSeparateName","name","indexOf","extractDotSeparateName","split","extractReferenceBaseName","pop","prefixNaming","prefix","leftParts","kebabCase","rightParts","reservedLeft","reservedRight","length","splice","combine","camelCase","concat","join","isEqual","push","shift","unshift","getReferenceNameIfItIs","obj","isPlainObject","oolType","exports","parseReferenceInDocument","schema","doc","ref","parts","parent","l","entityNode","entity","i","p","Error","entities","attr","getEntityAttribute","Field","subDocuments","last","toLowerCase","schemaNaming","entityNaming","fieldNaming","generateDisplayName","startCase","formatFields","Array","isArray"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst { _ } = require('@genx/july');\nconst pluralize = require('pluralize');\n\nclass Clonable {\n    linked = false;\n\n    clone() {      \n        assert: this.linked, 'An element becomes clonable only after being linked.';\n    }\n}\n\nconst deepClone = (value) => _.cloneDeepWith(value, el => (el instanceof Clonable) ? el.clone() : undefined);\n\nconst deepCloneField = (src, dest, field) => {\n    if (field in src) dest[field] = deepClone(src[field]);\n};\n\nconst isDotSeparateName = (name) => (name.indexOf('.') > 0);\n\nconst extractDotSeparateName = (name) => name.split('.');\n\nconst extractReferenceBaseName = (name) => extractDotSeparateName(name).pop();\n\nconst prefixNaming = (prefix, name) => {\n    let leftParts = _.kebabCase(prefix).split('-');\n    let rightParts = _.kebabCase(extractReferenceBaseName(name)).split('-');\n    \n    let reservedLeft, reservedRight;\n\n    if (leftParts.length > rightParts.length) {\n        reservedLeft = leftParts.splice(0, leftParts.length - rightParts.length);\n        reservedRight = [];\n    } else {\n        reservedLeft = [];\n        reservedRight = rightParts.splice(leftParts.length, rightParts.length - leftParts.length);\n    }\n\n    const combine = () => _.camelCase(reservedLeft.concat(leftParts).concat(reservedRight).join('-'));\n\n    if (_.isEqual(leftParts, rightParts)) {\n        return combine();\n    }\n    \n    while (leftParts.length > 0) {\n        reservedLeft.push(leftParts.shift());\n        reservedRight.unshift(rightParts.pop());\n        if (_.isEqual(leftParts, rightParts)) {\n            break;\n        }\n    } \n\n    return combine();\n};\n\nconst getReferenceNameIfItIs = (obj) => {\n    if (_.isPlainObject(obj) && obj.oolType === 'ObjectReference') {\n        return extractDotSeparateName(obj.name)[0];\n    }\n\n    return undefined;\n};\n\nexports.parseReferenceInDocument = (schema, doc, ref) => {    \n    let parts = ref.split('.');\n    let parent;\n    let l = parts.length;\n    let entityNode, entity, field;\n    \n    for (let i = 0; i < l; i++) {\n        let p = parts[i];\n        \n        if (!entityNode) {\n            if (doc.entity === p) {\n                entityNode = doc;\n                continue;\n            }\n\n            throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n        }\n\n        if (entityNode && p[0] === '$') {\n            entity = schema.entities[entityNode.entity];\n            let attr = entity.getEntityAttribute(p);\n\n            if (attr instanceof Field) {\n                field = attr;\n                if (i !== l-1) {\n                    throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n                }\n\n                return {\n                    entityNode,\n                    entity,\n                    field\n                };\n            } else {\n                parent = attr;\n            }\n\n            continue;\n        }\n        \n        if (parent) {\n            parent = parent[p];\n        } else {\n            if (i === l-1) {\n                //last part\n                entity = schema.entities[entityNode.entity];\n                field = entity.getEntityAttribute(p);\n\n                return {\n                    entityNode,\n                    entity,\n                    field\n                };\n            }\n\n            entityNode = entityNode.subDocuments && entityNode.subDocuments[p];\n            if (!entityNode) {\n                throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n            }\n        }\n    }\n\n    if (!field) {\n        if (typeof parent !== 'string') {\n            throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n        }\n\n        if (!entity) {\n            throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n        }\n\n        field = entity.getEntityAttribute(parent);\n        if (!(field instanceof Field)) {\n            throw new Error(`Reference by path \"${ref}\" not found in given document.`);\n        }\n    }\n    \n    return {\n        entityNode,\n        entity,\n        field\n    };\n};\n\nexports.pluralize = (name) => {\n    let parts = _.kebabCase(name).split('-');\n    let last = pluralize(parts.pop().toLowerCase());\n    parts.push(last);\n    return _.camelCase(parts.join('-'));\n};\n\nexports.deepClone = deepClone;\nexports.deepCloneField = deepCloneField;\nexports.isDotSeparateName = isDotSeparateName;\nexports.extractDotSeparateName = extractDotSeparateName;\nexports.extractReferenceBaseName = extractReferenceBaseName;\nexports.getReferenceNameIfItIs = getReferenceNameIfItIs;\nexports.schemaNaming = name => _.camelCase(name);\nexports.entityNaming = name => _.camelCase(name);\nexports.fieldNaming = name => _.camelCase(name);\nexports.prefixNaming = prefixNaming;\nexports.generateDisplayName = name => _.startCase(name);\nexports.formatFields = field => Array.isArray(field) ? field.join(', ') : field;\nexports.Clonable = Clonable;"],"file":"GemlUtils.js"}