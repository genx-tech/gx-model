"use strict";

require("source-map-support/register");

const path = require('path');

const {
  fs,
  _
} = require('rk-utils');

const {
  ServiceContainer
} = require('@genx/app');

const {
  Validators: {
    validateObjectBySchema
  }
} = require('@genx/data');

class AppInitiator {
  constructor(context) {
    this.app = context.app;
    this.cwd = context.cwd;
  }

  async run(command) {
    let configFile = this.app.commandLine.option('config') || 'geml.json';
    let configFullPath = path.resolve(this.cwd, configFile);

    if (!fs.existsSync(configFullPath)) {
      throw new Error(`Config "${configFile}" not found!`);
    }

    let extName = path.extname(configFullPath);

    if (extName !== '.json') {
      throw new Error('Only supports JSON config.');
    }

    let configName = path.basename(configFullPath, extName);
    let configPath = path.dirname(configFullPath);
    let envAware = false;

    if (configName.endsWith('.default')) {
      envAware = true;
      configName = configName.substr(0, configName.length - 8);
    }

    this.container = new ServiceContainer('GemlCore', {
      workingPath: this.cwd,
      configPath,
      configName,
      disableEnvAwareConfig: !envAware,
      allowedFeatures: ['configByHostname', 'devConfigByGitUser', 'appLogger', 'loggers', 'settings', 'timezone', 'version', 'dataSource', 'env']
    });
    this.container.replaceLogger(this.app.logger);
    await this.container.start_();
    this.app.once('stopping', stopper => {
      stopper.push((async () => {
        await this.container.stop_();
      })());
    });

    this.container.option = name => {
      return this.app.commandLine.option(name);
    };

    let config = this.container.settings.geml;

    if (_.isEmpty(config)) {
      throw new Error('Empty geml config!');
    }

    let {
      gemlPath,
      modelPath,
      scriptPath,
      manifestPath,
      useJsonSource,
      saveIntermediate
    } = validateObjectBySchema(config, {
      'gemlPath': {
        type: 'text',
        default: 'geml'
      },
      'modelPath': {
        type: 'text',
        default: 'src/models'
      },
      'scriptPath': {
        type: 'text',
        default: 'src/scripts'
      },
      'manifestPath': {
        type: 'text',
        optional: true
      },
      'useJsonSource': {
        type: 'boolean',
        default: false
      },
      'saveIntermediate': {
        type: 'boolean',
        default: false
      }
    });
    this.container.options.modelPath = modelPath;
    gemlPath = this.container.toAbsolutePath(gemlPath);
    modelPath = this.container.toAbsolutePath(modelPath);
    scriptPath = this.container.toAbsolutePath(scriptPath);
    manifestPath = this.container.toAbsolutePath(manifestPath);
    let gemlConfig = { ...config,
      gemlPath,
      modelPath,
      scriptPath,
      manifestPath,
      useJsonSource,
      saveIntermediate
    };

    if (!_.isEmpty(gemlConfig.schemas)) {
      const {
        load_: useDb
      } = require('@genx/app/lib/features/useDb');

      await useDb(this.container, gemlConfig.schemas);
    }

    let cmdMethod_ = require('./commands/' + command);

    try {
      await cmdMethod_(this.container, gemlConfig);
    } catch (error) {
      throw error;
      this.app.logError(error);
      process.exit(1);
    }
  }

}

module.exports = AppInitiator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BcHBJbml0aWF0b3IuanMiXSwibmFtZXMiOlsicGF0aCIsInJlcXVpcmUiLCJmcyIsIl8iLCJTZXJ2aWNlQ29udGFpbmVyIiwiVmFsaWRhdG9ycyIsInZhbGlkYXRlT2JqZWN0QnlTY2hlbWEiLCJBcHBJbml0aWF0b3IiLCJjb25zdHJ1Y3RvciIsImNvbnRleHQiLCJhcHAiLCJjd2QiLCJydW4iLCJjb21tYW5kIiwiY29uZmlnRmlsZSIsImNvbW1hbmRMaW5lIiwib3B0aW9uIiwiY29uZmlnRnVsbFBhdGgiLCJyZXNvbHZlIiwiZXhpc3RzU3luYyIsIkVycm9yIiwiZXh0TmFtZSIsImV4dG5hbWUiLCJjb25maWdOYW1lIiwiYmFzZW5hbWUiLCJjb25maWdQYXRoIiwiZGlybmFtZSIsImVudkF3YXJlIiwiZW5kc1dpdGgiLCJzdWJzdHIiLCJsZW5ndGgiLCJjb250YWluZXIiLCJ3b3JraW5nUGF0aCIsImRpc2FibGVFbnZBd2FyZUNvbmZpZyIsImFsbG93ZWRGZWF0dXJlcyIsInJlcGxhY2VMb2dnZXIiLCJsb2dnZXIiLCJzdGFydF8iLCJvbmNlIiwic3RvcHBlciIsInB1c2giLCJzdG9wXyIsIm5hbWUiLCJjb25maWciLCJzZXR0aW5ncyIsImdlbWwiLCJpc0VtcHR5IiwiZ2VtbFBhdGgiLCJtb2RlbFBhdGgiLCJzY3JpcHRQYXRoIiwibWFuaWZlc3RQYXRoIiwidXNlSnNvblNvdXJjZSIsInNhdmVJbnRlcm1lZGlhdGUiLCJ0eXBlIiwiZGVmYXVsdCIsIm9wdGlvbmFsIiwib3B0aW9ucyIsInRvQWJzb2x1dGVQYXRoIiwiZ2VtbENvbmZpZyIsInNjaGVtYXMiLCJsb2FkXyIsInVzZURiIiwiY21kTWV0aG9kXyIsImVycm9yIiwibG9nRXJyb3IiLCJwcm9jZXNzIiwiZXhpdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU07QUFB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QUE4QlQsU0FBOUIsQ0FBWjtBQUNBQyxJQUFBQSxVQUFVLEdBQUcsS0FBS2xCLFNBQUwsQ0FBZTBCLGNBQWYsQ0FBOEJSLFVBQTlCLENBQWI7QUFDQUMsSUFBQUEsWUFBWSxHQUFHLEtBQUtuQixTQUFMLENBQWUwQixjQUFmLENBQThCUCxZQUE5QixDQUFmO0FBRUEsUUFBSVEsVUFBVSxHQUFHLEVBQ2IsR0FBR2YsTUFEVTtBQUViSSxNQUFBQSxRQUZhO0FBR2JDLE1BQUFBLFNBSGE7QUFJYkMsTUFBQUEsVUFKYTtBQUtiQyxNQUFBQSxZQUxhO0FBTWJDLE1BQUFBLGFBTmE7QUFPYkMsTUFBQUE7QUFQYSxLQUFqQjs7QUFVQSxRQUFJLENBQUNqRCxDQUFDLENBQUMyQyxPQUFGLENBQVVZLFVBQVUsQ0FBQ0MsT0FBckIsQ0FBTCxFQUFvQztBQUNoQyxZQUFNO0FBQUVDLFFBQUFBLEtBQUssRUFBRUM7QUFBVCxVQUFtQjVELE9BQU8sQ0FBQyw4QkFBRCxDQUFoQzs7QUFDQSxZQUFNNEQsS0FBSyxDQUFDLEtBQUs5QixTQUFOLEVBQWlCMkIsVUFBVSxDQUFDQyxPQUE1QixDQUFYO0FBQ0g7O0FBRUQsUUFBSUcsVUFBVSxHQUFHN0QsT0FBTyxDQUFDLGdCQUFnQlksT0FBakIsQ0FBeEI7O0FBRUEsUUFBSTtBQUNBLFlBQU1pRCxVQUFVLENBQUMsS0FBSy9CLFNBQU4sRUFBaUIyQixVQUFqQixDQUFoQjtBQUNILEtBRkQsQ0FFRSxPQUFPSyxLQUFQLEVBQWM7QUFFUixZQUFNQSxLQUFOO0FBR0osV0FBS3JELEdBQUwsQ0FBU3NELFFBQVQsQ0FBa0JELEtBQWxCO0FBQ0FFLE1BQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLENBQWI7QUFDSDtBQUNKOztBQW5IYzs7QUFzSG5CQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI3RCxZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBhdGggPSByZXF1aXJlKCdwYXRoJyk7XG5jb25zdCB7IGZzLCBfIH0gPSByZXF1aXJlKCdyay11dGlscycpO1xuY29uc3QgeyBTZXJ2aWNlQ29udGFpbmVyIH0gPSByZXF1aXJlKCdAZ2VueC9hcHAnKTtcbmNvbnN0IHsgVmFsaWRhdG9yczogeyB2YWxpZGF0ZU9iamVjdEJ5U2NoZW1hIH0gfSA9IHJlcXVpcmUoJ0BnZW54L2RhdGEnKVxuXG5jbGFzcyBBcHBJbml0aWF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5hcHAgPSBjb250ZXh0LmFwcDtcbiAgICAgICAgdGhpcy5jd2QgPSBjb250ZXh0LmN3ZDsgICAgICAgIFxuICAgIH1cblxuICAgIGFzeW5jIHJ1bihjb21tYW5kKSB7ICAgICAgICBcbiAgICAgICAgbGV0IGNvbmZpZ0ZpbGUgPSB0aGlzLmFwcC5jb21tYW5kTGluZS5vcHRpb24oJ2NvbmZpZycpIHx8ICdnZW1sLmpzb24nOyAgICAgICAgICAgICAgICBcbiAgICAgICAgbGV0IGNvbmZpZ0Z1bGxQYXRoID0gcGF0aC5yZXNvbHZlKHRoaXMuY3dkLCBjb25maWdGaWxlKTtcblxuICAgICAgICBpZiAoIShmcy5leGlzdHNTeW5jKGNvbmZpZ0Z1bGxQYXRoKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29uZmlnIFwiJHtjb25maWdGaWxlfVwiIG5vdCBmb3VuZCFgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBleHROYW1lID0gcGF0aC5leHRuYW1lKGNvbmZpZ0Z1bGxQYXRoKTtcbiAgICAgICAgaWYgKGV4dE5hbWUgIT09ICcuanNvbicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT25seSBzdXBwb3J0cyBKU09OIGNvbmZpZy4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjb25maWdOYW1lID0gcGF0aC5iYXNlbmFtZShjb25maWdGdWxsUGF0aCwgZXh0TmFtZSk7XG4gICAgICAgIGxldCBjb25maWdQYXRoID0gcGF0aC5kaXJuYW1lKGNvbmZpZ0Z1bGxQYXRoKTtcbiAgICAgICAgbGV0IGVudkF3YXJlID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZ05hbWUuZW5kc1dpdGgoJy5kZWZhdWx0JykpIHtcbiAgICAgICAgICAgIGVudkF3YXJlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZ05hbWUgPSBjb25maWdOYW1lLnN1YnN0cigwLCBjb25maWdOYW1lLmxlbmd0aCAtIDgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBuZXcgU2VydmljZUNvbnRhaW5lcignR2VtbENvcmUnLCB7XG4gICAgICAgICAgICB3b3JraW5nUGF0aDogdGhpcy5jd2QsXG4gICAgICAgICAgICBjb25maWdQYXRoLFxuICAgICAgICAgICAgY29uZmlnTmFtZSwgICAgICAgICAgICBcbiAgICAgICAgICAgIGRpc2FibGVFbnZBd2FyZUNvbmZpZzogIWVudkF3YXJlLFxuICAgICAgICAgICAgYWxsb3dlZEZlYXR1cmVzOiBbXG4gICAgICAgICAgICAgICAgJ2NvbmZpZ0J5SG9zdG5hbWUnLCAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgJ2RldkNvbmZpZ0J5R2l0VXNlcicsICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICdhcHBMb2dnZXInLFxuICAgICAgICAgICAgICAgICdsb2dnZXJzJywgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAnc2V0dGluZ3MnLFxuICAgICAgICAgICAgICAgICd0aW1lem9uZScsXG4gICAgICAgICAgICAgICAgJ3ZlcnNpb24nLCAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAnZGF0YVNvdXJjZScsXG4gICAgICAgICAgICAgICAgJ2VudidcbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIucmVwbGFjZUxvZ2dlcih0aGlzLmFwcC5sb2dnZXIpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMuY29udGFpbmVyLnN0YXJ0XygpO1xuXG4gICAgICAgIHRoaXMuYXBwLm9uY2UoJ3N0b3BwaW5nJywgc3RvcHBlciA9PiB7XG4gICAgICAgICAgICBzdG9wcGVyLnB1c2goKGFzeW5jICgpID0+IHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5jb250YWluZXIuc3RvcF8oKTtcbiAgICAgICAgICAgIH0pKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5vcHRpb24gPSAobmFtZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLmNvbW1hbmRMaW5lLm9wdGlvbihuYW1lKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgY29uZmlnID0gdGhpcy5jb250YWluZXIuc2V0dGluZ3MuZ2VtbDtcbiAgICAgICAgaWYgKF8uaXNFbXB0eShjb25maWcpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtcHR5IGdlbWwgY29uZmlnIScpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHsgXG4gICAgICAgICAgICBnZW1sUGF0aCwgXG4gICAgICAgICAgICBtb2RlbFBhdGgsIFxuICAgICAgICAgICAgc2NyaXB0UGF0aCxcbiAgICAgICAgICAgIG1hbmlmZXN0UGF0aCxcbiAgICAgICAgICAgIHVzZUpzb25Tb3VyY2UsXG4gICAgICAgICAgICBzYXZlSW50ZXJtZWRpYXRlIFxuICAgICAgICB9ID0gdmFsaWRhdGVPYmplY3RCeVNjaGVtYShjb25maWcsIHtcbiAgICAgICAgICAgICdnZW1sUGF0aCc6IHsgdHlwZTogJ3RleHQnLCBkZWZhdWx0OiAnZ2VtbCcgfSxcbiAgICAgICAgICAgICdtb2RlbFBhdGgnOiB7IHR5cGU6ICd0ZXh0JywgZGVmYXVsdDogJ3NyYy9tb2RlbHMnIH0sXG4gICAgICAgICAgICAnc2NyaXB0UGF0aCc6IHsgdHlwZTogJ3RleHQnLCBkZWZhdWx0OiAnc3JjL3NjcmlwdHMnIH0sXG4gICAgICAgICAgICAnbWFuaWZlc3RQYXRoJzogeyB0eXBlOiAndGV4dCcsIG9wdGlvbmFsOiB0cnVlIH0sXG4gICAgICAgICAgICAndXNlSnNvblNvdXJjZSc6IHsgdHlwZTogJ2Jvb2xlYW4nLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgICAgICAgICAgJ3NhdmVJbnRlcm1lZGlhdGUnOiB7IHR5cGU6ICdib29sZWFuJywgZGVmYXVsdDogZmFsc2UgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lci5vcHRpb25zLm1vZGVsUGF0aCA9IG1vZGVsUGF0aDtcbiAgICAgICAgXG4gICAgICAgIGdlbWxQYXRoID0gdGhpcy5jb250YWluZXIudG9BYnNvbHV0ZVBhdGgoZ2VtbFBhdGgpOyAgICBcbiAgICAgICAgbW9kZWxQYXRoID0gdGhpcy5jb250YWluZXIudG9BYnNvbHV0ZVBhdGgobW9kZWxQYXRoKTtcbiAgICAgICAgc2NyaXB0UGF0aCA9IHRoaXMuY29udGFpbmVyLnRvQWJzb2x1dGVQYXRoKHNjcmlwdFBhdGgpO1xuICAgICAgICBtYW5pZmVzdFBhdGggPSB0aGlzLmNvbnRhaW5lci50b0Fic29sdXRlUGF0aChtYW5pZmVzdFBhdGgpO1xuICAgICAgICBcbiAgICAgICAgbGV0IGdlbWxDb25maWcgPSB7IFxuICAgICAgICAgICAgLi4uY29uZmlnLFxuICAgICAgICAgICAgZ2VtbFBhdGgsIFxuICAgICAgICAgICAgbW9kZWxQYXRoLCBcbiAgICAgICAgICAgIHNjcmlwdFBhdGgsXG4gICAgICAgICAgICBtYW5pZmVzdFBhdGgsXG4gICAgICAgICAgICB1c2VKc29uU291cmNlLFxuICAgICAgICAgICAgc2F2ZUludGVybWVkaWF0ZSAgXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCFfLmlzRW1wdHkoZ2VtbENvbmZpZy5zY2hlbWFzKSkgeyAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgeyBsb2FkXzogdXNlRGIgfSA9IHJlcXVpcmUoJ0BnZW54L2FwcC9saWIvZmVhdHVyZXMvdXNlRGInKTtcbiAgICAgICAgICAgIGF3YWl0IHVzZURiKHRoaXMuY29udGFpbmVyLCBnZW1sQ29uZmlnLnNjaGVtYXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNtZE1ldGhvZF8gPSByZXF1aXJlKCcuL2NvbW1hbmRzLycgKyBjb21tYW5kKTsgICAgICAgIFxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbWRNZXRob2RfKHRoaXMuY29udGFpbmVyLCBnZW1sQ29uZmlnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGRldjoge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwcC5sb2dFcnJvcihlcnJvcik7XG4gICAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH0gICAgICAgIFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcHBJbml0aWF0b3I7Il19